<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\EV1986Test.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\EV1986Test.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sun Sep 22 22:28:19 2019
<BR><P>
<H3>Maximum Stack Usage =        152 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Timer1_IRQHandler &rArr; LcdScrollString &rArr; LcdPutString &rArr; WriteData
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[7d]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1a]">ADC_IRQHandler</a> from 1986be9x_it.o(.text) referenced from startup_1986be9x.o(RESET)
 <LI><a href="#[1d]">BACKUP_IRQHandler</a> from 1986be9x_it.o(.text) referenced from startup_1986be9x.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from 1986be9x_it.o(.text) referenced from startup_1986be9x.o(RESET)
 <LI><a href="#[d]">CAN1_IRQHandler</a> from 1986be9x_it.o(.text) referenced from startup_1986be9x.o(RESET)
 <LI><a href="#[e]">CAN2_IRQHandler</a> from 1986be9x_it.o(.text) referenced from startup_1986be9x.o(RESET)
 <LI><a href="#[1b]">COMPARATOR_IRQHandler</a> from 1986be9x_it.o(.text) referenced from startup_1986be9x.o(RESET)
 <LI><a href="#[10]">DMA_IRQHandler</a> from 1986be9x_it.o(.text) referenced from startup_1986be9x.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from 1986be9x_it.o(.text) referenced from startup_1986be9x.o(RESET)
 <LI><a href="#[1e]">EXT_INT1_IRQHandler</a> from 1986be9x_it.o(.text) referenced from startup_1986be9x.o(RESET)
 <LI><a href="#[1f]">EXT_INT2_IRQHandler</a> from 1986be9x_it.o(.text) referenced from startup_1986be9x.o(RESET)
 <LI><a href="#[20]">EXT_INT3_IRQHandler</a> from 1986be9x_it.o(.text) referenced from startup_1986be9x.o(RESET)
 <LI><a href="#[21]">EXT_INT4_IRQHandler</a> from 1986be9x_it.o(.text) referenced from startup_1986be9x.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from 1986be9x_it.o(.text) referenced from startup_1986be9x.o(RESET)
 <LI><a href="#[14]">I2C_IRQHandler</a> from 1986be9x_it.o(.text) referenced from startup_1986be9x.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from 1986be9x_it.o(.text) referenced from startup_1986be9x.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from 1986be9x_it.o(.text) referenced from startup_1986be9x.o(RESET)
 <LI><a href="#[15]">POWER_IRQHandler</a> from 1986be9x_it.o(.text) referenced from startup_1986be9x.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from 1986be9x_it.o(.text) referenced from startup_1986be9x.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_1986be9x.o(.text) referenced from startup_1986be9x.o(RESET)
 <LI><a href="#[13]">SSP1_IRQHandler</a> from 1986be9x_it.o(.text) referenced from startup_1986be9x.o(RESET)
 <LI><a href="#[1c]">SSP2_IRQHandler</a> from 1986be9x_it.o(.text) referenced from startup_1986be9x.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from 1986be9x_it.o(.text) referenced from startup_1986be9x.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from 1986be9x_it.o(.text) referenced from startup_1986be9x.o(RESET)
 <LI><a href="#[22]">SystemInit</a> from system_1986be9x.o(.text) referenced from startup_1986be9x.o(.text)
 <LI><a href="#[17]">Timer1_IRQHandler</a> from 1986be9x_it.o(.text) referenced from startup_1986be9x.o(RESET)
 <LI><a href="#[18]">Timer2_IRQHandler</a> from 1986be9x_it.o(.text) referenced from startup_1986be9x.o(RESET)
 <LI><a href="#[19]">Timer3_IRQHandler</a> from 1986be9x_it.o(.text) referenced from startup_1986be9x.o(RESET)
 <LI><a href="#[11]">UART1_IRQHandler</a> from 1986be9x_it.o(.text) referenced from startup_1986be9x.o(RESET)
 <LI><a href="#[12]">UART2_IRQHandler</a> from 1986be9x_it.o(.text) referenced from startup_1986be9x.o(RESET)
 <LI><a href="#[f]">USB_IRQHandler</a> from 1986be9x_it.o(.text) referenced from startup_1986be9x.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from 1986be9x_it.o(.text) referenced from startup_1986be9x.o(RESET)
 <LI><a href="#[16]">WWDG_IRQHandler</a> from 1986be9x_it.o(.text) referenced from startup_1986be9x.o(RESET)
 <LI><a href="#[24]">__main</a> from __main.o(!!!main) referenced from startup_1986be9x.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[24]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[25]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[27]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[7f]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[80]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[81]"></a>__decompress</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[82]"></a>__decompress2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[83]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2b]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[84]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[85]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[86]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[87]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[88]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[89]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[8a]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[8b]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[8c]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[8d]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[8e]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[8f]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[90]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[91]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[92]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[93]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[94]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[95]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[96]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[97]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[98]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[30]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[99]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[9a]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[9b]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[9c]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[9d]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[9e]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[9f]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[26]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[a0]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[28]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2a]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[a1]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[2c]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; FlashTest &rArr; MltPinCfg &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[7e]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2f]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[a3]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[31]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[38]"></a>Delay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkLED1
</UL>

<P><STRONG><a name="[33]"></a>LEDOn</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEDOn
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkLED1
</UL>

<P><STRONG><a name="[35]"></a>LEDOff</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEDOff
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkLED1
</UL>

<P><STRONG><a name="[37]"></a>BlinkLED1</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BlinkLED1 &rArr; LEDOff
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDOff
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDOn
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedTest
</UL>

<P><STRONG><a name="[39]"></a>ExtBusCtrlPinCfg</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ExtBusCtrlPinCfg &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b]"></a>ExtBusPinCfg</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ExtBusPinCfg &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTest
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamTest
</UL>

<P><STRONG><a name="[3c]"></a>EthPinCfg</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EthPinCfg &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthTest
</UL>

<P><STRONG><a name="[3d]"></a>MltPinCfg</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MltPinCfg &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthTest
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTest
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamTest
</UL>

<P><STRONG><a name="[3e]"></a>Uart2PinCfg</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Uart2PinCfg &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTest
</UL>

<P><STRONG><a name="[3f]"></a>Can1PinCfg</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Can1PinCfg &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2Test
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1Test
</UL>

<P><STRONG><a name="[40]"></a>LedPinGfg</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LedPinGfg &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>ButtonPinGfg</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ButtonPinGfg &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42]"></a>Uart2Setup</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Uart2Setup &rArr; UART_Init &rArr; RST_CLK_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_BRGInit
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLconfig
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTest
</UL>

<P><STRONG><a name="[48]"></a>Can1Setup</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Can1Setup &rArr; RST_CLK_HSEstatus &rArr; RST_CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSEstatus
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSEconfig
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPUclkSelection
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPUclkPrescaler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLuse
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLstatus
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLconfig
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2Test
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1Test
</UL>

<P><STRONG><a name="[50]"></a>Tim1Setup</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Tim1Setup
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>UartTest</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UartTest &rArr; Uart2Setup &rArr; UART_Init &rArr; RST_CLK_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveData
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSIstatus
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSIcmd
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPUclkSelection
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ReadInputDataBit
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2Setup
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2PinCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>Can1Test</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Can1Test &rArr; Can1PinCfg &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSIstatus
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSIcmd
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPUclkSelection
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ReadInputDataBit
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1Setup
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1PinCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>Can2Test</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Can2Test &rArr; Can1PinCfg &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSIstatus
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSIcmd
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPUclkSelection
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ReadInputDataBit
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1Setup
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1PinCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>RamTest</STRONG> (Thumb, 946 bytes, Stack size 80 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RamTest &rArr; MltPinCfg &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ReadInputDataBit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_DeInit
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MltPinCfg
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtBusPinCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>FlashTest</STRONG> (Thumb, 1014 bytes, Stack size 80 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FlashTest &rArr; MltPinCfg &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFLASH
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFLASH
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ReadInputDataBit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_DeInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseFullFLASH
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MltPinCfg
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtBusPinCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>EthTest</STRONG> (Thumb, 446 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EthTest &rArr; MltPinCfg &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ReadInputDataBit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_DeInit
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MltPinCfg
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthPinCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>LedTest</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LedTest &rArr; BlinkLED1 &rArr; LEDOff
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ReadInputDataBit
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkLED1
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d]"></a>main</STRONG> (Thumb, 698 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = main &rArr; FlashTest &rArr; MltPinCfg &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatus
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_LSEconfig
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSEstatus
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSEconfig
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ReadInputDataBit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClearChip
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispOn
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedTest
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthTest
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTest
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamTest
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2Test
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1Test
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTest
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim1Setup
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonPinGfg
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedPinGfg
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MltPinCfg
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtBusCtrlPinCfg
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlinkLED1
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[67]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, system_1986be9x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[22]"></a>SystemInit</STRONG> (Thumb, 86 bytes, Stack size 4 bytes, system_1986be9x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986be9x.o(.text)
</UL>
<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_1986be9x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_1986be9x.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_1986be9x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a4]"></a>UART_DeInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, 1986be9x_uart.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>UART_Init</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, 1986be9x_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART_Init &rArr; RST_CLK_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2Setup
</UL>

<P><STRONG><a name="[a5]"></a>UART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, 1986be9x_uart.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>UART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, 1986be9x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2Setup
</UL>

<P><STRONG><a name="[a6]"></a>UART_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, 1986be9x_uart.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>UART_GetITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, 1986be9x_uart.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>UART_GetITStatusMasked</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, 1986be9x_uart.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>UART_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, 1986be9x_uart.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>UART_DMAConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, 1986be9x_uart.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>UART_DMACmd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, 1986be9x_uart.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>UART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, 1986be9x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTest
</UL>

<P><STRONG><a name="[54]"></a>UART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, 1986be9x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTest
</UL>

<P><STRONG><a name="[ac]"></a>UART_BreakLine</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, 1986be9x_uart.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>UART_IrDAConfig</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, 1986be9x_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetClocksFreq
</UL>

<P><STRONG><a name="[ad]"></a>UART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, 1986be9x_uart.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>UART_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, 1986be9x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTest
</UL>

<P><STRONG><a name="[45]"></a>UART_BRGInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, 1986be9x_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2Setup
</UL>

<P><STRONG><a name="[5b]"></a>PORT_DeInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, 1986be9x_port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthTest
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTest
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamTest
</UL>

<P><STRONG><a name="[3a]"></a>PORT_Init</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, 1986be9x_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonPinGfg
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedPinGfg
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1PinCfg
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2PinCfg
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MltPinCfg
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthPinCfg
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtBusPinCfg
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtBusCtrlPinCfg
</UL>

<P><STRONG><a name="[ae]"></a>PORT_StructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, 1986be9x_port.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>PORT_ReadInputDataBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, 1986be9x_port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedTest
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthTest
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTest
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamTest
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2Test
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1Test
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTest
</UL>

<P><STRONG><a name="[af]"></a>PORT_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, 1986be9x_port.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>PORT_SetBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, 1986be9x_port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAdress
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPage
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispOff
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatus
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispOn
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTest
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthPinCfg
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDOn
</UL>

<P><STRONG><a name="[36]"></a>PORT_ResetBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, 1986be9x_port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAdress
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPage
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispOff
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatus
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispOn
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthPinCfg
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDOff
</UL>

<P><STRONG><a name="[b0]"></a>PORT_WriteBit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, 1986be9x_port.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>PORT_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, 1986be9x_port.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>RST_CLK_PCLKcmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, 1986be9x_rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_DeInit
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim1Setup
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1Setup
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2Setup
</UL>

<P><STRONG><a name="[4f]"></a>RST_CLK_CPUclkSelection</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, 1986be9x_rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_WarmDeInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2Test
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1Test
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTest
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1Setup
</UL>

<P><STRONG><a name="[6a]"></a>RST_CLK_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, 1986be9x_rst_clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RST_CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_USB_PLLstatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_LSIstatus
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_LSEstatus
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSIstatus
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSEstatus
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPU_PLLstatus
</UL>

<P><STRONG><a name="[57]"></a>RST_CLK_HSIstatus</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, 1986be9x_rst_clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RST_CLK_HSIstatus &rArr; RST_CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_WarmDeInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2Test
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1Test
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTest
</UL>

<P><STRONG><a name="[56]"></a>RST_CLK_HSIcmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, 1986be9x_rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_WarmDeInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can2Test
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1Test
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTest
</UL>

<P><STRONG><a name="[6b]"></a>RST_CLK_WarmDeInit</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, 1986be9x_rst_clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSIstatus
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_HSIcmd
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_CPUclkSelection
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_DeInit
</UL>

<P><STRONG><a name="[6c]"></a>RST_CLK_DeInit</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, 1986be9x_rst_clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_WarmDeInit
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_PCLKcmd
</UL>

<P><STRONG><a name="[49]"></a>RST_CLK_HSEconfig</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, 1986be9x_rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1Setup
</UL>

<P><STRONG><a name="[4a]"></a>RST_CLK_HSEstatus</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, 1986be9x_rst_clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RST_CLK_HSEstatus &rArr; RST_CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1Setup
</UL>

<P><STRONG><a name="[62]"></a>RST_CLK_LSEconfig</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, 1986be9x_rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>RST_CLK_LSEstatus</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, 1986be9x_rst_clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>

<P><STRONG><a name="[b2]"></a>RST_CLK_HSIadjust</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, 1986be9x_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>RST_CLK_LSIcmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, 1986be9x_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>RST_CLK_LSIstatus</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, 1986be9x_rst_clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>

<P><STRONG><a name="[43]"></a>RST_CLK_CPU_PLLconfig</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, 1986be9x_rst_clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RST_CLK_CPU_PLLconfig
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1Setup
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2Setup
</UL>

<P><STRONG><a name="[4d]"></a>RST_CLK_CPU_PLLuse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, 1986be9x_rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1Setup
</UL>

<P><STRONG><a name="[4c]"></a>RST_CLK_CPU_PLLcmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, 1986be9x_rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1Setup
</UL>

<P><STRONG><a name="[4e]"></a>RST_CLK_CPU_PLLstatus</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, 1986be9x_rst_clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RST_CLK_CPU_PLLstatus &rArr; RST_CLK_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1Setup
</UL>

<P><STRONG><a name="[4b]"></a>RST_CLK_CPUclkPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, 1986be9x_rst_clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can1Setup
</UL>

<P><STRONG><a name="[b4]"></a>RST_CLK_USB_PLLconfig</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, 1986be9x_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>RST_CLK_USB_PLLuse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, 1986be9x_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>RST_CLK_USB_PLLcmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, 1986be9x_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>RST_CLK_USB_PLLstatus</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, 1986be9x_rst_clk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CLK_GetFlagStatus
</UL>

<P><STRONG><a name="[b7]"></a>RST_CLK_USBclkPrescaler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, 1986be9x_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>RST_CLK_USBclkEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, 1986be9x_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>RST_CLK_ADCclkSelection</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, 1986be9x_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>RST_CLK_ADCclkPrescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, 1986be9x_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>RST_CLK_ADCclkEnable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, 1986be9x_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>RST_CLK_HSIclkPrescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, 1986be9x_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>RST_CLK_RTC_HSIclkEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, 1986be9x_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>RST_CLK_HSEclkPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, 1986be9x_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>RST_CLK_RTC_HSEclkEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, 1986be9x_rst_clk.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>RST_CLK_GetClocksFreq</STRONG> (Thumb, 530 bytes, Stack size 40 bytes, 1986be9x_rst_clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RST_CLK_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IrDAConfig
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 1986be9x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_1986be9x.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, 1986be9x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_1986be9x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, 1986be9x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_1986be9x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, 1986be9x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_1986be9x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, 1986be9x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_1986be9x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 1986be9x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_1986be9x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 1986be9x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_1986be9x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 1986be9x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_1986be9x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 1986be9x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_1986be9x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>CAN1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 1986be9x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_1986be9x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>CAN2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 1986be9x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_1986be9x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>USB_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 1986be9x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_1986be9x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 1986be9x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_1986be9x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 1986be9x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_1986be9x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 1986be9x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_1986be9x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SSP1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 1986be9x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_1986be9x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>I2C_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 1986be9x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_1986be9x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>POWER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 1986be9x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_1986be9x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>WWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 1986be9x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_1986be9x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>Timer1_IRQHandler</STRONG> (Thumb, 1382 bytes, Stack size 16 bytes, 1986be9x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Timer1_IRQHandler &rArr; LcdScrollString &rArr; LcdPutString &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdScrollString
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPutString
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPutImage
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPutChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_1986be9x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>Timer2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 1986be9x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_1986be9x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>Timer3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 1986be9x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_1986be9x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ADC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 1986be9x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_1986be9x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>COMPARATOR_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 1986be9x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_1986be9x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SSP2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 1986be9x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_1986be9x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>BACKUP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 1986be9x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_1986be9x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXT_INT1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 1986be9x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_1986be9x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXT_INT2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 1986be9x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_1986be9x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXT_INT3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 1986be9x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_1986be9x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXT_INT4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, 1986be9x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_1986be9x.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>SetDataBits</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mlt_lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAdress
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPage
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispOff
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispOn
</UL>

<P><STRONG><a name="[74]"></a>MltDelay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mlt_lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadData
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAdress
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPage
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispOff
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatus
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispOn
</UL>

<P><STRONG><a name="[64]"></a>ReadStatus</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, mlt_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MltDelay
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClearPage
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPutString
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPutImage
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPutChar
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdInit
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>DispOn</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, mlt_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispOn
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MltDelay
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDataBits
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>DispOff</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, mlt_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MltDelay
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDataBits
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>

<P><STRONG><a name="[77]"></a>SetPage</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, mlt_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetPage
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MltDelay
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDataBits
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClearPage
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPutString
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPutImage
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPutChar
</UL>

<P><STRONG><a name="[78]"></a>SetAdress</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, mlt_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetAdress
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MltDelay
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDataBits
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClearPage
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPutString
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPutImage
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPutChar
</UL>

<P><STRONG><a name="[79]"></a>WriteData</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, mlt_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MltDelay
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDataBits
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClearPage
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPutString
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPutImage
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPutChar
</UL>

<P><STRONG><a name="[7a]"></a>ReadData</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, mlt_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MltDelay
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDataBits
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>

<P><STRONG><a name="[63]"></a>LcdInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mlt_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdInit &rArr; ReadStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MltDelay
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatus
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SetBits
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>LcdClearPage</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, mlt_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LcdClearPage &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAdress
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPage
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClearChip
</UL>

<P><STRONG><a name="[66]"></a>LcdClearChip</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, mlt_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LcdClearChip &rArr; LcdClearPage &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClearPage
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>LcdPutChar</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, mlt_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LcdPutChar &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAdress
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPage
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_IRQHandler
</UL>

<P><STRONG><a name="[73]"></a>LcdPutString</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, mlt_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LcdPutString &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAdress
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPage
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdScrollString
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_IRQHandler
</UL>

<P><STRONG><a name="[72]"></a>LcdScrollString</STRONG> (Thumb, 130 bytes, Stack size 96 bytes, mlt_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LcdScrollString &rArr; LcdPutString &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdPutString
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_IRQHandler
</UL>

<P><STRONG><a name="[70]"></a>LcdPutImage</STRONG> (Thumb, 144 bytes, Stack size 64 bytes, mlt_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LcdPutImage &rArr; WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAdress
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPage
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_IRQHandler
</UL>

<P><STRONG><a name="[5e]"></a>WriteFLASH</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, milflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WriteFLASH
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTest
</UL>

<P><STRONG><a name="[5f]"></a>ReadFLASH</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, milflash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTest
</UL>

<P><STRONG><a name="[5d]"></a>EraseFullFLASH</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, milflash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTest
</UL>

<P><STRONG><a name="[c0]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[2e]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c3]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c4]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[c5]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)
<P>
<H3>
Local Symbols
</H3><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
