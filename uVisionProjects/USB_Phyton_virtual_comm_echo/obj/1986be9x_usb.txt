; generated by ARM C/C++ Compiler, 4.1 [Build 561]
; commandline ArmCC [--debug -c --asm --interleave -o.\obj\1986be9x_usb.o --depend=.\obj\1986be9x_usb.d --cpu=Cortex-M1 --apcs=interwork -O0 -I.\inc -IC:\Keil4\ARM\INC -IC:\Keil4\ARM\INC\ARM --omf_browse=.\obj\1986be9x_usb.crf src\1986be9x_usb.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  USB_BRGInit PROC
;;;71     
;;;72     void USB_BRGInit(const USB_Clock_TypeDef* USB_Clock_InitStruct)
000000  4601              MOV      r1,r0
;;;73     {
;;;74       uint32_t tmpreg;
;;;75     
;;;76       /* Check the parameters */
;;;77       assert_param(IS_USB_CLOCK(USB_Clock_InitStruct->USB_PLLUSBMUL, USB_Clock_InitStruct->USB_USBC1_Source));
;;;78     
;;;79       /* USB_CLOCK Configuration */
;;;80       tmpreg  = RST_CLK->USB_CLOCK;
000002  4ac0              LDR      r2,|L1.772|
000004  6910              LDR      r0,[r2,#0x10]
;;;81       tmpreg |= RST_CLK_USB_CLOCK_USB_CLK_EN;
000006  1592              ASRS     r2,r2,#22
000008  4310              ORRS     r0,r0,r2
;;;82       tmpreg |= USB_Clock_InitStruct->USB_USBC1_Source;
00000a  680a              LDR      r2,[r1,#0]
00000c  4310              ORRS     r0,r0,r2
;;;83       tmpreg |= USB_PLL;
00000e  2204              MOVS     r2,#4
000010  4310              ORRS     r0,r0,r2
;;;84     
;;;85       RST_CLK->USB_CLOCK = tmpreg;
000012  4abc              LDR      r2,|L1.772|
000014  6110              STR      r0,[r2,#0x10]
;;;86     
;;;87       /* PLL_CONTROL Configuration */
;;;88       tmpreg  = RST_CLK->PLL_CONTROL;
000016  6850              LDR      r0,[r2,#4]
;;;89       tmpreg |= RST_CLK_PLL_CONTROL_PLL_USB_ON;
000018  2201              MOVS     r2,#1
00001a  4310              ORRS     r0,r0,r2
;;;90       tmpreg |= (USB_Clock_InitStruct->USB_PLLUSBMUL << RST_CLK_PLL_CONTROL_PLL_USB_MUL_OFFS);
00001c  684a              LDR      r2,[r1,#4]
00001e  0112              LSLS     r2,r2,#4
000020  4310              ORRS     r0,r0,r2
;;;91     
;;;92       RST_CLK->PLL_CONTROL = tmpreg;
000022  4ab8              LDR      r2,|L1.772|
000024  6050              STR      r0,[r2,#4]
;;;93       while ((RST_CLK->CLOCK_STATUS & RST_CLK_CLOCK_STATUS_PLL_USB_RDY) != SET);
000026  bf00              NOP      
                  |L1.40|
000028  4ab6              LDR      r2,|L1.772|
00002a  6812              LDR      r2,[r2,#0]
00002c  07d2              LSLS     r2,r2,#31
00002e  0fd2              LSRS     r2,r2,#31
000030  2a01              CMP      r2,#1
000032  d1f9              BNE      |L1.40|
;;;94     }
000034  4770              BX       lr
;;;95     
                          ENDP

                  USB_SetHSCR PROC
;;;131    
;;;132    void USB_SetHSCR(uint32_t RegValue)
000036  bf00              NOP      
;;;133    {
;;;134      /* Check the parameters */
;;;135      assert_param(IS_USB_HSCR_VALUE(RegValue));
;;;136    
;;;137      USB_SFR_SET(USB->HSCR, RegValue);
000038  4ab3              LDR      r2,|L1.776|
00003a  6811              LDR      r1,[r2,#0]
00003c  b282              UXTH     r2,r0
00003e  4311              ORRS     r1,r1,r2
000040  0c03              LSRS     r3,r0,#16
000042  460a              MOV      r2,r1
000044  439a              BICS     r2,r2,r3
000046  4611              MOV      r1,r2
000048  4aaf              LDR      r2,|L1.776|
00004a  6011              STR      r1,[r2,#0]
00004c  bf00              NOP      
;;;138    }
00004e  4770              BX       lr
;;;139    
                          ENDP

                  USB_Reset PROC
;;;101    
;;;102    void USB_Reset(void)
000050  b510              PUSH     {r4,lr}
;;;103    {
;;;104      uint32_t count;
;;;105    
;;;106      USB_SetHSCR(USB_HSCR_RESET_CORE_Reset);  /* Set RESET_CORE bit */
000052  2002              MOVS     r0,#2
000054  f7fffffe          BL       USB_SetHSCR
;;;107      for (count = 0; count < 1000; count++);  /* Hold Reset */
000058  2400              MOVS     r4,#0
00005a  e000              B        |L1.94|
                  |L1.92|
00005c  1c64              ADDS     r4,r4,#1
                  |L1.94|
00005e  207d              MOVS     r0,#0x7d
000060  00c0              LSLS     r0,r0,#3
000062  4284              CMP      r4,r0
000064  d3fa              BCC      |L1.92|
;;;108      USB_SetHSCR(USB_HSCR_RESET_CORE_Work);
000066  2001              MOVS     r0,#1
000068  0440              LSLS     r0,r0,#17
00006a  f7fffffe          BL       USB_SetHSCR
;;;109    }
00006e  bd10              POP      {r4,pc}
;;;110    
                          ENDP

                  USB_GetHSCR PROC
;;;118    
;;;119    uint32_t USB_GetHSCR(void)
000070  48a5              LDR      r0,|L1.776|
;;;120    {
;;;121      return USB->HSCR;
000072  6800              LDR      r0,[r0,#0]
;;;122    }
000074  4770              BX       lr
;;;123    
                          ENDP

                  USB_GetHSVR PROC
;;;148    
;;;149    USB_Version_TypeDef USB_GetHSVR(void)
000076  b508              PUSH     {r3,lr}
;;;150    {
;;;151      uint32_t tmpreg;
;;;152      USB_Version_TypeDef s;
;;;153    
;;;154      tmpreg = USB->HSVR;
000078  48a3              LDR      r0,|L1.776|
00007a  6841              LDR      r1,[r0,#4]
;;;155    
;;;156      s.USB_Version  = tmpreg & USB_HSVR_VERSION_MASK;
00007c  0708              LSLS     r0,r1,#28
00007e  0f00              LSRS     r0,r0,#28
000080  466a              MOV      r2,sp
000082  7010              STRB     r0,[r2,#0]
;;;157      s.USB_Revision = (tmpreg & USB_HSVR_REVISION_MASK) >> USB_HSVR_REVISION_OFFS;
000084  20f0              MOVS     r0,#0xf0
000086  4008              ANDS     r0,r0,r1
000088  0900              LSRS     r0,r0,#4
00008a  7050              STRB     r0,[r2,#1]
;;;158    
;;;159      return s;
00008c  9800              LDR      r0,[sp,#0]
;;;160    }
00008e  bd08              POP      {r3,pc}
;;;161    
                          ENDP

                  USB_GetHTXC PROC
;;;169    
;;;170    uint32_t USB_GetHTXC(void)
000090  489e              LDR      r0,|L1.780|
;;;171    {
;;;172      return USB->HTXC;
000092  6800              LDR      r0,[r0,#0]
;;;173    }
000094  4770              BX       lr
;;;174    
                          ENDP

                  USB_SetHTXC PROC
;;;182    
;;;183    void     USB_SetHTXC(uint32_t RegValue)
000096  bf00              NOP      
;;;184    {
;;;185      /* Check the parameters */
;;;186      assert_param(IS_USB_HTXC_VALUE(RegValue));
;;;187    
;;;188      USB_SFR_SET(USB->HTXC, RegValue);
000098  4a9c              LDR      r2,|L1.780|
00009a  6811              LDR      r1,[r2,#0]
00009c  b282              UXTH     r2,r0
00009e  4311              ORRS     r1,r1,r2
0000a0  0c03              LSRS     r3,r0,#16
0000a2  460a              MOV      r2,r1
0000a4  439a              BICS     r2,r2,r3
0000a6  4611              MOV      r1,r2
0000a8  4a98              LDR      r2,|L1.780|
0000aa  6011              STR      r1,[r2,#0]
0000ac  bf00              NOP      
;;;189    }
0000ae  4770              BX       lr
;;;190    
                          ENDP

                  USB_GetHTXT PROC
;;;198    
;;;199    uint32_t USB_GetHTXT(void)
0000b0  4896              LDR      r0,|L1.780|
;;;200    {
;;;201      return USB->HTXT;
0000b2  6840              LDR      r0,[r0,#4]
;;;202    }
0000b4  4770              BX       lr
;;;203    
                          ENDP

                  USB_SetHTXT PROC
;;;211    
;;;212    void     USB_SetHTXT(uint32_t RegValue)
0000b6  4995              LDR      r1,|L1.780|
;;;213    {
;;;214      /* Check the parameters */
;;;215      assert_param(IS_USB_HTXT_VALUE(RegValue));
;;;216    
;;;217      USB->HTXT = RegValue;
0000b8  6048              STR      r0,[r1,#4]
;;;218    }
0000ba  4770              BX       lr
;;;219    
                          ENDP

                  USB_GetHTXLC PROC
;;;227    
;;;228    uint32_t USB_GetHTXLC(void)
0000bc  4893              LDR      r0,|L1.780|
;;;229    {
;;;230      return USB->HTXLC;
0000be  6880              LDR      r0,[r0,#8]
;;;231    }
0000c0  4770              BX       lr
;;;232    
                          ENDP

                  USB_SetHTXLC PROC
;;;240    
;;;241    void     USB_SetHTXLC(uint32_t RegValue)
0000c2  bf00              NOP      
;;;242    {
;;;243      /* Check the parameters */
;;;244      assert_param(IS_USB_HTXLC_VALUE(RegValue));
;;;245    
;;;246      USB_SFR_SET(USB->HTXLC, RegValue);
0000c4  4a91              LDR      r2,|L1.780|
0000c6  6891              LDR      r1,[r2,#8]
0000c8  b282              UXTH     r2,r0
0000ca  4311              ORRS     r1,r1,r2
0000cc  0c03              LSRS     r3,r0,#16
0000ce  460a              MOV      r2,r1
0000d0  439a              BICS     r2,r2,r3
0000d2  4611              MOV      r1,r2
0000d4  4a8d              LDR      r2,|L1.780|
0000d6  6091              STR      r1,[r2,#8]
0000d8  bf00              NOP      
;;;247    }
0000da  4770              BX       lr
;;;248    
                          ENDP

                  USB_GetHTXSE PROC
;;;256    
;;;257    uint32_t USB_GetHTXSE(void)
0000dc  488b              LDR      r0,|L1.780|
;;;258    {
;;;259      return USB->HTXSE;
0000de  68c0              LDR      r0,[r0,#0xc]
;;;260    }
0000e0  4770              BX       lr
;;;261    
                          ENDP

                  USB_SetHTXSE PROC
;;;269    
;;;270    void     USB_SetHTXSE(uint32_t RegValue)
0000e2  bf00              NOP      
;;;271    {
;;;272      /* Check the parameters */
;;;273      assert_param(IS_USB_HTXSE_VALUE(RegValue));
;;;274    
;;;275      USB_SFR_SET(USB->HTXSE, RegValue);
0000e4  4a89              LDR      r2,|L1.780|
0000e6  68d1              LDR      r1,[r2,#0xc]
0000e8  b282              UXTH     r2,r0
0000ea  4311              ORRS     r1,r1,r2
0000ec  0c03              LSRS     r3,r0,#16
0000ee  460a              MOV      r2,r1
0000f0  439a              BICS     r2,r2,r3
0000f2  4611              MOV      r1,r2
0000f4  4a85              LDR      r2,|L1.780|
0000f6  60d1              STR      r1,[r2,#0xc]
0000f8  bf00              NOP      
;;;276    }
0000fa  4770              BX       lr
;;;277    
                          ENDP

                  USB_GetHTXA PROC
;;;285    
;;;286    uint32_t USB_GetHTXA(void)
0000fc  4883              LDR      r0,|L1.780|
;;;287    {
;;;288      return USB->HTXA;
0000fe  6900              LDR      r0,[r0,#0x10]
;;;289    }
000100  4770              BX       lr
;;;290    
                          ENDP

                  USB_SetHTXA PROC
;;;298    
;;;299    void     USB_SetHTXA(uint32_t RegValue)
000102  4982              LDR      r1,|L1.780|
;;;300    {
;;;301      /* Check the parameters */
;;;302      assert_param(IS_USB_HTXA_VALUE(RegValue));
;;;303    
;;;304      USB->HTXA = RegValue;
000104  6108              STR      r0,[r1,#0x10]
;;;305    }
000106  4770              BX       lr
;;;306    
                          ENDP

                  USB_GetHTXE PROC
;;;314    
;;;315    uint32_t USB_GetHTXE(void)
000108  4880              LDR      r0,|L1.780|
;;;316    {
;;;317      return USB->HTXE;
00010a  6940              LDR      r0,[r0,#0x14]
;;;318    }
00010c  4770              BX       lr
;;;319    
                          ENDP

                  USB_SetHTXE PROC
;;;327    
;;;328    void     USB_SetHTXE(uint32_t RegValue)
00010e  497f              LDR      r1,|L1.780|
;;;329    {
;;;330      /* Check the parameters */
;;;331      assert_param(IS_USB_HTXE_VALUE(RegValue));
;;;332    
;;;333      USB->HTXE = RegValue;
000110  6148              STR      r0,[r1,#0x14]
;;;334    }
000112  4770              BX       lr
;;;335    
                          ENDP

                  USB_GetHFN PROC
;;;343    
;;;344    uint32_t USB_GetHFN(void)
000114  487d              LDR      r0,|L1.780|
;;;345    {
;;;346      return USB->HFN_H;
000116  69c0              LDR      r0,[r0,#0x1c]
;;;347    }
000118  4770              BX       lr
;;;348    
                          ENDP

                  USB_GetHIS PROC
;;;356    
;;;357    uint32_t USB_GetHIS(void)
00011a  487c              LDR      r0,|L1.780|
;;;358    {
;;;359      return USB->HIS;
00011c  6a00              LDR      r0,[r0,#0x20]
;;;360    }
00011e  4770              BX       lr
;;;361    
                          ENDP

                  USB_SetHIS PROC
;;;369    
;;;370    void     USB_SetHIS(uint32_t RegValue)
000120  bf00              NOP      
;;;371    {
;;;372      /* Check the parameters */
;;;373      assert_param(IS_USB_HIS_VALUE(RegValue));
;;;374    
;;;375      USB_SFR_SET(USB->HIS, RegValue);
000122  4a7a              LDR      r2,|L1.780|
000124  6a11              LDR      r1,[r2,#0x20]
000126  b282              UXTH     r2,r0
000128  4311              ORRS     r1,r1,r2
00012a  0c03              LSRS     r3,r0,#16
00012c  460a              MOV      r2,r1
00012e  439a              BICS     r2,r2,r3
000130  4611              MOV      r1,r2
000132  4a76              LDR      r2,|L1.780|
000134  6211              STR      r1,[r2,#0x20]
000136  bf00              NOP      
;;;376    }
000138  4770              BX       lr
;;;377    
                          ENDP

                  USB_GetHIM PROC
;;;385    
;;;386    uint32_t USB_GetHIM(void)
00013a  4874              LDR      r0,|L1.780|
;;;387    {
;;;388      return USB->HIM;
00013c  6a40              LDR      r0,[r0,#0x24]
;;;389    }
00013e  4770              BX       lr
;;;390    
                          ENDP

                  USB_SetHIM PROC
;;;398    
;;;399    void     USB_SetHIM(uint32_t RegValue)
000140  bf00              NOP      
;;;400    {
;;;401      /* Check the parameters */
;;;402      assert_param(IS_USB_HIM_VALUE(RegValue));
;;;403    
;;;404      USB_SFR_SET(USB->HIM, RegValue);
000142  4a72              LDR      r2,|L1.780|
000144  6a51              LDR      r1,[r2,#0x24]
000146  b282              UXTH     r2,r0
000148  4311              ORRS     r1,r1,r2
00014a  0c03              LSRS     r3,r0,#16
00014c  460a              MOV      r2,r1
00014e  439a              BICS     r2,r2,r3
000150  4611              MOV      r1,r2
000152  4a6e              LDR      r2,|L1.780|
000154  6251              STR      r1,[r2,#0x24]
000156  bf00              NOP      
;;;405    }
000158  4770              BX       lr
;;;406    
                          ENDP

                  USB_GetHRXS PROC
;;;414    
;;;415    uint32_t USB_GetHRXS(void)
00015a  486c              LDR      r0,|L1.780|
;;;416    {
;;;417      return USB->HRXS;
00015c  6a80              LDR      r0,[r0,#0x28]
;;;418    }
00015e  4770              BX       lr
;;;419    
                          ENDP

                  USB_GetHRXP PROC
;;;427    
;;;428    uint32_t USB_GetHRXP(void)
000160  486a              LDR      r0,|L1.780|
;;;429    {
;;;430      return USB->HRXP;
000162  6ac0              LDR      r0,[r0,#0x2c]
;;;431    }
000164  4770              BX       lr
;;;432    
                          ENDP

                  USB_GetHRXA PROC
;;;440    
;;;441    uint32_t USB_GetHRXA(void)
000166  4869              LDR      r0,|L1.780|
;;;442    {
;;;443      return USB->HRXA;
000168  6b00              LDR      r0,[r0,#0x30]
;;;444    }
00016a  4770              BX       lr
;;;445    
                          ENDP

                  USB_GetHRXE PROC
;;;453    
;;;454    uint32_t USB_GetHRXE(void)
00016c  4867              LDR      r0,|L1.780|
;;;455    {
;;;456      return USB->HRXE;
00016e  6b40              LDR      r0,[r0,#0x34]
;;;457    }
000170  4770              BX       lr
;;;458    
                          ENDP

                  USB_GetHRXCS PROC
;;;466    
;;;467    uint32_t USB_GetHRXCS(void)
000172  4866              LDR      r0,|L1.780|
;;;468    {
;;;469      return USB->HRXCS;
000174  6b80              LDR      r0,[r0,#0x38]
;;;470    }
000176  4770              BX       lr
;;;471    
                          ENDP

                  USB_GetHSTM PROC
;;;479    
;;;480    uint32_t USB_GetHSTM(void)
000178  4864              LDR      r0,|L1.780|
;;;481    {
;;;482      return USB->HSTM;
00017a  6bc0              LDR      r0,[r0,#0x3c]
;;;483    }
00017c  4770              BX       lr
;;;484    
                          ENDP

                  USB_GetHRXFD PROC
;;;492    
;;;493    uint32_t USB_GetHRXFD(void)
00017e  4863              LDR      r0,|L1.780|
;;;494    {
;;;495      return USB->HRXFD;
000180  3080              ADDS     r0,r0,#0x80
000182  6800              LDR      r0,[r0,#0]
;;;496    }
000184  4770              BX       lr
;;;497    
                          ENDP

                  USB_GetHRXFDC PROC
;;;505    
;;;506    uint32_t USB_GetHRXFDC(void)
000186  4861              LDR      r0,|L1.780|
;;;507    {
;;;508      return USB->HRXFDC_H;
000188  3080              ADDS     r0,r0,#0x80
00018a  68c0              LDR      r0,[r0,#0xc]
;;;509    }
00018c  4770              BX       lr
;;;510    
                          ENDP

                  USB_GetHRXFC PROC
;;;518    
;;;519    uint32_t USB_GetHRXFC(void)
00018e  485f              LDR      r0,|L1.780|
;;;520    {
;;;521      return USB->HRXFC;
000190  3080              ADDS     r0,r0,#0x80
000192  6900              LDR      r0,[r0,#0x10]
;;;522    }
000194  4770              BX       lr
;;;523    
                          ENDP

                  USB_SetHRXFC PROC
;;;531    
;;;532    void     USB_SetHRXFC(uint32_t RegValue)
000196  495d              LDR      r1,|L1.780|
;;;533    {
;;;534      /* Check the parameters */
;;;535      assert_param(IS_USB_HRXFC_VALUE(RegValue));
;;;536    
;;;537      USB->HRXFC = RegValue;
000198  3180              ADDS     r1,r1,#0x80
00019a  6108              STR      r0,[r1,#0x10]
;;;538    }
00019c  4770              BX       lr
;;;539    
                          ENDP

                  USB_GetHTXFD PROC
;;;547    
;;;548    uint32_t USB_GetHTXFD(void)
00019e  485b              LDR      r0,|L1.780|
;;;549    {
;;;550      return USB->HTXFD;
0001a0  30c0              ADDS     r0,r0,#0xc0
0001a2  6800              LDR      r0,[r0,#0]
;;;551    }
0001a4  4770              BX       lr
;;;552    
                          ENDP

                  USB_SetHTXFD PROC
;;;560    
;;;561    void     USB_SetHTXFD(uint32_t RegValue)
0001a6  4959              LDR      r1,|L1.780|
;;;562    {
;;;563      /* Check the parameters */
;;;564      assert_param(IS_USB_HTXFD_VALUE(RegValue));
;;;565    
;;;566      USB->HTXFD = RegValue;
0001a8  31c0              ADDS     r1,r1,#0xc0
0001aa  6008              STR      r0,[r1,#0]
;;;567    }
0001ac  4770              BX       lr
;;;568    
                          ENDP

                  USB_GetHTXFC PROC
;;;576    
;;;577    uint32_t USB_GetHTXFC(void)
0001ae  4857              LDR      r0,|L1.780|
;;;578    {
;;;579      return USB->HTXFDC;
0001b0  30c0              ADDS     r0,r0,#0xc0
0001b2  6900              LDR      r0,[r0,#0x10]
;;;580    }
0001b4  4770              BX       lr
;;;581    
                          ENDP

                  USB_SetHTXFC PROC
;;;589    
;;;590    void     USB_SetHTXFC(uint32_t RegValue)
0001b6  4955              LDR      r1,|L1.780|
;;;591    {
;;;592      /* Check the parameters */
;;;593      assert_param(IS_USB_HTXFC_VALUE(RegValue));
;;;594    
;;;595      USB->HTXFDC = RegValue;
0001b8  31c0              ADDS     r1,r1,#0xc0
0001ba  6108              STR      r0,[r1,#0x10]
;;;596    }
0001bc  4770              BX       lr
;;;597    
                          ENDP

                  USB_GetSEPxCTRL PROC
;;;607    
;;;608    uint32_t USB_GetSEPxCTRL(USB_EP_TypeDef EndPointNumber)
0001be  4601              MOV      r1,r0
;;;609    {
;;;610      /* Check the parameters */
;;;611      assert_param(IS_USB_ENDPOINT(EndPointNumber));
;;;612    
;;;613      return USB->USB_SEP[EndPointNumber].CTRL;
0001c0  4853              LDR      r0,|L1.784|
0001c2  010a              LSLS     r2,r1,#4
0001c4  5880              LDR      r0,[r0,r2]
;;;614    }
0001c6  4770              BX       lr
;;;615    
                          ENDP

                  USB_SetSEPxCTRL PROC
;;;627    
;;;628    void     USB_SetSEPxCTRL(USB_EP_TypeDef EndPointNumber, uint32_t RegValue)
0001c8  b510              PUSH     {r4,lr}
;;;629    {
;;;630      /* Check the parameters */
;;;631      assert_param(IS_USB_ENDPOINT(EndPointNumber));
;;;632      assert_param(IS_USB_SEPx_CTRL_VALUE(RegValue));
;;;633    
;;;634      USB_SFR_SET(USB->USB_SEP[EndPointNumber].CTRL, RegValue);
0001ca  bf00              NOP      
0001cc  0103              LSLS     r3,r0,#4
0001ce  4c50              LDR      r4,|L1.784|
0001d0  191b              ADDS     r3,r3,r4
0001d2  681a              LDR      r2,[r3,#0]
0001d4  b28b              UXTH     r3,r1
0001d6  431a              ORRS     r2,r2,r3
0001d8  0c0c              LSRS     r4,r1,#16
0001da  4613              MOV      r3,r2
0001dc  43a3              BICS     r3,r3,r4
0001de  461a              MOV      r2,r3
0001e0  4b4b              LDR      r3,|L1.784|
0001e2  0104              LSLS     r4,r0,#4
0001e4  511a              STR      r2,[r3,r4]
0001e6  bf00              NOP      
;;;635    }
0001e8  bd10              POP      {r4,pc}
;;;636    
                          ENDP

                  USB_GetSEPxSTS PROC
;;;646    
;;;647    uint32_t USB_GetSEPxSTS(USB_EP_TypeDef EndPointNumber)
0001ea  4601              MOV      r1,r0
;;;648    {
;;;649      /* Check the parameters */
;;;650      assert_param(IS_USB_ENDPOINT(EndPointNumber));
;;;651    
;;;652      return USB->USB_SEP[EndPointNumber].STS;
0001ec  4848              LDR      r0,|L1.784|
0001ee  010a              LSLS     r2,r1,#4
0001f0  1880              ADDS     r0,r0,r2
0001f2  6840              LDR      r0,[r0,#4]
;;;653    }
0001f4  4770              BX       lr
;;;654    
                          ENDP

                  USB_GetSEPxTS PROC
;;;664    
;;;665    uint32_t USB_GetSEPxTS(USB_EP_TypeDef EndPointNumber)
0001f6  4601              MOV      r1,r0
;;;666    {
;;;667      /* Check the parameters */
;;;668      assert_param(IS_USB_ENDPOINT(EndPointNumber));
;;;669    
;;;670      return USB->USB_SEP[EndPointNumber].TS;
0001f8  4845              LDR      r0,|L1.784|
0001fa  010a              LSLS     r2,r1,#4
0001fc  1880              ADDS     r0,r0,r2
0001fe  6880              LDR      r0,[r0,#8]
;;;671    }
000200  4770              BX       lr
;;;672    
                          ENDP

                  USB_GetSEPxNTS PROC
;;;682    
;;;683    uint32_t USB_GetSEPxNTS(USB_EP_TypeDef EndPointNumber)
000202  4601              MOV      r1,r0
;;;684    {
;;;685      /* Check the parameters */
;;;686      assert_param(IS_USB_ENDPOINT(EndPointNumber));
;;;687    
;;;688      return USB->USB_SEP[EndPointNumber].NTS;
000204  4842              LDR      r0,|L1.784|
000206  010a              LSLS     r2,r1,#4
000208  1880              ADDS     r0,r0,r2
00020a  68c0              LDR      r0,[r0,#0xc]
;;;689    }
00020c  4770              BX       lr
;;;690    
                          ENDP

                  USB_GetSC PROC
;;;698    
;;;699    uint32_t USB_GetSC(void)
00020e  4840              LDR      r0,|L1.784|
;;;700    {
;;;701      return USB->SC;
000210  3040              ADDS     r0,r0,#0x40
000212  6800              LDR      r0,[r0,#0]
;;;702    }
000214  4770              BX       lr
;;;703    
                          ENDP

                  USB_SetSC PROC
;;;711    
;;;712    void     USB_SetSC(uint32_t RegValue)
000216  bf00              NOP      
;;;713    {
;;;714      /* Check the parameters */
;;;715      assert_param(IS_USB_SC_VALUE(RegValue));
;;;716    
;;;717      USB_SFR_SET(USB->SC, RegValue);
000218  4a3d              LDR      r2,|L1.784|
00021a  3240              ADDS     r2,r2,#0x40
00021c  6811              LDR      r1,[r2,#0]
00021e  b282              UXTH     r2,r0
000220  4311              ORRS     r1,r1,r2
000222  0c03              LSRS     r3,r0,#16
000224  460a              MOV      r2,r1
000226  439a              BICS     r2,r2,r3
000228  4611              MOV      r1,r2
00022a  4a39              LDR      r2,|L1.784|
00022c  3240              ADDS     r2,r2,#0x40
00022e  6011              STR      r1,[r2,#0]
000230  bf00              NOP      
;;;718    }
000232  4770              BX       lr
;;;719    
                          ENDP

                  USB_GetSLS PROC
;;;727    
;;;728    uint32_t USB_GetSLS(void)
000234  4836              LDR      r0,|L1.784|
;;;729    {
;;;730      return USB->SLS;
000236  3040              ADDS     r0,r0,#0x40
000238  6840              LDR      r0,[r0,#4]
;;;731    }
00023a  4770              BX       lr
;;;732    
                          ENDP

                  USB_GetSIS PROC
;;;740    
;;;741    uint32_t USB_GetSIS(void)
00023c  4834              LDR      r0,|L1.784|
;;;742    {
;;;743      return USB->SIS;
00023e  3040              ADDS     r0,r0,#0x40
000240  6880              LDR      r0,[r0,#8]
;;;744    }
000242  4770              BX       lr
;;;745    
                          ENDP

                  USB_SetSIS PROC
;;;753    
;;;754    void     USB_SetSIS(uint32_t RegValue)
000244  4932              LDR      r1,|L1.784|
;;;755    {
;;;756      /* Check the parameters */
;;;757      assert_param(IS_USB_SIS_VALUE(RegValue));
;;;758    
;;;759      /* USB_SIS bits may be only cleared by writing 1 */
;;;760      USB->SIS = RegValue;
000246  3140              ADDS     r1,r1,#0x40
000248  6088              STR      r0,[r1,#8]
;;;761    }
00024a  4770              BX       lr
;;;762    
                          ENDP

                  USB_GetSIM PROC
;;;770    
;;;771    uint32_t USB_GetSIM(void)
00024c  4830              LDR      r0,|L1.784|
;;;772    {
;;;773      return USB->SIM;
00024e  3040              ADDS     r0,r0,#0x40
000250  68c0              LDR      r0,[r0,#0xc]
;;;774    }
000252  4770              BX       lr
;;;775    
                          ENDP

                  USB_SetSIM PROC
;;;783    
;;;784    void     USB_SetSIM(uint32_t RegValue)
000254  bf00              NOP      
;;;785    {
;;;786      /* Check the parameters */
;;;787      assert_param(IS_USB_SIM_VALUE(RegValue));
;;;788    
;;;789      USB_SFR_SET(USB->SIM, RegValue);
000256  4a2e              LDR      r2,|L1.784|
000258  3240              ADDS     r2,r2,#0x40
00025a  68d1              LDR      r1,[r2,#0xc]
00025c  b282              UXTH     r2,r0
00025e  4311              ORRS     r1,r1,r2
000260  0c03              LSRS     r3,r0,#16
000262  460a              MOV      r2,r1
000264  439a              BICS     r2,r2,r3
000266  4611              MOV      r1,r2
000268  4a29              LDR      r2,|L1.784|
00026a  3240              ADDS     r2,r2,#0x40
00026c  60d1              STR      r1,[r2,#0xc]
00026e  bf00              NOP      
;;;790    }
000270  4770              BX       lr
;;;791    
                          ENDP

                  USB_GetSA PROC
;;;799    
;;;800    uint32_t USB_GetSA(void)
000272  4827              LDR      r0,|L1.784|
;;;801    {
;;;802      return USB->SA;
000274  3040              ADDS     r0,r0,#0x40
000276  6900              LDR      r0,[r0,#0x10]
;;;803    }
000278  4770              BX       lr
;;;804    
                          ENDP

                  USB_SetSA PROC
;;;812    
;;;813    void     USB_SetSA(uint32_t RegValue)
00027a  4925              LDR      r1,|L1.784|
;;;814    {
;;;815      /* Check the parameters */
;;;816      assert_param(IS_USB_SA_VALUE(RegValue));
;;;817    
;;;818      USB->SA = RegValue;
00027c  3140              ADDS     r1,r1,#0x40
00027e  6108              STR      r0,[r1,#0x10]
;;;819    }
000280  4770              BX       lr
;;;820    
                          ENDP

                  USB_GetSFN PROC
;;;828    
;;;829    uint32_t USB_GetSFN(void)
000282  4823              LDR      r0,|L1.784|
;;;830    {
;;;831      return USB->SFN_H;
000284  3040              ADDS     r0,r0,#0x40
000286  6980              LDR      r0,[r0,#0x18]
;;;832    }
000288  4770              BX       lr
;;;833    
                          ENDP

                  USB_GetSEPxRXFD PROC
;;;843    
;;;844    uint32_t USB_GetSEPxRXFD(USB_EP_TypeDef EndPointNumber)
00028a  4601              MOV      r1,r0
;;;845    {
;;;846      /* Check the parameters */
;;;847      assert_param(IS_USB_ENDPOINT(EndPointNumber));
;;;848    
;;;849      return USB->USB_SEP_FIFO[EndPointNumber].RXFD;
00028c  4820              LDR      r0,|L1.784|
00028e  3080              ADDS     r0,r0,#0x80
000290  01ca              LSLS     r2,r1,#7
000292  5880              LDR      r0,[r0,r2]
;;;850    }
000294  4770              BX       lr
;;;851    
                          ENDP

                  USB_GetSEPxRXFDC PROC
;;;861    
;;;862    uint32_t USB_GetSEPxRXFDC(USB_EP_TypeDef EndPointNumber)
000296  4601              MOV      r1,r0
;;;863    {
;;;864      /* Check the parameters */
;;;865      assert_param(IS_USB_ENDPOINT(EndPointNumber));
;;;866    
;;;867      return USB->USB_SEP_FIFO[EndPointNumber].RXFDC_H;
000298  481d              LDR      r0,|L1.784|
00029a  3080              ADDS     r0,r0,#0x80
00029c  01ca              LSLS     r2,r1,#7
00029e  1880              ADDS     r0,r0,r2
0002a0  68c0              LDR      r0,[r0,#0xc]
;;;868    }
0002a2  4770              BX       lr
;;;869    
                          ENDP

                  USB_GetSEPxRXFC PROC
;;;879    
;;;880    uint32_t USB_GetSEPxRXFC(USB_EP_TypeDef EndPointNumber)
0002a4  4601              MOV      r1,r0
;;;881    {
;;;882      /* Check the parameters */
;;;883      assert_param(IS_USB_ENDPOINT(EndPointNumber));
;;;884    
;;;885      return USB->USB_SEP_FIFO[EndPointNumber].RXFC;
0002a6  481a              LDR      r0,|L1.784|
0002a8  3080              ADDS     r0,r0,#0x80
0002aa  01ca              LSLS     r2,r1,#7
0002ac  1880              ADDS     r0,r0,r2
0002ae  6900              LDR      r0,[r0,#0x10]
;;;886    }
0002b0  4770              BX       lr
;;;887    
                          ENDP

                  USB_SetSEPxRXFC PROC
;;;899    
;;;900    void     USB_SetSEPxRXFC(USB_EP_TypeDef EndPointNumber, uint32_t RegValue)
0002b2  4a17              LDR      r2,|L1.784|
;;;901    {
;;;902      /* Check the parameters */
;;;903      assert_param(IS_USB_ENDPOINT(EndPointNumber));
;;;904      assert_param(IS_USB_SEPx_RXFC_VALUE(RegValue));
;;;905    
;;;906      USB->USB_SEP_FIFO[EndPointNumber].RXFC = RegValue;
0002b4  3280              ADDS     r2,r2,#0x80
0002b6  01c3              LSLS     r3,r0,#7
0002b8  18d2              ADDS     r2,r2,r3
0002ba  6111              STR      r1,[r2,#0x10]
;;;907    }
0002bc  4770              BX       lr
;;;908    
                          ENDP

                  USB_GetSEPxTXFD PROC
;;;918    
;;;919    uint32_t USB_GetSEPxTXFD(USB_EP_TypeDef EndPointNumber)
0002be  4601              MOV      r1,r0
;;;920    {
;;;921      /* Check the parameters */
;;;922      assert_param(IS_USB_ENDPOINT(EndPointNumber));
;;;923    
;;;924      return USB->USB_SEP_FIFO[EndPointNumber].TXFD;
0002c0  4813              LDR      r0,|L1.784|
0002c2  3080              ADDS     r0,r0,#0x80
0002c4  01ca              LSLS     r2,r1,#7
0002c6  1880              ADDS     r0,r0,r2
0002c8  6c00              LDR      r0,[r0,#0x40]
;;;925    }
0002ca  4770              BX       lr
;;;926    
                          ENDP

                  USB_SetSEPxTXFD PROC
;;;938    
;;;939    void     USB_SetSEPxTXFD(USB_EP_TypeDef EndPointNumber, uint32_t RegValue)
0002cc  4a10              LDR      r2,|L1.784|
;;;940    {
;;;941      /* Check the parameters */
;;;942      assert_param(IS_USB_ENDPOINT(EndPointNumber));
;;;943      assert_param(IS_USB_SEPx_TXFD_VALUE(RegValue));
;;;944    
;;;945      USB->USB_SEP_FIFO[EndPointNumber].TXFD = RegValue;
0002ce  3280              ADDS     r2,r2,#0x80
0002d0  01c3              LSLS     r3,r0,#7
0002d2  18d2              ADDS     r2,r2,r3
0002d4  6411              STR      r1,[r2,#0x40]
;;;946    }
0002d6  4770              BX       lr
;;;947    
                          ENDP

                  USB_GetSEPxTXFDC PROC
;;;957    
;;;958    uint32_t USB_GetSEPxTXFDC(USB_EP_TypeDef EndPointNumber)
0002d8  4601              MOV      r1,r0
;;;959    {
;;;960      /* Check the parameters */
;;;961      assert_param(IS_USB_ENDPOINT(EndPointNumber));
;;;962    
;;;963      return USB->USB_SEP_FIFO[EndPointNumber].TXFDC;
0002da  480d              LDR      r0,|L1.784|
0002dc  3080              ADDS     r0,r0,#0x80
0002de  01ca              LSLS     r2,r1,#7
0002e0  1880              ADDS     r0,r0,r2
0002e2  6d00              LDR      r0,[r0,#0x50]
;;;964    }
0002e4  4770              BX       lr
;;;965    
                          ENDP

                  USB_SetSEPxTXFDC PROC
;;;977    
;;;978    void     USB_SetSEPxTXFDC(USB_EP_TypeDef EndPointNumber, uint32_t RegValue)
0002e6  4a0a              LDR      r2,|L1.784|
;;;979    {
;;;980      /* Check the parameters */
;;;981      assert_param(IS_USB_ENDPOINT(EndPointNumber));
;;;982      assert_param(IS_USB_SEPx_TXFDC_VALUE(RegValue));
;;;983    
;;;984      USB->USB_SEP_FIFO[EndPointNumber].TXFDC = RegValue;
0002e8  3280              ADDS     r2,r2,#0x80
0002ea  01c3              LSLS     r3,r0,#7
0002ec  18d2              ADDS     r2,r2,r3
0002ee  6511              STR      r1,[r2,#0x50]
;;;985    }
0002f0  4770              BX       lr
;;;986    
                          ENDP

                  USB_SEPxToggleEPDATASEQ PROC
;;;996    
;;;997    void     USB_SEPxToggleEPDATASEQ(USB_EP_TypeDef EndPointNumber)
0002f2  4a07              LDR      r2,|L1.784|
;;;998    {
;;;999      uint32_t tmpreg;
;;;1000   
;;;1001     /* Check the parameters */
;;;1002     assert_param(IS_USB_ENDPOINT(EndPointNumber));
;;;1003   
;;;1004     tmpreg = USB->USB_SEP[EndPointNumber].CTRL;
0002f4  0103              LSLS     r3,r0,#4
0002f6  58d1              LDR      r1,[r2,r3]
;;;1005     tmpreg = tmpreg ^ USB_SEPx_CTRL_EPDATASEQ_Data1;
0002f8  2204              MOVS     r2,#4
0002fa  4051              EORS     r1,r1,r2
;;;1006     USB->USB_SEP[EndPointNumber].CTRL = tmpreg;
0002fc  4a04              LDR      r2,|L1.784|
0002fe  0103              LSLS     r3,r0,#4
000300  50d1              STR      r1,[r2,r3]
;;;1007   }
000302  4770              BX       lr
;;;1008   
                          ENDP

                  |L1.772|
                          DCD      0x40020000
                  |L1.776|
                          DCD      0x40010380
                  |L1.780|
                          DCD      0x40010000
                  |L1.784|
                          DCD      0x40010100
