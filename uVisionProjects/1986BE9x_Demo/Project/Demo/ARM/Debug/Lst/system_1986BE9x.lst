L 1 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\startup\arm\system_1986BE9x.c"
N/**
N  ******************************************************************************
N  * @file    system_1986BE9x.c
N  * @author  Phyton Application Team
N  * @version V1.0.0
N  * @date    11/06/2010
N  * @brief   CMSIS Cortex-M3 Device Peripheral Access Layer System Source File.
N  ******************************************************************************
N  * <br><br>
N  *
N  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
N  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
N  * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT
N  * OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
N  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
N  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
N  *
N  * <h2><center>&copy; COPYRIGHT 2010 Phyton</center></h2>
N  ******************************************************************************
N  * FILE system_1986BE9x.c
N  */
N
N
N/** @addtogroup __CMSIS CMSIS
N  * @{
N  */
N
N/** @addtogroup __1986BE9X 1986BE9X
N  * @{
N  */
N
N/** @addtogroup System_Private_Includes System Private Includes
N  * @{
N  */
N
N#include "1986BE9x.h"
L 1 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x.h" 1
N/**
N  ******************************************************************************
N  * @file    1986BE9x.h
N  * @author  Phyton Application Team
N  * @version V1.0.0
N  * @date    09/03/2011
N  * @brief   This file contains all the Special Function Registers definitions
N  *          for the Milandr 1986BE9X microcontroller.
N  ******************************************************************************
N  * <br><br>
N  *
N  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
N  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
N  * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT
N  * OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
N  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
N  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
N  *
N  * <h2><center>&copy; COPYRIGHT 2010 Phyton</center></h2>
N  ******************************************************************************
N  * FILE 1986BE9x.h
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __1986BE9X_H
N#define __1986BE9X_H
N
N/** @addtogroup __CMSIS CMSIS
N  * @{
N  */
N
N/** @defgroup __1986BE9X 1986BE9X
N  * @{
N  */
N
N/** @defgroup __Exported_types Exported types
N  * @{
N  */
N
N/**
N  * @brief 1986BE9x Interrupt Number Definition
N  */
N
Ntypedef enum IRQn
N{
N/******  Cortex-M3 Processor Exceptions Numbers ***************************************************/
N  NonMaskableInt_IRQn         = -14,    /*!< 2 Non Maskable Interrupt                             */
N  HardFault_IRQn              = -13,    /*!< 3 Cortex-M3 Hard Fault Interrupt                     */
N  MemoryManagement_IRQn       = -12,    /*!< 4 Cortex-M3 Memory Management Interrupt              */
N  BusFault_IRQn               = -11,    /*!< 5 Cortex-M3 Bus Fault Interrupt                      */
N  UsageFault_IRQn             = -10,    /*!< 6 Cortex-M3 Usage Fault Interrupt                    */
N  SVCall_IRQn                 = -5,     /*!< 11 Cortex-M3 SV Call Interrupt                       */
N  PendSV_IRQn                 = -2,     /*!< 14 Cortex-M3 Pend SV Interrupt                       */
N  SysTick_IRQn                = -1,     /*!< 15 Cortex-M3 System Tick Interrupt                   */
N
N/****** 1986BE9X specific Interrupt Numbers *******************************************************/
N  CAN1_IRQn                   = 0,      /*!< CAN1 Interrupt                                       */
N  CAN2_IRQn                   = 1,      /*!< CAN1 Interrupt                                       */
N  USB_IRQn                    = 2,      /*!< USB Host Interrupt                                   */
N  DMA_IRQn                    = 5,      /*!< DMA Interrupt                                        */
N  UART1_IRQn                  = 6,      /*!< UART1 Interrupt                                      */
N  UART2_IRQn                  = 7,      /*!< UART2 Interrupt                                      */
N  SSP1_IRQn                   = 8,      /*!< SSP1 Interrupt                                       */
N  I2C_IRQn                    = 10,     /*!< I2C Interrupt                                        */
N  POWER_IRQn                  = 11,     /*!< POWER Detecor Interrupt                              */
N  WWDG_IRQn                   = 12,     /*!< Window Watchdog Interrupt                            */
N  Timer1_IRQn                 = 14,     /*!< Timer1 Interrupt                                     */
N  Timer2_IRQn                 = 15,     /*!< Timer2 Interrupt                                     */
N  Timer3_IRQn                 = 16,     /*!< Timer3 Interrupt                                     */
N  ADC_IRQn                    = 17,     /*!< ADC Interrupt                                        */
N  COMPARATOR_IRQn             = 19,     /*!< COMPARATOR Interrupt                                 */
N  SSP2_IRQn                   = 20,     /*!< SSP2 Interrupt                                       */
N  BACKUP_IRQn                 = 27,     /*!< BACKUP Interrupt                                     */
N  EXT_INT1_IRQn               = 28,     /*!< EXT_INT1 Interrupt                                   */
N  EXT_INT2_IRQn               = 29,     /*!< EXT_INT2 Interrupt                                   */
N  EXT_INT3_IRQn               = 30,     /*!< EXT_INT3 Interrupt                                   */
N  EXT_INT4_IRQn               = 31      /*!< EXT_INT4 Interrupt                                   */
N}IRQn_Type;
N
N/* Includes ------------------------------------------------------------------*/
N#include "core_cm3.h"
L 1 "..\..\..\Library\Libraries\CMSIS\CM3\CoreSupport\core_cm3.h" 1
N/**************************************************************************//**
N * @file     core_cm3.h
N * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
N * @version  V1.30
N * @date     30. October 2009
N *
N * @note
N * Copyright (C) 2009 ARM Limited. All rights reserved.
N *
N * @par
N * ARM Limited (ARM) is supplying this software for use with Cortex-M
N * processor based microcontrollers.  This file can be freely distributed
N * within development tools that are supporting such ARM based processors.
N *
N * @par
N * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
N * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
N * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
N * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
N * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
N *
N ******************************************************************************/
N
N#ifndef __CM3_CORE_H__
N#define __CM3_CORE_H__
N
N/** @addtogroup CMSIS_CM3_core_LintCinfiguration CMSIS CM3 Core Lint Configuration
N *
N * List of Lint messages which will be suppressed and not shown:
N *   - Error 10: \n
N *     register uint32_t __regBasePri         __asm("basepri"); \n
N *     Error 10: Expecting ';'
N * .
N *   - Error 530: \n
N *     return(__regBasePri); \n
N *     Warning 530: Symbol '__regBasePri' (line 264) not initialized
N * .
N *   - Error 550: \n
N *     __regBasePri = (basePri & 0x1ff); \n
N *     Warning 550: Symbol '__regBasePri' (line 271) not accessed
N * .
N *   - Error 754: \n
N *     uint32_t RESERVED0[24]; \n
N *     Info 754: local structure member '<some, not used in the HAL>' (line 109, file ./cm3_core.h) not referenced
N * .
N *   - Error 750: \n
N *     #define __CM3_CORE_H__ \n
N *     Info 750: local macro '__CM3_CORE_H__' (line 43, file./cm3_core.h) not referenced
N * .
N *   - Error 528: \n
N *     static __INLINE void NVIC_DisableIRQ(uint32_t IRQn) \n
N *     Warning 528: Symbol 'NVIC_DisableIRQ(unsigned int)' (line 419, file ./cm3_core.h) not referenced
N * .
N *   - Error 751: \n
N *     } InterruptType_Type; \n
N *     Info 751: local typedef 'InterruptType_Type' (line 170, file ./cm3_core.h) not referenced
N * .
N * Note:  To re-enable a Message, insert a space before 'lint' *
N *
N */
N
N/*lint -save */
N/*lint -e10  */
N/*lint -e530 */
N/*lint -e550 */
N/*lint -e754 */
N/*lint -e750 */
N/*lint -e528 */
N/*lint -e751 */
N
N
N/** @addtogroup CMSIS_CM3_core_definitions CM3 Core Definitions
N  This file defines all structures and symbols for CMSIS core:
N    - CMSIS version number
N    - Cortex-M core registers and bitfields
N    - Cortex-M core peripheral base address
N  @{
N */
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N#define __CM3_CMSIS_VERSION_MAIN  (0x01)                                                       /*!< [31:16] CMSIS HAL main version */
N#define __CM3_CMSIS_VERSION_SUB   (0x30)                                                       /*!< [15:0]  CMSIS HAL sub version  */
N#define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!< CMSIS HAL version number       */
N
N#define __CORTEX_M                (0x03)                                                       /*!< Cortex core                    */
N
N#include <stdint.h>                           /* Include standard types */
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060037
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 91 "..\..\..\Library\Libraries\CMSIS\CM3\CoreSupport\core_cm3.h" 2
N
N#if defined (__ICCARM__)
X#if 0L
S  #include <intrinsics.h>                     /* IAR Intrinsics   */
N#endif
N
N
N#ifndef __NVIC_PRIO_BITS
N  #define __NVIC_PRIO_BITS    4               /*!< standard definition for NVIC Priority Bits */
N#endif
N
N
N
N
N/**
N * IO definitions
N *
N * define access restrictions to peripheral registers
N */
N
N#ifdef __cplusplus
S  #define     __I     volatile                /*!< defines 'read only' permissions      */
N#else
N  #define     __I     volatile const          /*!< defines 'read only' permissions      */
N#endif
N#define     __O     volatile                  /*!< defines 'write only' permissions     */
N#define     __IO    volatile                  /*!< defines 'read / write' permissions   */
N
N
N
N/*******************************************************************************
N *                 Register Abstraction
N ******************************************************************************/
N/** @addtogroup CMSIS_CM3_core_register CMSIS CM3 Core Register
N @{
N*/
N
N
N/** @addtogroup CMSIS_CM3_NVIC CMSIS CM3 NVIC
N  memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
N  @{
N */
Ntypedef struct
N{
N  __IO uint32_t ISER[8];                      /*!< Offset: 0x000  Interrupt Set Enable Register           */
X  volatile uint32_t ISER[8];                       
N       uint32_t RESERVED0[24];
N  __IO uint32_t ICER[8];                      /*!< Offset: 0x080  Interrupt Clear Enable Register         */
X  volatile uint32_t ICER[8];                       
N       uint32_t RSERVED1[24];
N  __IO uint32_t ISPR[8];                      /*!< Offset: 0x100  Interrupt Set Pending Register          */
X  volatile uint32_t ISPR[8];                       
N       uint32_t RESERVED2[24];
N  __IO uint32_t ICPR[8];                      /*!< Offset: 0x180  Interrupt Clear Pending Register        */
X  volatile uint32_t ICPR[8];                       
N       uint32_t RESERVED3[24];
N  __IO uint32_t IABR[8];                      /*!< Offset: 0x200  Interrupt Active bit Register           */
X  volatile uint32_t IABR[8];                       
N       uint32_t RESERVED4[56];
N  __IO uint8_t  IP[240];                      /*!< Offset: 0x300  Interrupt Priority Register (8Bit wide) */
X  volatile uint8_t  IP[240];                       
N       uint32_t RESERVED5[644];
N  __O  uint32_t STIR;                         /*!< Offset: 0xE00  Software Trigger Interrupt Register     */
X  volatile  uint32_t STIR;                          
N}  NVIC_Type;
N/*@}*/ /* end of group CMSIS_CM3_NVIC */
N
N
N/** @addtogroup CMSIS_CM3_SCB CMSIS CM3 SCB
N  memory mapped structure for System Control Block (SCB)
N  @{
N */
Ntypedef struct
N{
N  __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register                                  */
X  volatile const  uint32_t CPUID;                         
N  __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register                      */
X  volatile uint32_t ICSR;                          
N  __IO uint32_t VTOR;                         /*!< Offset: 0x08  Vector Table Offset Register                          */
X  volatile uint32_t VTOR;                          
N  __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Control Register        */
X  volatile uint32_t AIRCR;                         
N  __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register                               */
X  volatile uint32_t SCR;                           
N  __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register                        */
X  volatile uint32_t CCR;                           
N  __IO uint8_t  SHP[12];                      /*!< Offset: 0x18  System Handlers Priority Registers (4-7, 8-11, 12-15) */
X  volatile uint8_t  SHP[12];                       
N  __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State Register             */
X  volatile uint32_t SHCSR;                         
N  __IO uint32_t CFSR;                         /*!< Offset: 0x28  Configurable Fault Status Register                    */
X  volatile uint32_t CFSR;                          
N  __IO uint32_t HFSR;                         /*!< Offset: 0x2C  Hard Fault Status Register                            */
X  volatile uint32_t HFSR;                          
N  __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register                           */
X  volatile uint32_t DFSR;                          
N  __IO uint32_t MMFAR;                        /*!< Offset: 0x34  Mem Manage Address Register                           */
X  volatile uint32_t MMFAR;                         
N  __IO uint32_t BFAR;                         /*!< Offset: 0x38  Bus Fault Address Register                            */
X  volatile uint32_t BFAR;                          
N  __IO uint32_t AFSR;                         /*!< Offset: 0x3C  Auxiliary Fault Status Register                       */
X  volatile uint32_t AFSR;                          
N  __I  uint32_t PFR[2];                       /*!< Offset: 0x40  Processor Feature Register                            */
X  volatile const  uint32_t PFR[2];                        
N  __I  uint32_t DFR;                          /*!< Offset: 0x48  Debug Feature Register                                */
X  volatile const  uint32_t DFR;                           
N  __I  uint32_t ADR;                          /*!< Offset: 0x4C  Auxiliary Feature Register                            */
X  volatile const  uint32_t ADR;                           
N  __I  uint32_t MMFR[4];                      /*!< Offset: 0x50  Memory Model Feature Register                         */
X  volatile const  uint32_t MMFR[4];                       
N  __I  uint32_t ISAR[5];                      /*!< Offset: 0x60  ISA Feature Register                                  */
X  volatile const  uint32_t ISAR[5];                       
N} SCB_Type;
N
N/* SCB CPUID Register Definitions */
N#define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB CPUID: IMPLEMENTER Position */
N#define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB CPUID: IMPLEMENTER Mask */
N
N#define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB CPUID: VARIANT Position */
N#define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB CPUID: VARIANT Mask */
N
N#define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB CPUID: PARTNO Position */
N#define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB CPUID: PARTNO Mask */
N
N#define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB CPUID: REVISION Position */
N#define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB CPUID: REVISION Mask */
N
N/* SCB Interrupt Control State Register Definitions */
N#define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB ICSR: NMIPENDSET Position */
N#define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB ICSR: NMIPENDSET Mask */
N
N#define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB ICSR: PENDSVSET Position */
N#define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB ICSR: PENDSVSET Mask */
N
N#define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB ICSR: PENDSVCLR Position */
N#define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB ICSR: PENDSVCLR Mask */
N
N#define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB ICSR: PENDSTSET Position */
N#define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB ICSR: PENDSTSET Mask */
N
N#define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB ICSR: PENDSTCLR Position */
N#define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB ICSR: PENDSTCLR Mask */
N
N#define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB ICSR: ISRPREEMPT Position */
N#define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB ICSR: ISRPREEMPT Mask */
N
N#define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB ICSR: ISRPENDING Position */
N#define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB ICSR: ISRPENDING Mask */
N
N#define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB ICSR: VECTPENDING Position */
N#define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB ICSR: VECTPENDING Mask */
N
N#define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB ICSR: RETTOBASE Position */
N#define SCB_ICSR_RETTOBASE_Msk             (1ul << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB ICSR: RETTOBASE Mask */
N
N#define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB ICSR: VECTACTIVE Position */
N#define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB ICSR: VECTACTIVE Mask */
N
N/* SCB Interrupt Control State Register Definitions */
N#define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB VTOR: TBLBASE Position */
N#define SCB_VTOR_TBLBASE_Msk               (0x1FFul << SCB_VTOR_TBLBASE_Pos)              /*!< SCB VTOR: TBLBASE Mask */
N
N#define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB VTOR: TBLOFF Position */
N#define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFul << SCB_VTOR_TBLOFF_Pos)            /*!< SCB VTOR: TBLOFF Mask */
N
N/* SCB Application Interrupt and Reset Control Register Definitions */
N#define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB AIRCR: VECTKEY Position */
N#define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */
N
N#define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB AIRCR: VECTKEYSTAT Position */
N#define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB AIRCR: VECTKEYSTAT Mask */
N
N#define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB AIRCR: ENDIANESS Position */
N#define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB AIRCR: ENDIANESS Mask */
N
N#define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB AIRCR: PRIGROUP Position */
N#define SCB_AIRCR_PRIGROUP_Msk             (7ul << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB AIRCR: PRIGROUP Mask */
N
N#define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB AIRCR: SYSRESETREQ Position */
N#define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB AIRCR: SYSRESETREQ Mask */
N
N#define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB AIRCR: VECTCLRACTIVE Position */
N#define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB AIRCR: VECTCLRACTIVE Mask */
N
N#define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB AIRCR: VECTRESET Position */
N#define SCB_AIRCR_VECTRESET_Msk            (1ul << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB AIRCR: VECTRESET Mask */
N
N/* SCB System Control Register Definitions */
N#define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB SCR: SEVONPEND Position */
N#define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB SCR: SEVONPEND Mask */
N
N#define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB SCR: SLEEPDEEP Position */
N#define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB SCR: SLEEPDEEP Mask */
N
N#define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB SCR: SLEEPONEXIT Position */
N#define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB SCR: SLEEPONEXIT Mask */
N
N/* SCB Configuration Control Register Definitions */
N#define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB CCR: STKALIGN Position */
N#define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB CCR: STKALIGN Mask */
N
N#define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB CCR: BFHFNMIGN Position */
N#define SCB_CCR_BFHFNMIGN_Msk              (1ul << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB CCR: BFHFNMIGN Mask */
N
N#define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB CCR: DIV_0_TRP Position */
N#define SCB_CCR_DIV_0_TRP_Msk              (1ul << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB CCR: DIV_0_TRP Mask */
N
N#define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB CCR: UNALIGN_TRP Position */
N#define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB CCR: UNALIGN_TRP Mask */
N
N#define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB CCR: USERSETMPEND Position */
N#define SCB_CCR_USERSETMPEND_Msk           (1ul << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB CCR: USERSETMPEND Mask */
N
N#define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB CCR: NONBASETHRDENA Position */
N#define SCB_CCR_NONBASETHRDENA_Msk         (1ul << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB CCR: NONBASETHRDENA Mask */
N
N/* SCB System Handler Control and State Register Definitions */
N#define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB SHCSR: USGFAULTENA Position */
N#define SCB_SHCSR_USGFAULTENA_Msk          (1ul << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB SHCSR: USGFAULTENA Mask */
N
N#define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB SHCSR: BUSFAULTENA Position */
N#define SCB_SHCSR_BUSFAULTENA_Msk          (1ul << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB SHCSR: BUSFAULTENA Mask */
N
N#define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB SHCSR: MEMFAULTENA Position */
N#define SCB_SHCSR_MEMFAULTENA_Msk          (1ul << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB SHCSR: MEMFAULTENA Mask */
N
N#define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB SHCSR: SVCALLPENDED Position */
N#define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB SHCSR: SVCALLPENDED Mask */
N
N#define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB SHCSR: BUSFAULTPENDED Position */
N#define SCB_SHCSR_BUSFAULTPENDED_Msk       (1ul << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB SHCSR: BUSFAULTPENDED Mask */
N
N#define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB SHCSR: MEMFAULTPENDED Position */
N#define SCB_SHCSR_MEMFAULTPENDED_Msk       (1ul << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB SHCSR: MEMFAULTPENDED Mask */
N
N#define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB SHCSR: USGFAULTPENDED Position */
N#define SCB_SHCSR_USGFAULTPENDED_Msk       (1ul << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB SHCSR: USGFAULTPENDED Mask */
N
N#define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB SHCSR: SYSTICKACT Position */
N#define SCB_SHCSR_SYSTICKACT_Msk           (1ul << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB SHCSR: SYSTICKACT Mask */
N
N#define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB SHCSR: PENDSVACT Position */
N#define SCB_SHCSR_PENDSVACT_Msk            (1ul << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB SHCSR: PENDSVACT Mask */
N
N#define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB SHCSR: MONITORACT Position */
N#define SCB_SHCSR_MONITORACT_Msk           (1ul << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB SHCSR: MONITORACT Mask */
N
N#define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB SHCSR: SVCALLACT Position */
N#define SCB_SHCSR_SVCALLACT_Msk            (1ul << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB SHCSR: SVCALLACT Mask */
N
N#define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB SHCSR: USGFAULTACT Position */
N#define SCB_SHCSR_USGFAULTACT_Msk          (1ul << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB SHCSR: USGFAULTACT Mask */
N
N#define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB SHCSR: BUSFAULTACT Position */
N#define SCB_SHCSR_BUSFAULTACT_Msk          (1ul << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB SHCSR: BUSFAULTACT Mask */
N
N#define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB SHCSR: MEMFAULTACT Position */
N#define SCB_SHCSR_MEMFAULTACT_Msk          (1ul << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB SHCSR: MEMFAULTACT Mask */
N
N/* SCB Configurable Fault Status Registers Definitions */
N#define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB CFSR: Usage Fault Status Register Position */
N#define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFul << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB CFSR: Usage Fault Status Register Mask */
N
N#define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB CFSR: Bus Fault Status Register Position */
N#define SCB_CFSR_BUSFAULTSR_Msk            (0xFFul << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB CFSR: Bus Fault Status Register Mask */
N
N#define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB CFSR: Memory Manage Fault Status Register Position */
N#define SCB_CFSR_MEMFAULTSR_Msk            (0xFFul << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB CFSR: Memory Manage Fault Status Register Mask */
N
N/* SCB Hard Fault Status Registers Definitions */
N#define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB HFSR: DEBUGEVT Position */
N#define SCB_HFSR_DEBUGEVT_Msk              (1ul << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB HFSR: DEBUGEVT Mask */
N
N#define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB HFSR: FORCED Position */
N#define SCB_HFSR_FORCED_Msk                (1ul << SCB_HFSR_FORCED_Pos)                   /*!< SCB HFSR: FORCED Mask */
N
N#define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB HFSR: VECTTBL Position */
N#define SCB_HFSR_VECTTBL_Msk               (1ul << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB HFSR: VECTTBL Mask */
N
N/* SCB Debug Fault Status Register Definitions */
N#define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB DFSR: EXTERNAL Position */
N#define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB DFSR: EXTERNAL Mask */
N
N#define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB DFSR: VCATCH Position */
N#define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB DFSR: VCATCH Mask */
N
N#define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB DFSR: DWTTRAP Position */
N#define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB DFSR: DWTTRAP Mask */
N
N#define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB DFSR: BKPT Position */
N#define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB DFSR: BKPT Mask */
N
N#define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB DFSR: HALTED Position */
N#define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB DFSR: HALTED Mask */
N/*@}*/ /* end of group CMSIS_CM3_SCB */
N
N
N/** @addtogroup CMSIS_CM3_SysTick CMSIS CM3 SysTick
N  memory mapped structure for SysTick
N  @{
N */
Ntypedef struct
N{
N  __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Register */
X  volatile uint32_t CTRL;                          
N  __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register       */
X  volatile uint32_t LOAD;                          
N  __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register      */
X  volatile uint32_t VAL;                           
N  __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register        */
X  volatile const  uint32_t CALIB;                         
N} SysTick_Type;
N
N/* SysTick Control / Status Register Definitions */
N#define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysTick CTRL: COUNTFLAG Position */
N#define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysTick CTRL: COUNTFLAG Mask */
N
N#define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysTick CTRL: CLKSOURCE Position */
N#define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysTick CTRL: CLKSOURCE Mask */
N
N#define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysTick CTRL: TICKINT Position */
N#define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysTick CTRL: TICKINT Mask */
N
N#define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysTick CTRL: ENABLE Position */
N#define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysTick CTRL: ENABLE Mask */
N
N/* SysTick Reload Register Definitions */
N#define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysTick LOAD: RELOAD Position */
N#define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysTick LOAD: RELOAD Mask */
N
N/* SysTick Current Register Definitions */
N#define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysTick VAL: CURRENT Position */
N#define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysTick VAL: CURRENT Mask */
N
N/* SysTick Calibration Register Definitions */
N#define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysTick CALIB: NOREF Position */
N#define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysTick CALIB: NOREF Mask */
N
N#define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysTick CALIB: SKEW Position */
N#define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysTick CALIB: SKEW Mask */
N
N#define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysTick CALIB: TENMS Position */
N#define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysTick CALIB: TENMS Mask */
N/*@}*/ /* end of group CMSIS_CM3_SysTick */
N
N
N/** @addtogroup CMSIS_CM3_ITM CMSIS CM3 ITM
N  memory mapped structure for Instrumentation Trace Macrocell (ITM)
N  @{
N */
Ntypedef struct
N{
N  __O  union
X  volatile  union
N  {
N    __O  uint8_t    u8;                       /*!< Offset:       ITM Stimulus Port 8-bit                   */
X    volatile  uint8_t    u8;                        
N    __O  uint16_t   u16;                      /*!< Offset:       ITM Stimulus Port 16-bit                  */
X    volatile  uint16_t   u16;                       
N    __O  uint32_t   u32;                      /*!< Offset:       ITM Stimulus Port 32-bit                  */
X    volatile  uint32_t   u32;                       
N  }  PORT [32];                               /*!< Offset: 0x00  ITM Stimulus Port Registers               */
N       uint32_t RESERVED0[864];
N  __IO uint32_t TER;                          /*!< Offset:       ITM Trace Enable Register                 */
X  volatile uint32_t TER;                           
N       uint32_t RESERVED1[15];
N  __IO uint32_t TPR;                          /*!< Offset:       ITM Trace Privilege Register              */
X  volatile uint32_t TPR;                           
N       uint32_t RESERVED2[15];
N  __IO uint32_t TCR;                          /*!< Offset:       ITM Trace Control Register                */
X  volatile uint32_t TCR;                           
N       uint32_t RESERVED3[29];
N  __IO uint32_t IWR;                          /*!< Offset:       ITM Integration Write Register            */
X  volatile uint32_t IWR;                           
N  __IO uint32_t IRR;                          /*!< Offset:       ITM Integration Read Register             */
X  volatile uint32_t IRR;                           
N  __IO uint32_t IMCR;                         /*!< Offset:       ITM Integration Mode Control Register     */
X  volatile uint32_t IMCR;                          
N       uint32_t RESERVED4[43];
N  __IO uint32_t LAR;                          /*!< Offset:       ITM Lock Access Register                  */
X  volatile uint32_t LAR;                           
N  __IO uint32_t LSR;                          /*!< Offset:       ITM Lock Status Register                  */
X  volatile uint32_t LSR;                           
N       uint32_t RESERVED5[6];
N  __I  uint32_t PID4;                         /*!< Offset:       ITM Peripheral Identification Register #4 */
X  volatile const  uint32_t PID4;                          
N  __I  uint32_t PID5;                         /*!< Offset:       ITM Peripheral Identification Register #5 */
X  volatile const  uint32_t PID5;                          
N  __I  uint32_t PID6;                         /*!< Offset:       ITM Peripheral Identification Register #6 */
X  volatile const  uint32_t PID6;                          
N  __I  uint32_t PID7;                         /*!< Offset:       ITM Peripheral Identification Register #7 */
X  volatile const  uint32_t PID7;                          
N  __I  uint32_t PID0;                         /*!< Offset:       ITM Peripheral Identification Register #0 */
X  volatile const  uint32_t PID0;                          
N  __I  uint32_t PID1;                         /*!< Offset:       ITM Peripheral Identification Register #1 */
X  volatile const  uint32_t PID1;                          
N  __I  uint32_t PID2;                         /*!< Offset:       ITM Peripheral Identification Register #2 */
X  volatile const  uint32_t PID2;                          
N  __I  uint32_t PID3;                         /*!< Offset:       ITM Peripheral Identification Register #3 */
X  volatile const  uint32_t PID3;                          
N  __I  uint32_t CID0;                         /*!< Offset:       ITM Component  Identification Register #0 */
X  volatile const  uint32_t CID0;                          
N  __I  uint32_t CID1;                         /*!< Offset:       ITM Component  Identification Register #1 */
X  volatile const  uint32_t CID1;                          
N  __I  uint32_t CID2;                         /*!< Offset:       ITM Component  Identification Register #2 */
X  volatile const  uint32_t CID2;                          
N  __I  uint32_t CID3;                         /*!< Offset:       ITM Component  Identification Register #3 */
X  volatile const  uint32_t CID3;                          
N} ITM_Type;
N
N/* ITM Trace Privilege Register Definitions */
N#define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM TPR: PRIVMASK Position */
N#define ITM_TPR_PRIVMASK_Msk               (0xFul << ITM_TPR_PRIVMASK_Pos)                /*!< ITM TPR: PRIVMASK Mask */
N
N/* ITM Trace Control Register Definitions */
N#define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM TCR: BUSY Position */
N#define ITM_TCR_BUSY_Msk                   (1ul << ITM_TCR_BUSY_Pos)                      /*!< ITM TCR: BUSY Mask */
N
N#define ITM_TCR_ATBID_Pos                  16                                             /*!< ITM TCR: ATBID Position */
N#define ITM_TCR_ATBID_Msk                  (0x7Ful << ITM_TCR_ATBID_Pos)                  /*!< ITM TCR: ATBID Mask */
N
N#define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM TCR: TSPrescale Position */
N#define ITM_TCR_TSPrescale_Msk             (3ul << ITM_TCR_TSPrescale_Pos)                /*!< ITM TCR: TSPrescale Mask */
N
N#define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM TCR: SWOENA Position */
N#define ITM_TCR_SWOENA_Msk                 (1ul << ITM_TCR_SWOENA_Pos)                    /*!< ITM TCR: SWOENA Mask */
N
N#define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM TCR: DWTENA Position */
N#define ITM_TCR_DWTENA_Msk                 (1ul << ITM_TCR_DWTENA_Pos)                    /*!< ITM TCR: DWTENA Mask */
N
N#define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM TCR: SYNCENA Position */
N#define ITM_TCR_SYNCENA_Msk                (1ul << ITM_TCR_SYNCENA_Pos)                   /*!< ITM TCR: SYNCENA Mask */
N
N#define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM TCR: TSENA Position */
N#define ITM_TCR_TSENA_Msk                  (1ul << ITM_TCR_TSENA_Pos)                     /*!< ITM TCR: TSENA Mask */
N
N#define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM TCR: ITM Enable bit Position */
N#define ITM_TCR_ITMENA_Msk                 (1ul << ITM_TCR_ITMENA_Pos)                    /*!< ITM TCR: ITM Enable bit Mask */
N
N/* ITM Integration Write Register Definitions */
N#define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM IWR: ATVALIDM Position */
N#define ITM_IWR_ATVALIDM_Msk               (1ul << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM IWR: ATVALIDM Mask */
N
N/* ITM Integration Read Register Definitions */
N#define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM IRR: ATREADYM Position */
N#define ITM_IRR_ATREADYM_Msk               (1ul << ITM_IRR_ATREADYM_Pos)                  /*!< ITM IRR: ATREADYM Mask */
N
N/* ITM Integration Mode Control Register Definitions */
N#define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM IMCR: INTEGRATION Position */
N#define ITM_IMCR_INTEGRATION_Msk           (1ul << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM IMCR: INTEGRATION Mask */
N
N/* ITM Lock Status Register Definitions */
N#define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM LSR: ByteAcc Position */
N#define ITM_LSR_ByteAcc_Msk                (1ul << ITM_LSR_ByteAcc_Pos)                   /*!< ITM LSR: ByteAcc Mask */
N
N#define ITM_LSR_Access_Pos                  1                                             /*!< ITM LSR: Access Position */
N#define ITM_LSR_Access_Msk                 (1ul << ITM_LSR_Access_Pos)                    /*!< ITM LSR: Access Mask */
N
N#define ITM_LSR_Present_Pos                 0                                             /*!< ITM LSR: Present Position */
N#define ITM_LSR_Present_Msk                (1ul << ITM_LSR_Present_Pos)                   /*!< ITM LSR: Present Mask */
N/*@}*/ /* end of group CMSIS_CM3_ITM */
N
N
N/** @addtogroup CMSIS_CM3_InterruptType CMSIS CM3 Interrupt Type
N  memory mapped structure for Interrupt Type
N  @{
N */
Ntypedef struct
N{
N       uint32_t RESERVED0;
N  __I  uint32_t ICTR;                         /*!< Offset: 0x04  Interrupt Control Type Register */
X  volatile const  uint32_t ICTR;                          
N#if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
X#if ((0L) && (__CM3_REV >= 0x200))
S  __IO uint32_t ACTLR;                        /*!< Offset: 0x08  Auxiliary Control Register      */
N#else
N       uint32_t RESERVED1;
N#endif
N} InterruptType_Type;
N
N/* Interrupt Controller Type Register Definitions */
N#define InterruptType_ICTR_INTLINESNUM_Pos  0                                             /*!< InterruptType ICTR: INTLINESNUM Position */
N#define InterruptType_ICTR_INTLINESNUM_Msk (0x1Ful << InterruptType_ICTR_INTLINESNUM_Pos) /*!< InterruptType ICTR: INTLINESNUM Mask */
N
N/* Auxiliary Control Register Definitions */
N#define InterruptType_ACTLR_DISFOLD_Pos     2                                             /*!< InterruptType ACTLR: DISFOLD Position */
N#define InterruptType_ACTLR_DISFOLD_Msk    (1ul << InterruptType_ACTLR_DISFOLD_Pos)       /*!< InterruptType ACTLR: DISFOLD Mask */
N
N#define InterruptType_ACTLR_DISDEFWBUF_Pos  1                                             /*!< InterruptType ACTLR: DISDEFWBUF Position */
N#define InterruptType_ACTLR_DISDEFWBUF_Msk (1ul << InterruptType_ACTLR_DISDEFWBUF_Pos)    /*!< InterruptType ACTLR: DISDEFWBUF Mask */
N
N#define InterruptType_ACTLR_DISMCYCINT_Pos  0                                             /*!< InterruptType ACTLR: DISMCYCINT Position */
N#define InterruptType_ACTLR_DISMCYCINT_Msk (1ul << InterruptType_ACTLR_DISMCYCINT_Pos)    /*!< InterruptType ACTLR: DISMCYCINT Mask */
N/*@}*/ /* end of group CMSIS_CM3_InterruptType */
N
N
N#if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
X#if 0L && (__MPU_PRESENT == 1)
S/** @addtogroup CMSIS_CM3_MPU CMSIS CM3 MPU
S  memory mapped structure for Memory Protection Unit (MPU)
S  @{
S */
Stypedef struct
S{
S  __I  uint32_t TYPE;                         /*!< Offset: 0x00  MPU Type Register                              */
S  __IO uint32_t CTRL;                         /*!< Offset: 0x04  MPU Control Register                           */
S  __IO uint32_t RNR;                          /*!< Offset: 0x08  MPU Region RNRber Register                     */
S  __IO uint32_t RBAR;                         /*!< Offset: 0x0C  MPU Region Base Address Register               */
S  __IO uint32_t RASR;                         /*!< Offset: 0x10  MPU Region Attribute and Size Register         */
S  __IO uint32_t RBAR_A1;                      /*!< Offset: 0x14  MPU Alias 1 Region Base Address Register       */
S  __IO uint32_t RASR_A1;                      /*!< Offset: 0x18  MPU Alias 1 Region Attribute and Size Register */
S  __IO uint32_t RBAR_A2;                      /*!< Offset: 0x1C  MPU Alias 2 Region Base Address Register       */
S  __IO uint32_t RASR_A2;                      /*!< Offset: 0x20  MPU Alias 2 Region Attribute and Size Register */
S  __IO uint32_t RBAR_A3;                      /*!< Offset: 0x24  MPU Alias 3 Region Base Address Register       */
S  __IO uint32_t RASR_A3;                      /*!< Offset: 0x28  MPU Alias 3 Region Attribute and Size Register */
S} MPU_Type;
S
S/* MPU Type Register */
S#define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU TYPE: IREGION Position */
S#define MPU_TYPE_IREGION_Msk               (0xFFul << MPU_TYPE_IREGION_Pos)               /*!< MPU TYPE: IREGION Mask */
S
S#define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU TYPE: DREGION Position */
S#define MPU_TYPE_DREGION_Msk               (0xFFul << MPU_TYPE_DREGION_Pos)               /*!< MPU TYPE: DREGION Mask */
S
S#define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU TYPE: SEPARATE Position */
S#define MPU_TYPE_SEPARATE_Msk              (1ul << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU TYPE: SEPARATE Mask */
S
S/* MPU Control Register */
S#define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU CTRL: PRIVDEFENA Position */
S#define MPU_CTRL_PRIVDEFENA_Msk            (1ul << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU CTRL: PRIVDEFENA Mask */
S
S#define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU CTRL: HFNMIENA Position */
S#define MPU_CTRL_HFNMIENA_Msk              (1ul << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU CTRL: HFNMIENA Mask */
S
S#define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU CTRL: ENABLE Position */
S#define MPU_CTRL_ENABLE_Msk                (1ul << MPU_CTRL_ENABLE_Pos)                   /*!< MPU CTRL: ENABLE Mask */
S
S/* MPU Region Number Register */
S#define MPU_RNR_REGION_Pos                  0                                             /*!< MPU RNR: REGION Position */
S#define MPU_RNR_REGION_Msk                 (0xFFul << MPU_RNR_REGION_Pos)                 /*!< MPU RNR: REGION Mask */
S
S/* MPU Region Base Address Register */
S#define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU RBAR: ADDR Position */
S#define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFul << MPU_RBAR_ADDR_Pos)             /*!< MPU RBAR: ADDR Mask */
S
S#define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU RBAR: VALID Position */
S#define MPU_RBAR_VALID_Msk                 (1ul << MPU_RBAR_VALID_Pos)                    /*!< MPU RBAR: VALID Mask */
S
S#define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU RBAR: REGION Position */
S#define MPU_RBAR_REGION_Msk                (0xFul << MPU_RBAR_REGION_Pos)                 /*!< MPU RBAR: REGION Mask */
S
S/* MPU Region Attribute and Size Register */
S#define MPU_RASR_XN_Pos                    28                                             /*!< MPU RASR: XN Position */
S#define MPU_RASR_XN_Msk                    (1ul << MPU_RASR_XN_Pos)                       /*!< MPU RASR: XN Mask */
S
S#define MPU_RASR_AP_Pos                    24                                             /*!< MPU RASR: AP Position */
S#define MPU_RASR_AP_Msk                    (7ul << MPU_RASR_AP_Pos)                       /*!< MPU RASR: AP Mask */
S
S#define MPU_RASR_TEX_Pos                   19                                             /*!< MPU RASR: TEX Position */
S#define MPU_RASR_TEX_Msk                   (7ul << MPU_RASR_TEX_Pos)                      /*!< MPU RASR: TEX Mask */
S
S#define MPU_RASR_S_Pos                     18                                             /*!< MPU RASR: Shareable bit Position */
S#define MPU_RASR_S_Msk                     (1ul << MPU_RASR_S_Pos)                        /*!< MPU RASR: Shareable bit Mask */
S
S#define MPU_RASR_C_Pos                     17                                             /*!< MPU RASR: Cacheable bit Position */
S#define MPU_RASR_C_Msk                     (1ul << MPU_RASR_C_Pos)                        /*!< MPU RASR: Cacheable bit Mask */
S
S#define MPU_RASR_B_Pos                     16                                             /*!< MPU RASR: Bufferable bit Position */
S#define MPU_RASR_B_Msk                     (1ul << MPU_RASR_B_Pos)                        /*!< MPU RASR: Bufferable bit Mask */
S
S#define MPU_RASR_SRD_Pos                    8                                             /*!< MPU RASR: Sub-Region Disable Position */
S#define MPU_RASR_SRD_Msk                   (0xFFul << MPU_RASR_SRD_Pos)                   /*!< MPU RASR: Sub-Region Disable Mask */
S
S#define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU RASR: Region Size Field Position */
S#define MPU_RASR_SIZE_Msk                  (0x1Ful << MPU_RASR_SIZE_Pos)                  /*!< MPU RASR: Region Size Field Mask */
S
S#define MPU_RASR_ENA_Pos                     0                                            /*!< MPU RASR: Region enable bit Position */
S#define MPU_RASR_ENA_Msk                    (0x1Ful << MPU_RASR_ENA_Pos)                  /*!< MPU RASR: Region enable bit Disable Mask */
S
S/*@}*/ /* end of group CMSIS_CM3_MPU */
N#endif
N
N
N/** @addtogroup CMSIS_CM3_CoreDebug CMSIS CM3 Core Debug
N  memory mapped structure for Core Debug Register
N  @{
N */
Ntypedef struct
N{
N  __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status Register    */
X  volatile uint32_t DHCSR;                         
N  __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Register        */
X  volatile  uint32_t DCRSR;                         
N  __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register            */
X  volatile uint32_t DCRDR;                         
N  __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Control Register */
X  volatile uint32_t DEMCR;                         
N} CoreDebug_Type;
N
N/* Debug Halting Control and Status Register */
N#define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< CoreDebug DHCSR: DBGKEY Position */
N#define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< CoreDebug DHCSR: DBGKEY Mask */
N
N#define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< CoreDebug DHCSR: S_RESET_ST Position */
N#define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< CoreDebug DHCSR: S_RESET_ST Mask */
N
N#define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< CoreDebug DHCSR: S_RETIRE_ST Position */
N#define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< CoreDebug DHCSR: S_RETIRE_ST Mask */
N
N#define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< CoreDebug DHCSR: S_LOCKUP Position */
N#define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< CoreDebug DHCSR: S_LOCKUP Mask */
N
N#define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< CoreDebug DHCSR: S_SLEEP Position */
N#define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< CoreDebug DHCSR: S_SLEEP Mask */
N
N#define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< CoreDebug DHCSR: S_HALT Position */
N#define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< CoreDebug DHCSR: S_HALT Mask */
N
N#define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< CoreDebug DHCSR: S_REGRDY Position */
N#define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< CoreDebug DHCSR: S_REGRDY Mask */
N
N#define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< CoreDebug DHCSR: C_SNAPSTALL Position */
N#define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1ul << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< CoreDebug DHCSR: C_SNAPSTALL Mask */
N
N#define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< CoreDebug DHCSR: C_MASKINTS Position */
N#define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< CoreDebug DHCSR: C_MASKINTS Mask */
N
N#define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< CoreDebug DHCSR: C_STEP Position */
N#define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< CoreDebug DHCSR: C_STEP Mask */
N
N#define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< CoreDebug DHCSR: C_HALT Position */
N#define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< CoreDebug DHCSR: C_HALT Mask */
N
N#define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< CoreDebug DHCSR: C_DEBUGEN Position */
N#define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< CoreDebug DHCSR: C_DEBUGEN Mask */
N
N/* Debug Core Register Selector Register */
N#define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< CoreDebug DCRSR: REGWnR Position */
N#define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< CoreDebug DCRSR: REGWnR Mask */
N
N#define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< CoreDebug DCRSR: REGSEL Position */
N#define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< CoreDebug DCRSR: REGSEL Mask */
N
N/* Debug Exception and Monitor Control Register */
N#define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< CoreDebug DEMCR: TRCENA Position */
N#define CoreDebug_DEMCR_TRCENA_Msk         (1ul << CoreDebug_DEMCR_TRCENA_Pos)            /*!< CoreDebug DEMCR: TRCENA Mask */
N
N#define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< CoreDebug DEMCR: MON_REQ Position */
N#define CoreDebug_DEMCR_MON_REQ_Msk        (1ul << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< CoreDebug DEMCR: MON_REQ Mask */
N
N#define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< CoreDebug DEMCR: MON_STEP Position */
N#define CoreDebug_DEMCR_MON_STEP_Msk       (1ul << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< CoreDebug DEMCR: MON_STEP Mask */
N
N#define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< CoreDebug DEMCR: MON_PEND Position */
N#define CoreDebug_DEMCR_MON_PEND_Msk       (1ul << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< CoreDebug DEMCR: MON_PEND Mask */
N
N#define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< CoreDebug DEMCR: MON_EN Position */
N#define CoreDebug_DEMCR_MON_EN_Msk         (1ul << CoreDebug_DEMCR_MON_EN_Pos)            /*!< CoreDebug DEMCR: MON_EN Mask */
N
N#define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< CoreDebug DEMCR: VC_HARDERR Position */
N#define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< CoreDebug DEMCR: VC_HARDERR Mask */
N
N#define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< CoreDebug DEMCR: VC_INTERR Position */
N#define CoreDebug_DEMCR_VC_INTERR_Msk      (1ul << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< CoreDebug DEMCR: VC_INTERR Mask */
N
N#define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< CoreDebug DEMCR: VC_BUSERR Position */
N#define CoreDebug_DEMCR_VC_BUSERR_Msk      (1ul << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< CoreDebug DEMCR: VC_BUSERR Mask */
N
N#define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< CoreDebug DEMCR: VC_STATERR Position */
N#define CoreDebug_DEMCR_VC_STATERR_Msk     (1ul << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< CoreDebug DEMCR: VC_STATERR Mask */
N
N#define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< CoreDebug DEMCR: VC_CHKERR Position */
N#define CoreDebug_DEMCR_VC_CHKERR_Msk      (1ul << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< CoreDebug DEMCR: VC_CHKERR Mask */
N
N#define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< CoreDebug DEMCR: VC_NOCPERR Position */
N#define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1ul << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< CoreDebug DEMCR: VC_NOCPERR Mask */
N
N#define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< CoreDebug DEMCR: VC_MMERR Position */
N#define CoreDebug_DEMCR_VC_MMERR_Msk       (1ul << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< CoreDebug DEMCR: VC_MMERR Mask */
N
N#define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< CoreDebug DEMCR: VC_CORERESET Position */
N#define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< CoreDebug DEMCR: VC_CORERESET Mask */
N/*@}*/ /* end of group CMSIS_CM3_CoreDebug */
N
N
N/* Memory mapping of Cortex-M3 Hardware */
N#define SCS_BASE            (0xE000E000)                              /*!< System Control Space Base Address */
N#define ITM_BASE            (0xE0000000)                              /*!< ITM Base Address                  */
N#define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address           */
N#define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address              */
N#define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address                 */
N#define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Base Address */
N
N#define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register           */
N#define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct          */
N#define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration struct      */
N#define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struct         */
N#define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct          */
N#define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration struct   */
N
N#if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
X#if 0L && (__MPU_PRESENT == 1)
S  #define MPU_BASE          (SCS_BASE +  0x0D90)                      /*!< Memory Protection Unit            */
S  #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit            */
N#endif
N
N/*@}*/ /* end of group CMSIS_CM3_core_register */
N
N
N/*******************************************************************************
N *                Hardware Abstraction Layer
N ******************************************************************************/
N
N#if defined ( __CC_ARM   )
X#if 1L
N  #define __ASM            __asm                                      /*!< asm keyword for ARM Compiler                 */
N  #define __INLINE         __inline                                   /*!< inline keyword for ARM Compiler              */
N
N#elif defined ( __ICCARM__ )
S  #define __ASM           __asm                                       /*!< asm keyword for IAR Compiler                 */
S  #define __INLINE        inline                                      /*!< inline keyword for IAR Compiler. Only avaiable in High optimization mode! */
S
S#elif defined   (  __GNUC__  )
S  #define __ASM            __asm                                      /*!< asm keyword for GNU Compiler                 */
S  #define __INLINE         inline                                     /*!< inline keyword for GNU Compiler              */
S
S#elif defined   (  __TASKING__  )
S  #define __ASM            __asm                                      /*!< asm keyword for TASKING Compiler             */
S  #define __INLINE         inline                                     /*!< inline keyword for TASKING Compiler          */
S
S#elif defined ( __CMCARM__ )
S  #define __ASM            #pragma asm                                /*!< #pragma asm for Phyton CMC-ARM Compiler      */
S  #define __INLINE         __inline                                   /*!< inline keyword for Phyton CMC-ARM Compiler */
S
N#endif
N
N
N/* ###################  Compiler specific Intrinsics  ########################### */
N
N#if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
X#if 1L  
N/* ARM armcc specific functions */
N
N#define __enable_fault_irq                __enable_fiq
N#define __disable_fault_irq               __disable_fiq
N
N#define __NOP                             __nop
N#define __WFI                             __wfi
N#define __WFE                             __wfe
N#define __SEV                             __sev
N#define __ISB()                           __isb(0)
N#define __DSB()                           __dsb(0)
N#define __DMB()                           __dmb(0)
N#define __REV                             __rev
N#define __RBIT                            __rbit
N#define __LDREXB(ptr)                     ((unsigned char ) __ldrex(ptr))
N#define __LDREXH(ptr)                     ((unsigned short) __ldrex(ptr))
N#define __LDREXW(ptr)                     ((unsigned int  ) __ldrex(ptr))
N#define __STREXB(value, ptr)              __strex(value, ptr)
N#define __STREXH(value, ptr)              __strex(value, ptr)
N#define __STREXW(value, ptr)              __strex(value, ptr)
N
N
N/* intrinsic unsigned long long __ldrexd(volatile void *ptr) */
N/* intrinsic int __strexd(unsigned long long val, volatile void *ptr) */
N/* intrinsic void __enable_irq();     */
N/* intrinsic void __disable_irq();    */
N
N
N/**
N * @brief  Return the Process Stack Pointer
N *
N * @return ProcessStackPointer
N *
N * Return the actual process stack pointer
N */
Nextern uint32_t __get_PSP(void);
N
N/**
N * @brief  Set the Process Stack Pointer
N *
N * @param  topOfProcStack  Process Stack Pointer
N *
N * Assign the value ProcessStackPointer to the MSP
N * (process stack pointer) Cortex processor register
N */
Nextern void __set_PSP(uint32_t topOfProcStack);
N
N/**
N * @brief  Return the Main Stack Pointer
N *
N * @return Main Stack Pointer
N *
N * Return the current value of the MSP (main stack pointer)
N * Cortex processor register
N */
Nextern uint32_t __get_MSP(void);
N
N/**
N * @brief  Set the Main Stack Pointer
N *
N * @param  topOfMainStack  Main Stack Pointer
N *
N * Assign the value mainStackPointer to the MSP
N * (main stack pointer) Cortex processor register
N */
Nextern void __set_MSP(uint32_t topOfMainStack);
N
N/**
N * @brief  Reverse byte order in unsigned short value
N *
N * @param   value  value to reverse
N * @return         reversed value
N *
N * Reverse byte order in unsigned short value
N */
Nextern uint32_t __REV16(uint16_t value);
N
N/**
N * @brief  Reverse byte order in signed short value with sign extension to integer
N *
N * @param   value  value to reverse
N * @return         reversed value
N *
N * Reverse byte order in signed short value with sign extension to integer
N */
Nextern int32_t __REVSH(int16_t value);
N
N
N#if (__ARMCC_VERSION < 400000)
X#if (5060750 < 400000)
S
S/**
S * @brief  Remove the exclusive lock created by ldrex
S *
S * Removes the exclusive lock which is created by ldrex.
S */
Sextern void __CLREX(void);
S
S/**
S * @brief  Return the Base Priority value
S *
S * @return BasePriority
S *
S * Return the content of the base priority register
S */
Sextern uint32_t __get_BASEPRI(void);
S
S/**
S * @brief  Set the Base Priority value
S *
S * @param  basePri  BasePriority
S *
S * Set the base priority register
S */
Sextern void __set_BASEPRI(uint32_t basePri);
S
S/**
S * @brief  Return the Priority Mask value
S *
S * @return PriMask
S *
S * Return state of the priority mask bit from the priority mask register
S */
Sextern uint32_t __get_PRIMASK(void);
S
S/**
S * @brief  Set the Priority Mask value
S *
S * @param   priMask  PriMask
S *
S * Set the priority mask bit in the priority mask register
S */
Sextern void __set_PRIMASK(uint32_t priMask);
S
S/**
S * @brief  Return the Fault Mask value
S *
S * @return FaultMask
S *
S * Return the content of the fault mask register
S */
Sextern uint32_t __get_FAULTMASK(void);
S
S/**
S * @brief  Set the Fault Mask value
S *
S * @param  faultMask faultMask value
S *
S * Set the fault mask register
S */
Sextern void __set_FAULTMASK(uint32_t faultMask);
S
S/**
S * @brief  Return the Control Register value
S *
S * @return Control value
S *
S * Return the content of the control register
S */
Sextern uint32_t __get_CONTROL(void);
S
S/**
S * @brief  Set the Control Register value
S *
S * @param  control  Control value
S *
S * Set the control register
S */
Sextern void __set_CONTROL(uint32_t control);
S
N#else  /* (__ARMCC_VERSION >= 400000)  */
N
N/**
N * @brief  Remove the exclusive lock created by ldrex
N *
N * Removes the exclusive lock which is created by ldrex.
N */
N#define __CLREX                           __clrex
N
N/**
N * @brief  Return the Base Priority value
N *
N * @return BasePriority
N *
N * Return the content of the base priority register
N */
Nstatic __INLINE uint32_t  __get_BASEPRI(void)
Xstatic __inline uint32_t  __get_BASEPRI(void)
N{
N  register uint32_t __regBasePri         __ASM("basepri");
X  register uint32_t __regBasePri         __asm("basepri");
N  return(__regBasePri);
N}
N
N/**
N * @brief  Set the Base Priority value
N *
N * @param  basePri  BasePriority
N *
N * Set the base priority register
N */
Nstatic __INLINE void __set_BASEPRI(uint32_t basePri)
Xstatic __inline void __set_BASEPRI(uint32_t basePri)
N{
N  register uint32_t __regBasePri         __ASM("basepri");
X  register uint32_t __regBasePri         __asm("basepri");
N  __regBasePri = (basePri & 0xff);
N}
N
N/**
N * @brief  Return the Priority Mask value
N *
N * @return PriMask
N *
N * Return state of the priority mask bit from the priority mask register
N */
Nstatic __INLINE uint32_t __get_PRIMASK(void)
Xstatic __inline uint32_t __get_PRIMASK(void)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  return(__regPriMask);
N}
N
N/**
N * @brief  Set the Priority Mask value
N *
N * @param  priMask  PriMask
N *
N * Set the priority mask bit in the priority mask register
N */
Nstatic __INLINE void __set_PRIMASK(uint32_t priMask)
Xstatic __inline void __set_PRIMASK(uint32_t priMask)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  __regPriMask = (priMask);
N}
N
N/**
N * @brief  Return the Fault Mask value
N *
N * @return FaultMask
N *
N * Return the content of the fault mask register
N */
Nstatic __INLINE uint32_t __get_FAULTMASK(void)
Xstatic __inline uint32_t __get_FAULTMASK(void)
N{
N  register uint32_t __regFaultMask       __ASM("faultmask");
X  register uint32_t __regFaultMask       __asm("faultmask");
N  return(__regFaultMask);
N}
N
N/**
N * @brief  Set the Fault Mask value
N *
N * @param  faultMask  faultMask value
N *
N * Set the fault mask register
N */
Nstatic __INLINE void __set_FAULTMASK(uint32_t faultMask)
Xstatic __inline void __set_FAULTMASK(uint32_t faultMask)
N{
N  register uint32_t __regFaultMask       __ASM("faultmask");
X  register uint32_t __regFaultMask       __asm("faultmask");
N  __regFaultMask = (faultMask & 1);
N}
N
N/**
N * @brief  Return the Control Register value
N *
N * @return Control value
N *
N * Return the content of the control register
N */
Nstatic __INLINE uint32_t __get_CONTROL(void)
Xstatic __inline uint32_t __get_CONTROL(void)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  return(__regControl);
N}
N
N/**
N * @brief  Set the Control Register value
N *
N * @param  control  Control value
N *
N * Set the control register
N */
Nstatic __INLINE void __set_CONTROL(uint32_t control)
Xstatic __inline void __set_CONTROL(uint32_t control)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  __regControl = control;
N}
N
N#endif /* __ARMCC_VERSION  */
N
N
N
N#elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
S/* IAR iccarm specific functions */
S
S#define __enable_irq                              __enable_interrupt        /*!< global Interrupt enable */
S#define __disable_irq                             __disable_interrupt       /*!< global Interrupt disable */
S
Sstatic __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
Sstatic __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
S
S#define __NOP                                     __no_operation            /*!< no operation intrinsic in IAR Compiler */
Sstatic __INLINE  void __WFI()                     { __ASM ("wfi"); }
Sstatic __INLINE  void __WFE()                     { __ASM ("wfe"); }
Sstatic __INLINE  void __SEV()                     { __ASM ("sev"); }
Sstatic __INLINE  void __CLREX()                   { __ASM ("clrex"); }
S
S/* intrinsic void __ISB(void)                                     */
S/* intrinsic void __DSB(void)                                     */
S/* intrinsic void __DMB(void)                                     */
S/* intrinsic void __set_PRIMASK();                                */
S/* intrinsic void __get_PRIMASK();                                */
S/* intrinsic void __set_FAULTMASK();                              */
S/* intrinsic void __get_FAULTMASK();                              */
S/* intrinsic uint32_t __REV(uint32_t value);                      */
S/* intrinsic uint32_t __REVSH(uint32_t value);                    */
S/* intrinsic unsigned long __STREX(unsigned long, unsigned long); */
S/* intrinsic unsigned long __LDREX(unsigned long *);              */
S
S#if __VER__ < 6020000
S/**
S * @brief  Return the Process Stack Pointer
S *
S * @return ProcessStackPointer
S *
S * Return the actual process stack pointer
S */
Sextern uint32_t __get_PSP(void);
S
S/**
S * @brief  Set the Process Stack Pointer
S *
S * @param  topOfProcStack  Process Stack Pointer
S *
S * Assign the value ProcessStackPointer to the MSP
S * (process stack pointer) Cortex processor register
S */
Sextern void __set_PSP(uint32_t topOfProcStack);
S
S/**
S * @brief  Return the Main Stack Pointer
S *
S * @return Main Stack Pointer
S *
S * Return the current value of the MSP (main stack pointer)
S * Cortex processor register
S */
Sextern uint32_t __get_MSP(void);
S
S/**
S * @brief  Set the Main Stack Pointer
S *
S * @param  topOfMainStack  Main Stack Pointer
S *
S * Assign the value mainStackPointer to the MSP
S * (main stack pointer) Cortex processor register
S */
Sextern void __set_MSP(uint32_t topOfMainStack);
S
S/**
S * @brief  Reverse byte order in unsigned short value
S *
S * @param  value  value to reverse
S * @return        reversed value
S *
S * Reverse byte order in unsigned short value
S */
Sextern uint32_t __REV16(uint16_t value);
S
S/**
S * @brief  Reverse bit order of value
S *
S * @param  value  value to reverse
S * @return        reversed value
S *
S * Reverse bit order of value
S */
Sextern uint32_t __RBIT(uint32_t value);
S#endif
S
S/**
S * @brief  LDR Exclusive (8 bit)
S *
S * @param  *addr  address pointer
S * @return        value of (*address)
S *
S * Exclusive LDR command for 8 bit values)
S */
Sextern uint8_t __LDREXB(uint8_t *addr);
S
S/**
S * @brief  LDR Exclusive (16 bit)
S *
S * @param  *addr  address pointer
S * @return        value of (*address)
S *
S * Exclusive LDR command for 16 bit values
S */
Sextern uint16_t __LDREXH(uint16_t *addr);
S
S/**
S * @brief  LDR Exclusive (32 bit)
S *
S * @param  *addr  address pointer
S * @return        value of (*address)
S *
S * Exclusive LDR command for 32 bit values
S */
Sextern uint32_t __LDREXW(uint32_t *addr);
S
S#if __VER__ < 6020000
S/**
S * @brief  STR Exclusive (8 bit)
S *
S * @param  value  value to store
S * @param  *addr  address pointer
S * @return        successful / failed
S *
S * Exclusive STR command for 8 bit values
S */
Sextern uint32_t __STREXB(uint8_t value, uint8_t *addr);
S
S/**
S * @brief  STR Exclusive (16 bit)
S *
S * @param  value  value to store
S * @param  *addr  address pointer
S * @return        successful / failed
S *
S * Exclusive STR command for 16 bit values
S */
Sextern uint32_t __STREXH(uint16_t value, uint16_t *addr);
S#endif
S
S/**
S * @brief  STR Exclusive (32 bit)
S *
S * @param  value  value to store
S * @param  *addr  address pointer
S * @return        successful / failed
S *
S * Exclusive STR command for 32 bit values
S */
Sextern uint32_t __STREXW(uint32_t value, uint32_t *addr);
S
S
S
S#elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
S/* GNU gcc specific functions */
S
Sstatic __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
Sstatic __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
S
Sstatic __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
Sstatic __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
S
Sstatic __INLINE void __NOP()                      { __ASM volatile ("nop"); }
Sstatic __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
Sstatic __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
Sstatic __INLINE void __SEV()                      { __ASM volatile ("sev"); }
Sstatic __INLINE void __ISB()                      { __ASM volatile ("isb"); }
Sstatic __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
Sstatic __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
Sstatic __INLINE void __CLREX()                    { __ASM volatile ("clrex"); }
S
S
S/**
S * @brief  Return the Process Stack Pointer
S *
S * @return ProcessStackPointer
S *
S * Return the actual process stack pointer
S */
Sextern uint32_t __get_PSP(void);
S
S/**
S * @brief  Set the Process Stack Pointer
S *
S * @param  topOfProcStack  Process Stack Pointer
S *
S * Assign the value ProcessStackPointer to the MSP
S * (process stack pointer) Cortex processor register
S */
Sextern void __set_PSP(uint32_t topOfProcStack);
S
S/**
S * @brief  Return the Main Stack Pointer
S *
S * @return Main Stack Pointer
S *
S * Return the current value of the MSP (main stack pointer)
S * Cortex processor register
S */
Sextern uint32_t __get_MSP(void);
S
S/**
S * @brief  Set the Main Stack Pointer
S *
S * @param  topOfMainStack  Main Stack Pointer
S *
S * Assign the value mainStackPointer to the MSP
S * (main stack pointer) Cortex processor register
S */
Sextern void __set_MSP(uint32_t topOfMainStack);
S
S/**
S * @brief  Return the Base Priority value
S *
S * @return BasePriority
S *
S * Return the content of the base priority register
S */
Sextern uint32_t __get_BASEPRI(void);
S
S/**
S * @brief  Set the Base Priority value
S *
S * @param  basePri  BasePriority
S *
S * Set the base priority register
S */
Sextern void __set_BASEPRI(uint32_t basePri);
S
S/**
S * @brief  Return the Priority Mask value
S *
S * @return PriMask
S *
S * Return state of the priority mask bit from the priority mask register
S */
Sextern uint32_t  __get_PRIMASK(void);
S
S/**
S * @brief  Set the Priority Mask value
S *
S * @param  priMask  PriMask
S *
S * Set the priority mask bit in the priority mask register
S */
Sextern void __set_PRIMASK(uint32_t priMask);
S
S/**
S * @brief  Return the Fault Mask value
S *
S * @return FaultMask
S *
S * Return the content of the fault mask register
S */
Sextern uint32_t __get_FAULTMASK(void);
S
S/**
S * @brief  Set the Fault Mask value
S *
S * @param  faultMask  faultMask value
S *
S * Set the fault mask register
S */
Sextern void __set_FAULTMASK(uint32_t faultMask);
S
S/**
S * @brief  Return the Control Register value
S*
S*  @return Control value
S *
S * Return the content of the control register
S */
Sextern uint32_t __get_CONTROL(void);
S
S/**
S * @brief  Set the Control Register value
S *
S * @param  control  Control value
S *
S * Set the control register
S */
Sextern void __set_CONTROL(uint32_t control);
S
S/**
S * @brief  Reverse byte order in integer value
S *
S * @param  value  value to reverse
S * @return        reversed value
S *
S * Reverse byte order in integer value
S */
Sextern uint32_t __REV(uint32_t value);
S
S/**
S * @brief  Reverse byte order in unsigned short value
S *
S * @param  value  value to reverse
S * @return        reversed value
S *
S * Reverse byte order in unsigned short value
S */
Sextern uint32_t __REV16(uint16_t value);
S
S/**
S * @brief  Reverse byte order in signed short value with sign extension to integer
S *
S * @param  value  value to reverse
S * @return        reversed value
S *
S * Reverse byte order in signed short value with sign extension to integer
S */
Sextern int32_t __REVSH(int16_t value);
S
S/**
S * @brief  Reverse bit order of value
S *
S * @param  value  value to reverse
S * @return        reversed value
S *
S * Reverse bit order of value
S */
Sextern uint32_t __RBIT(uint32_t value);
S
S/**
S * @brief  LDR Exclusive (8 bit)
S *
S * @param  *addr  address pointer
S * @return        value of (*address)
S *
S * Exclusive LDR command for 8 bit value
S */
Sextern uint8_t __LDREXB(uint8_t *addr);
S
S/**
S * @brief  LDR Exclusive (16 bit)
S *
S * @param  *addr  address pointer
S * @return        value of (*address)
S *
S * Exclusive LDR command for 16 bit values
S */
Sextern uint16_t __LDREXH(uint16_t *addr);
S
S/**
S * @brief  LDR Exclusive (32 bit)
S *
S * @param  *addr  address pointer
S * @return        value of (*address)
S *
S * Exclusive LDR command for 32 bit values
S */
Sextern uint32_t __LDREXW(uint32_t *addr);
S
S/**
S * @brief  STR Exclusive (8 bit)
S *
S * @param  value  value to store
S * @param  *addr  address pointer
S * @return        successful / failed
S *
S * Exclusive STR command for 8 bit values
S */
Sextern uint32_t __STREXB(uint8_t value, uint8_t *addr);
S
S/**
S * @brief  STR Exclusive (16 bit)
S *
S * @param  value  value to store
S * @param  *addr  address pointer
S * @return        successful / failed
S *
S * Exclusive STR command for 16 bit values
S */
Sextern uint32_t __STREXH(uint16_t value, uint16_t *addr);
S
S/**
S * @brief  STR Exclusive (32 bit)
S *
S * @param  value  value to store
S * @param  *addr  address pointer
S * @return        successful / failed
S *
S * Exclusive STR command for 32 bit values
S */
Sextern uint32_t __STREXW(uint32_t value, uint32_t *addr);
S
S
S#elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
S/* TASKING carm specific functions */
S
S/*
S * The CMSIS functions have been implemented as intrinsics in the compiler.
S * Please use "carm -?i" to get an up to date list of all instrinsics,
S * Including the CMSIS ones.
S */
S
S
S#elif (defined (__CMCARM__)) /*----------------- Phyton CMC-ARM Compiler ---------------*/
S/* Phyton CMC-ARM specific functions */
S
S/*
S * The CMSIS functions have been implemented as intrinsics in the compiler.
S */
S
N#endif
N
N
N/** @addtogroup CMSIS_CM3_Core_FunctionInterface CMSIS CM3 Core Function Interface
N  Core  Function Interface containing:
N  - Core NVIC Functions
N  - Core SysTick Functions
N  - Core Reset Functions
N*/
N/*@{*/
N
N
N/* ##########################   NVIC functions  #################################### */
N
N/**
N * @brief  Set the Priority Grouping in NVIC Interrupt Controller
N *
N * @param  PriorityGroup is priority grouping field
N *
N * Set the priority grouping field using the required unlock sequence.
N * The parameter priority_grouping is assigned to the field
N * SCB->AIRCR [10:8] PRIGROUP field. Only values from 0..7 are used.
N * In case of a conflict between priority grouping and available
N * priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
N */
Nstatic __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
Xstatic __inline void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
N{
N  uint32_t reg_value;
N  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 are used          */
N
N  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
X  reg_value  =  ((SCB_Type *) ((0xE000E000) + 0x0D00))->AIRCR;                                                    
N  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
X  reg_value &= ~((0xFFFFul << 16) | (7ul << 8));              
N  reg_value  =  (reg_value                       |
N                (0x5FA << SCB_AIRCR_VECTKEY_Pos) |
X                (0x5FA << 16) |
N                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
N  SCB->AIRCR =  reg_value;
X  ((SCB_Type *) ((0xE000E000) + 0x0D00))->AIRCR =  reg_value;
N}
N
N/**
N * @brief  Get the Priority Grouping from NVIC Interrupt Controller
N *
N * @return priority grouping field
N *
N * Get the priority grouping from NVIC Interrupt Controller.
N * priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
N */
Nstatic __INLINE uint32_t NVIC_GetPriorityGrouping(void)
Xstatic __inline uint32_t NVIC_GetPriorityGrouping(void)
N{
N  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
X  return ((((SCB_Type *) ((0xE000E000) + 0x0D00))->AIRCR & (7ul << 8)) >> 8);    
N}
N
N/**
N * @brief  Enable Interrupt in NVIC Interrupt Controller
N *
N * @param  IRQn   The positive number of the external interrupt to enable
N *
N * Enable a device specific interupt in the NVIC interrupt controller.
N * The interrupt number cannot be a negative value.
N */
Nstatic __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_EnableIRQ(IRQn_Type IRQn)
N{
N  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
X  ((NVIC_Type *) ((0xE000E000) + 0x0100))->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  
N}
N
N/**
N * @brief  Disable the interrupt line for external interrupt specified
N *
N * @param  IRQn   The positive number of the external interrupt to disable
N *
N * Disable a device specific interupt in the NVIC interrupt controller.
N * The interrupt number cannot be a negative value.
N */
Nstatic __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_DisableIRQ(IRQn_Type IRQn)
N{
N  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
X  ((NVIC_Type *) ((0xE000E000) + 0x0100))->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  
N}
N
N/**
N * @brief  Read the interrupt pending bit for a device specific interrupt source
N *
N * @param  IRQn    The number of the device specifc interrupt
N * @return         1 = interrupt pending, 0 = interrupt not pending
N *
N * Read the pending register in NVIC and return 1 if its status is pending,
N * otherwise it returns 0
N */
Nstatic __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
N{
N  return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pending else 0 */
X  return((uint32_t) ((((NVIC_Type *) ((0xE000E000) + 0x0100))->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));  
N}
N
N/**
N * @brief  Set the pending bit for an external interrupt
N *
N * @param  IRQn    The number of the interrupt for set pending
N *
N * Set the pending bit for the specified interrupt.
N * The interrupt number cannot be a negative value.
N */
Nstatic __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_SetPendingIRQ(IRQn_Type IRQn)
N{
N  NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
X  ((NVIC_Type *) ((0xE000E000) + 0x0100))->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  
N}
N
N/**
N * @brief  Clear the pending bit for an external interrupt
N *
N * @param  IRQn    The number of the interrupt for clear pending
N *
N * Clear the pending bit for the specified interrupt.
N * The interrupt number cannot be a negative value.
N */
Nstatic __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
N{
N  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
X  ((NVIC_Type *) ((0xE000E000) + 0x0100))->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  
N}
N
N/**
N * @brief  Read the active bit for an external interrupt
N *
N * @param  IRQn    The number of the interrupt for read active bit
N * @return         1 = interrupt active, 0 = interrupt not active
N *
N * Read the active register in NVIC and returns 1 if its status is active,
N * otherwise it returns 0.
N */
Nstatic __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetActive(IRQn_Type IRQn)
N{
N  return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if active else 0 */
X  return((uint32_t)((((NVIC_Type *) ((0xE000E000) + 0x0100))->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));  
N}
N
N/**
N * @brief  Set the priority for an interrupt
N *
N * @param  IRQn      The number of the interrupt for set priority
N * @param  priority  The priority to set
N *
N * Set the priority for the specified interrupt. The interrupt
N * number can be positive to specify an external (device specific)
N * interrupt, or negative to specify an internal (core) interrupt.
N *
N * Note: The priority cannot be set for every core interrupt.
N */
Nstatic __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
Xstatic __inline void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
N{
N  if(IRQn < 0) {
N    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M3 System Interrupts */
X    ((SCB_Type *) ((0xE000E000) + 0x0D00))->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - 4)) & 0xff); }  
N  else {
N    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
X    ((NVIC_Type *) ((0xE000E000) + 0x0100))->IP[(uint32_t)(IRQn)] = ((priority << (8 - 4)) & 0xff);    }         
N}
N
N/**
N * @brief  Read the priority for an interrupt
N *
N * @param  IRQn      The number of the interrupt for get priority
N * @return           The priority for the interrupt
N *
N * Read the priority for the specified interrupt. The interrupt
N * number can be positive to specify an external (device specific)
N * interrupt, or negative to specify an internal (core) interrupt.
N *
N * The returned priority value is automatically aligned to the implemented
N * priority bits of the microcontroller.
N *
N * Note: The priority cannot be set for every core interrupt.
N */
Nstatic __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
Xstatic __inline uint32_t NVIC_GetPriority(IRQn_Type IRQn)
N{
N
N  if(IRQn < 0) {
N    return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for Cortex-M3 system interrupts */
X    return((uint32_t)(((SCB_Type *) ((0xE000E000) + 0x0D00))->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - 4)));  }  
N  else {
N    return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for device specific interrupts  */
X    return((uint32_t)(((NVIC_Type *) ((0xE000E000) + 0x0100))->IP[(uint32_t)(IRQn)]           >> (8 - 4)));  }  
N}
N
N
N/**
N * @brief  Encode the priority for an interrupt
N *
N * @param  PriorityGroup    The used priority group
N * @param  PreemptPriority  The preemptive priority value (starting from 0)
N * @param  SubPriority      The sub priority value (starting from 0)
N * @return                  The encoded priority for the interrupt
N *
N * Encode the priority for an interrupt with the given priority group,
N * preemptive priority value and sub priority value.
N * In case of a conflict between priority grouping and available
N * priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
N *
N * The returned priority value can be used for NVIC_SetPriority(...) function
N */
Nstatic __INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
Xstatic __inline uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
N{
N  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
N  uint32_t PreemptPriorityBits;
N  uint32_t SubPriorityBits;
N
N  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
X  PreemptPriorityBits = ((7 - PriorityGroupTmp) > 4) ? 4 : 7 - PriorityGroupTmp;
N  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
X  SubPriorityBits     = ((PriorityGroupTmp + 4) < 7) ? 0 : PriorityGroupTmp - 7 + 4;
N
N  return (
N           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
N           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
N         );
N}
N
N
N/**
N * @brief  Decode the priority of an interrupt
N *
N * @param  Priority           The priority for the interrupt
N * @param  PriorityGroup      The used priority group
N * @param  pPreemptPriority   The preemptive priority value (starting from 0)
N * @param  pSubPriority       The sub priority value (starting from 0)
N *
N * Decode an interrupt priority value with the given priority group to
N * preemptive priority value and sub priority value.
N * In case of a conflict between priority grouping and available
N * priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
N *
N * The priority value can be retrieved with NVIC_GetPriority(...) function
N */
Nstatic __INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPreemptPriority, uint32_t* pSubPriority)
Xstatic __inline void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPreemptPriority, uint32_t* pSubPriority)
N{
N  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
N  uint32_t PreemptPriorityBits;
N  uint32_t SubPriorityBits;
N
N  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
X  PreemptPriorityBits = ((7 - PriorityGroupTmp) > 4) ? 4 : 7 - PriorityGroupTmp;
N  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
X  SubPriorityBits     = ((PriorityGroupTmp + 4) < 7) ? 0 : PriorityGroupTmp - 7 + 4;
N
N  *pPreemptPriority = (Priority >> SubPriorityBits) & ((1 << (PreemptPriorityBits)) - 1);
N  *pSubPriority     = (Priority                   ) & ((1 << (SubPriorityBits    )) - 1);
N}
N
N
N/* ##################################    SysTick function  ############################################ */
N
N#if (!defined (__Vendor_SysTickConfig)) || (__Vendor_SysTickConfig == 0)
X#if (!0L) || (__Vendor_SysTickConfig == 0)
N
N/**
N * @brief  Initialize and start the SysTick counter and its interrupt.
N *
N * @param   ticks   number of ticks between two interrupts
N * @return  1 = failed, 0 = successful
N *
N * Initialise the system tick timer and its interrupt and start the
N * system tick timer / counter in free running mode to generate
N * periodical interrupts.
N */
Nstatic __INLINE uint32_t SysTick_Config(uint32_t ticks)
Xstatic __inline uint32_t SysTick_Config(uint32_t ticks)
N{
N  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
X  if (ticks > (0xFFFFFFul << 0))  return (1);             
N
N  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
X  ((SysTick_Type *) ((0xE000E000) + 0x0010))->LOAD  = (ticks & (0xFFFFFFul << 0)) - 1;       
N  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
X  NVIC_SetPriority (SysTick_IRQn, (1<<4) - 1);   
N  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
X  ((SysTick_Type *) ((0xE000E000) + 0x0010))->VAL   = 0;                                           
N  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
X  ((SysTick_Type *) ((0xE000E000) + 0x0010))->CTRL  = (1ul << 2) |
N                   SysTick_CTRL_TICKINT_Msk   |
X                   (1ul << 1)   |
N                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
X                   (1ul << 0);                     
N  return (0);                                                  /* Function successful */
N}
N
N#endif
N
N
N/* ##################################    Reset function  ############################################ */
N
N/**
N * @brief  Initiate a system reset request.
N *
N * Initiate a system reset request to reset the MCU
N */
Nstatic __INLINE void NVIC_SystemReset(void)
Xstatic __inline void NVIC_SystemReset(void)
N{
N  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
X  ((SCB_Type *) ((0xE000E000) + 0x0D00))->AIRCR  = ((0x5FA << 16)      |
N                 (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
X                 (((SCB_Type *) ((0xE000E000) + 0x0D00))->AIRCR & (7ul << 8)) |
N                 SCB_AIRCR_SYSRESETREQ_Msk);                   /* Keep priority group unchanged */
X                 (1ul << 2));                    
N  __DSB();                                                     /* Ensure completion of memory access */
X  __dsb(0);                                                      
N  while(1);                                                    /* wait until reset */
N}
N
N
N/*@}*/ /* end of group CMSIS_CM3_Core_FunctionInterface */
N
N
N
N/* ##################################### Debug In/Output function ########################################### */
N
N/** @addtogroup CMSIS_CM3_CoreDebugInterface CMSIS CM3 Core Debug Interface
N  Core Debug Interface containing:
N  - Core Debug Receive / Transmit Functions
N  - Core Debug Defines
N  - Core Debug Variables
N*/
N/*@{*/
N
Nextern volatile int ITM_RxBuffer;                    /*!< variable to receive characters                             */
N#define             ITM_RXBUFFER_EMPTY    0x5AA55AA5 /*!< value identifying ITM_RxBuffer is ready for next character */
N
N
N/**
N * @brief  Outputs a character via the ITM channel 0
N *
N * @param  ch   character to output
N * @return      character to output
N *
N * The function outputs a character via the ITM channel 0.
N * The function returns when no debugger is connected that has booked the output.
N * It is blocking when a debugger is connected, but the previous character send is not transmitted.
N */
Nstatic __INLINE uint32_t ITM_SendChar (uint32_t ch)
Xstatic __inline uint32_t ITM_SendChar (uint32_t ch)
N{
N  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
X  if ((((CoreDebug_Type *) (0xE000EDF0))->DEMCR & (1ul << 24))  &&       
N      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
X      (((ITM_Type *) (0xE0000000))->TCR & (1ul << 0))                  &&       
N      (ITM->TER & (1ul << 0)        )                    )     /* ITM Port #0 enabled */
X      (((ITM_Type *) (0xE0000000))->TER & (1ul << 0)        )                    )      
N  {
N    while (ITM->PORT[0].u32 == 0);
X    while (((ITM_Type *) (0xE0000000))->PORT[0].u32 == 0);
N    ITM->PORT[0].u8 = (uint8_t) ch;
X    ((ITM_Type *) (0xE0000000))->PORT[0].u8 = (uint8_t) ch;
N  }
N  return (ch);
N}
N
N
N/**
N * @brief  Inputs a character via variable ITM_RxBuffer
N *
N * @return      received character, -1 = no character received
N *
N * The function inputs a character via variable ITM_RxBuffer.
N * The function returns when no debugger is connected that has booked the output.
N * It is blocking when a debugger is connected, but the previous character send is not transmitted.
N */
Nstatic __INLINE int ITM_ReceiveChar (void) {
Xstatic __inline int ITM_ReceiveChar (void) {
N  int ch = -1;                               /* no character available */
N
N  if (ITM_RxBuffer != ITM_RXBUFFER_EMPTY) {
X  if (ITM_RxBuffer != 0x5AA55AA5) {
N    ch = ITM_RxBuffer;
N    ITM_RxBuffer = ITM_RXBUFFER_EMPTY;       /* ready for next character */
X    ITM_RxBuffer = 0x5AA55AA5;        
N  }
N
N  return (ch);
N}
N
N
N/**
N * @brief  Check if a character via variable ITM_RxBuffer is available
N *
N * @return      1 = character available, 0 = no character available
N *
N * The function checks  variable ITM_RxBuffer whether a character is available or not.
N * The function returns '1' if a character is available and '0' if no character is available.
N */
Nstatic __INLINE int ITM_CheckChar (void) {
Xstatic __inline int ITM_CheckChar (void) {
N
N  if (ITM_RxBuffer == ITM_RXBUFFER_EMPTY) {
X  if (ITM_RxBuffer == 0x5AA55AA5) {
N    return (0);                                 /* no character available */
N  } else {
N    return (1);                                 /*    character available */
N  }
N}
N
N
N/*@}*/ /* end of group CMSIS_CM3_core_DebugInterface */
N
N
N#ifdef __cplusplus
S}
N#endif
N
N/*@}*/ /* end of group CMSIS_CM3_core_definitions */
N
N#endif /* __CM3_CORE_H__ */
N
N/*lint -restore */
N
L 82 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x.h" 2
N
N#include "1986BE9x_can_defs.h"
L 1 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x_can_defs.h" 1
N/**
N  ******************************************************************************
N  * @file    1986BE9x_can_defs.h
N  * @author  Phyton Application Team
N  * @version V1.0.0
N  * @date    24/09/2010
N  * @brief   This file contains all the Special Function Registers definitions
N  *          for the CAN peripheral unit used in the Milandr 1986BE9x
N  *          microcontrollers.
N  ******************************************************************************
N  * <br><br>
N  *
N  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
N  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
N  * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT
N  * OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
N  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
N  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
N  *
N  * <h2><center>&copy; COPYRIGHT 2010 Phyton</center></h2>
N  ******************************************************************************
N  * FILE 1986BE9x_can_defs.h
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __1986BE9X_CAN_DEFS_H
N#define __1986BE9X_CAN_DEFS_H
N
N/** @addtogroup __CMSIS CMSIS
N  * @{
N  */
N
N/** @addtogroup __1986BE9x_Peripheral_Units 1986BE9x Peripheral Units
N  * @{
N  */
N
N/** @defgroup Periph_CAN CAN
N  * @{
N  */
N
N/**
N  * @brief CAN_BUF_TypeDef structure
N  */
N
Ntypedef struct
N{
N  __IO uint32_t ID;
X  volatile uint32_t ID;
N  __IO uint32_t DLC;
X  volatile uint32_t DLC;
N  __IO uint32_t DATAL;
X  volatile uint32_t DATAL;
N  __IO uint32_t DATAH;
X  volatile uint32_t DATAH;
N}CAN_BUF_TypeDef;
N
N/**
N  * @brief CAN_BUF_TypeDef structure
N  */
N
Ntypedef struct
N{
N  __IO uint32_t MASK;
X  volatile uint32_t MASK;
N  __IO uint32_t FILTER;
X  volatile uint32_t FILTER;
N}CAN_BUF_FILTER_TypeDef;
N
N/** @defgroup Periph_CAN_Data_Structures Data Structures
N  * @{
N  */
N
N/** @defgroup Periph_CAN_TypeDef CAN_TypeDef
N  * @{
N  */
N
Ntypedef struct
N{
N  __IO uint32_t CONTROL;
X  volatile uint32_t CONTROL;
N  __IO uint32_t STATUS;
X  volatile uint32_t STATUS;
N  __IO uint32_t BITTMNG;
X  volatile uint32_t BITTMNG;
N       uint32_t RESERVED0;
N  __IO uint32_t INT_EN;
X  volatile uint32_t INT_EN;
N       uint32_t RESERVED1[2];
N  __IO uint32_t OVER;
X  volatile uint32_t OVER;
N  __IO uint32_t RXID;
X  volatile uint32_t RXID;
N  __IO uint32_t RXDLC;
X  volatile uint32_t RXDLC;
N  __IO uint32_t RXDATAL;
X  volatile uint32_t RXDATAL;
N  __IO uint32_t RXDATAH;
X  volatile uint32_t RXDATAH;
N  __IO uint32_t TXID;
X  volatile uint32_t TXID;
N  __IO uint32_t TXDLC;
X  volatile uint32_t TXDLC;
N  __IO uint32_t DATAL;
X  volatile uint32_t DATAL;
N  __IO uint32_t DATAH;
X  volatile uint32_t DATAH;
N  __IO uint32_t BUF_CON[32];
X  volatile uint32_t BUF_CON[32];
N  __IO uint32_t INT_RX;
X  volatile uint32_t INT_RX;
N  __IO uint32_t RX;
X  volatile uint32_t RX;
N  __IO uint32_t INT_TX;
X  volatile uint32_t INT_TX;
N  __IO uint32_t TX;
X  volatile uint32_t TX;
N       uint32_t RESERVED2[76];
N    CAN_BUF_TypeDef CAN_BUF[32];
N       uint32_t RESERVED3[64];
N    CAN_BUF_FILTER_TypeDef CAN_BUF_FILTER[32];
N}CAN_TypeDef;
N
N/** @} */ /* End of group Periph_CAN_TypeDef */
N
N/** @} */ /* End of group Periph_CAN_Data_Structures */
N
N/** @defgroup Periph_CAN_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_CAN_CAN_CONTROL_Bits CAN_CONTROL
N  * @{
N  */
N
N#define CAN_CONTROL_CAN_EN_Pos                  0
N#define CAN_CONTROL_CAN_EN                      ((uint32_t)0x00000001)
N
N#define CAN_CONTROL_ROM_Pos                     1
N#define CAN_CONTROL_ROM                         ((uint32_t)0x00000002)
N
N#define CAN_CONTROL_STM_Pos                     2
N#define CAN_CONTROL_STM                         ((uint32_t)0x00000004)
N
N#define CAN_CONTROL_SAP_Pos                     3
N#define CAN_CONTROL_SAP                         ((uint32_t)0x00000008)
N
N#define CAN_CONTROL_ROP_Pos                     4
N#define CAN_CONTROL_ROP                         ((uint32_t)0x00000010)
N
N
N/** @} */ /* End of group Periph_CAN_CAN_CONTROL_Bits */
N
N/** @} */ /* End of group Periph_CAN_Defines */
N
N/** @defgroup Periph_CAN_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_CAN_CAN_STATUS_Bits CAN_STATUS
N  * @{
N  */
N
N#define CAN_STATUS_RX_READY_Pos                 0
N#define CAN_STATUS_RX_READY                     ((uint32_t)0x00000001)
N
N#define CAN_STATUS_TX_READY_Pos                 1
N#define CAN_STATUS_TX_READY                     ((uint32_t)0x00000002)
N
N#define CAN_STATUS_ERROR_OVER_Pos               2
N#define CAN_STATUS_ERROR_OVER                   ((uint32_t)0x00000004)
N
N#define CAN_STATUS_BIT_ERR_Pos                  3
N#define CAN_STATUS_BIT_ERR                      ((uint32_t)0x00000008)
N
N#define CAN_STATUS_BIT_STUFF_ERR_Pos            4
N#define CAN_STATUS_BIT_STUFF_ERR                ((uint32_t)0x00000010)
N
N#define CAN_STATUS_CRC_ERR_Pos                  5
N#define CAN_STATUS_CRC_ERR                      ((uint32_t)0x00000020)
N
N#define CAN_STATUS_FRAME_ERR_Pos                6
N#define CAN_STATUS_FRAME_ERR                    ((uint32_t)0x00000040)
N
N#define CAN_STATUS_ACK_ERR_Pos                  7
N#define CAN_STATUS_ACK_ERR                      ((uint32_t)0x00000080)
N
N#define CAN_STATUS_IDLOWER_Pos                  8
N#define CAN_STATUS_IDLOWER                      ((uint32_t)0x00000100)
N
N#define CAN_STATUS_ERR_STATUS_Pos               9
N#define CAN_STATUS_ERR_STATUS_Msk               ((uint32_t)0x00000600)
N
N#define CAN_STATUS_RX_ERR_CNT8_Pos              11
N#define CAN_STATUS_RX_ERR_CNT8                  ((uint32_t)0x00000800)
N
N#define CAN_STATUS_TX_ERR_CNT8_Pos              12
N#define CAN_STATUS_TX_ERR_CNT8                  ((uint32_t)0x00001000)
N
N#define CAN_STATUS_RX_ERR_CNT_Pos               16
N#define CAN_STATUS_RX_ERR_CNT_Msk               ((uint32_t)0x00FF0000)
N
N#define CAN_STATUS_TX_ERR_CNT_Pos               24
N#define CAN_STATUS_TX_ERR_CNT_Msk               ((uint32_t)0xFF000000)
N
N
N/** @} */ /* End of group Periph_CAN_CAN_STATUS_Bits */
N
N/** @} */ /* End of group Periph_CAN_Defines */
N
N/** @defgroup Periph_CAN_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_CAN_CAN_BITTMNG_Bits CAN_BITTMNG
N  * @{
N  */
N
N#define CAN_BITTMNG_BRP_Pos                     0
N#define CAN_BITTMNG_BRP_Msk                     ((uint32_t)0x0000FFFF)
N
N#define CAN_BITTMNG_PSEG_Pos                    16
N#define CAN_BITTMNG_PSEG_Msk                    ((uint32_t)0x00070000)
N
N#define CAN_BITTMNG_SEG1_Pos                    19
N#define CAN_BITTMNG_SEG1_Msk                    ((uint32_t)0x00380000)
N
N#define CAN_BITTMNG_SEG2_Pos                    22
N#define CAN_BITTMNG_SEG2_Msk                    ((uint32_t)0x01C00000)
N
N#define CAN_BITTMNG_SJW_Pos                     25
N#define CAN_BITTMNG_SJW_Msk                     ((uint32_t)0x06000000)
N
N#define CAN_BITTMNG_SB_Pos                      27
N#define CAN_BITTMNG_SB                          ((uint32_t)0x08000000)
N
N
N/** @} */ /* End of group Periph_CAN_CAN_BITTMNG_Bits */
N
N/** @} */ /* End of group Periph_CAN_Defines */
N
N/** @defgroup Periph_CAN_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_CAN_CAN_INT_EN_Bits CAN_INT_EN
N  * @{
N  */
N
N#define CAN_INT_EN_GLB_INT_EN_Pos               0
N#define CAN_INT_EN_GLB_INT_EN                   ((uint32_t)0x00000001)
N
N#define CAN_INT_EN_RX_INT_EN_Pos                1
N#define CAN_INT_EN_RX_INT_EN                    ((uint32_t)0x00000002)
N
N#define CAN_INT_EN_TX_INT_EN_Pos                2
N#define CAN_INT_EN_TX_INT_EN                    ((uint32_t)0x00000004)
N
N#define CAN_INT_EN_ERR_INT_EN_Pos               3
N#define CAN_INT_EN_ERR_INT_EN                   ((uint32_t)0x00000008)
N
N#define CAN_INT_EN_ERR_OVER_INT_EN_Pos          4
N#define CAN_INT_EN_ERR_OVER_INT_EN              ((uint32_t)0x00000010)
N
N
N/** @} */ /* End of group Periph_CAN_CAN_INT_EN_Bits */
N
N/** @} */ /* End of group Periph_CAN_Defines */
N
N/** @defgroup Periph_CAN_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_CAN_CAN_RXID_Bits CAN_RXID
N  * @{
N  */
N
N#define CAN_RXID_EID_Pos                        0
N#define CAN_RXID_EID_Msk                        ((uint32_t)0x0003FFFF)
N
N#define CAN_RXID_SID_Pos                        18
N#define CAN_RXID_SID_Msk                        ((uint32_t)0x1FFC0000)
N
N
N/** @} */ /* End of group Periph_CAN_CAN_RXID_Bits */
N
N/** @} */ /* End of group Periph_CAN_Defines */
N
N/** @defgroup Periph_CAN_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_CAN_CAN_RXDLC_Bits CAN_RXDLC
N  * @{
N  */
N
N#define CAN_RXDLC_Pos                           0
N#define CAN_RXDLC_Msk                           ((uint32_t)0x0000000F)
N
N#define CAN_RXDLC_RTR_Pos                       8
N#define CAN_RXDLC_RTR                           ((uint32_t)0x00000100)
N
N#define CAN_RXDLC_R1_Pos                        9
N#define CAN_RXDLC_R1                            ((uint32_t)0x00000200)
N
N#define CAN_RXDLC_R0_Pos                        10
N#define CAN_RXDLC_R0                            ((uint32_t)0x00000400)
N
N#define CAN_RXDLC_SSR_Pos                       11
N#define CAN_RXDLC_SSR                           ((uint32_t)0x00000800)
N
N#define CAN_RXDLC_IDE_Pos                       12
N#define CAN_RXDLC_IDE                           ((uint32_t)0x00001000)
N
N
N/** @} */ /* End of group Periph_CAN_CAN_RXDLC_Bits */
N
N/** @} */ /* End of group Periph_CAN_Defines */
N
N/** @defgroup Periph_CAN_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_CAN_CAN_RXDATAL_Bits CAN_RXDATAL
N  * @{
N  */
N
N#define CAN_RXDATAL_DB0_Pos                     0
N#define CAN_RXDATAL_DB0_Msk                     ((uint32_t)0x000000FF)
N
N#define CAN_RXDATAL_DB1_Pos                     8
N#define CAN_RXDATAL_DB1_Msk                     ((uint32_t)0x0000FF00)
N
N#define CAN_RXDATAL_DB2_Pos                     16
N#define CAN_RXDATAL_DB2_Msk                     ((uint32_t)0x00FF0000)
N
N#define CAN_RXDATAL_DB3_Pos                     24
N#define CAN_RXDATAL_DB3_Msk                     ((uint32_t)0xFF000000)
N
N
N/** @} */ /* End of group Periph_CAN_CAN_RXDATAL_Bits */
N
N/** @} */ /* End of group Periph_CAN_Defines */
N
N/** @defgroup Periph_CAN_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_CAN_CAN_RXDATAH_Bits CAN_RXDATAH
N  * @{
N  */
N
N#define CAN_RXDATAH_DB4_Pos                     0
N#define CAN_RXDATAH_DB4_Msk                     ((uint32_t)0x000000FF)
N
N#define CAN_RXDATAH_DB5_Pos                     8
N#define CAN_RXDATAH_DB5_Msk                     ((uint32_t)0x0000FF00)
N
N#define CAN_RXDATAH_DB6_Pos                     16
N#define CAN_RXDATAH_DB6_Msk                     ((uint32_t)0x00FF0000)
N
N#define CAN_RXDATAH_DB7_Pos                     24
N#define CAN_RXDATAH_DB7_Msk                     ((uint32_t)0xFF000000)
N
N
N/** @} */ /* End of group Periph_CAN_CAN_RXDATAH_Bits */
N
N/** @} */ /* End of group Periph_CAN_Defines */
N
N/** @defgroup Periph_CAN_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_CAN_CAN_TXID_Bits CAN_TXID
N  * @{
N  */
N
N#define CAN_TXID_EID_Pos                        0
N#define CAN_TXID_EID_Msk                        ((uint32_t)0x0003FFFF)
N
N#define CAN_TXID_SID_Pos                        18
N#define CAN_TXID_SID_Msk                        ((uint32_t)0x1FFC0000)
N
N
N/** @} */ /* End of group Periph_CAN_CAN_TXID_Bits */
N
N/** @} */ /* End of group Periph_CAN_Defines */
N
N/** @defgroup Periph_CAN_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_CAN_CAN_TXDLC_Bits CAN_TXDLC
N  * @{
N  */
N
N#define CAN_TXDLC_Pos                           0
N#define CAN_TXDLC_Msk                           ((uint32_t)0x0000000F)
N
N#define CAN_TXDLC_RTR_Pos                       8
N#define CAN_TXDLC_RTR                           ((uint32_t)0x00000100)
N
N#define CAN_TXDLC_R1_Pos                        9
N#define CAN_TXDLC_R1                            ((uint32_t)0x00000200)
N
N#define CAN_TXDLC_R0_Pos                        10
N#define CAN_TXDLC_R0                            ((uint32_t)0x00000400)
N
N#define CAN_TXDLC_SSR_Pos                       11
N#define CAN_TXDLC_SSR                           ((uint32_t)0x00000800)
N
N#define CAN_TXDLC_IDE_Pos                       12
N#define CAN_TXDLC_IDE                           ((uint32_t)0x00001000)
N
N
N/** @} */ /* End of group Periph_CAN_CAN_TXDLC_Bits */
N
N/** @} */ /* End of group Periph_CAN_Defines */
N
N/** @defgroup Periph_CAN_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_CAN_CAN_DATAL_Bits CAN_DATAL
N  * @{
N  */
N
N#define CAN_DATAL_DB0_Pos                       0
N#define CAN_DATAL_DB0_Msk                       ((uint32_t)0x000000FF)
N
N#define CAN_DATAL_DB1_Pos                       8
N#define CAN_DATAL_DB1_Msk                       ((uint32_t)0x0000FF00)
N
N#define CAN_DATAL_DB2_Pos                       16
N#define CAN_DATAL_DB2_Msk                       ((uint32_t)0x00FF0000)
N
N#define CAN_DATAL_DB3_Pos                       24
N#define CAN_DATAL_DB3_Msk                       ((uint32_t)0xFF000000)
N
N
N/** @} */ /* End of group Periph_CAN_CAN_DATAL_Bits */
N
N/** @} */ /* End of group Periph_CAN_Defines */
N
N/** @defgroup Periph_CAN_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_CAN_CAN_DATAH_Bits CAN_DATAH
N  * @{
N  */
N
N#define CAN_DATAH_DB4_Pos                       0
N#define CAN_DATAH_DB4_Msk                       ((uint32_t)0x000000FF)
N
N#define CAN_DATAH_DB5_Pos                       8
N#define CAN_DATAH_DB5_Msk                       ((uint32_t)0x0000FF00)
N
N#define CAN_DATAH_DB6_Pos                       16
N#define CAN_DATAH_DB6_Msk                       ((uint32_t)0x00FF0000)
N
N#define CAN_DATAH_DB7_Pos                       24
N#define CAN_DATAH_DB7_Msk                       ((uint32_t)0xFF000000)
N
N
N/** @} */ /* End of group Periph_CAN_CAN_DATAH_Bits */
N
N/** @} */ /* End of group Periph_CAN_Defines */
N
N/** @defgroup Periph_CAN_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_CAN_CAN_BUF_CON_Bits CAN_BUF_CON
N  * @{
N  */
N
N#define CAN_BUF_CON_EN_Pos                      0
N#define CAN_BUF_CON_EN                          ((uint32_t)0x00000001)
N
N#define CAN_BUF_CON_RX_TXn_Pos                  1
N#define CAN_BUF_CON_RX_TXn                      ((uint32_t)0x00000002)
N
N#define CAN_BUF_CON_OVER_EN_Pos                 2
N#define CAN_BUF_CON_OVER_EN                     ((uint32_t)0x00000004)
N
N#define CAN_BUF_CON_RTR_EN_Pos                  3
N#define CAN_BUF_CON_RTR_EN                      ((uint32_t)0x00000008)
N
N#define CAN_BUF_CON_PRIOR_0_Pos                 4
N#define CAN_BUF_CON_PRIOR_0                     ((uint32_t)0x00000010)
N
N#define CAN_BUF_CON_TX_REQ_Pos                  5
N#define CAN_BUF_CON_TX_REQ                      ((uint32_t)0x00000020)
N
N#define CAN_BUF_CON_RX_FULL_Pos                 6
N#define CAN_BUF_CON_RX_FULL                     ((uint32_t)0x00000040)
N
N#define CAN_BUF_CON_OVER_WR_Pos                 7
N#define CAN_BUF_CON_OVER_WR                     ((uint32_t)0x00000080)
N
N
N/** @} */ /* End of group Periph_CAN_CAN_BUF_CON_Bits */
N
N/** @} */ /* End of group Periph_CAN_Defines */
N
N/** @defgroup Periph_CAN_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_CAN_CAN_BUF_ID_Bits CAN_BUF_ID
N  * @{
N  */
N
N#define CAN_BUF_ID_EID_Pos                      0
N#define CAN_BUF_ID_EID_Msk                      ((uint32_t)0x0003FFFF)
N
N#define CAN_BUF_ID_SID_Pos                      18
N#define CAN_BUF_ID_SID_Msk                      ((uint32_t)0x1FFC0000)
N
N
N/** @} */ /* End of group Periph_CAN_CAN_BUF_ID_Bits */
N
N/** @} */ /* End of group Periph_CAN_Defines */
N
N/** @defgroup Periph_CAN_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_CAN_CAN_BUF_DLC_Bits CAN_BUF_DLC
N  * @{
N  */
N
N#define CAN_BUF_DLC_Pos                         0
N#define CAN_BUF_DLC_Msk                         ((uint32_t)0x0000000F)
N
N#define CAN_BUF_DLC_RTR_Pos                     8
N#define CAN_BUF_DLC_RTR                         ((uint32_t)0x00000100)
N
N#define CAN_BUF_DLC_R1_Pos                      9
N#define CAN_BUF_DLC_R1                          ((uint32_t)0x00000200)
N
N#define CAN_BUF_DLC_R0_Pos                      10
N#define CAN_BUF_DLC_R0                          ((uint32_t)0x00000400)
N
N#define CAN_BUF_DLC_SSR_Pos                     11
N#define CAN_BUF_DLC_SSR                         ((uint32_t)0x00000800)
N
N#define CAN_BUF_DLC_IDE_Pos                     12
N#define CAN_BUF_DLC_IDE                         ((uint32_t)0x00001000)
N
N
N/** @} */ /* End of group Periph_CAN_CAN_BUF_DLC_Bits */
N
N/** @} */ /* End of group Periph_CAN_Defines */
N
N/** @defgroup Periph_CAN_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_CAN_CAN_BUF_DATAL_Bits CAN_BUF_DATAL
N  * @{
N  */
N
N#define CAN_BUF_DATAL_DB0_Pos                   0
N#define CAN_BUF_DATAL_DB0_Msk                   ((uint32_t)0x000000FF)
N
N#define CAN_BUF_DATAL_DB1_Pos                   8
N#define CAN_BUF_DATAL_DB1_Msk                   ((uint32_t)0x0000FF00)
N
N#define CAN_BUF_DATAL_DB2_Pos                   16
N#define CAN_BUF_DATAL_DB2_Msk                   ((uint32_t)0x00FF0000)
N
N#define CAN_BUF_DATAL_DB3_Pos                   24
N#define CAN_BUF_DATAL_DB3_Msk                   ((uint32_t)0xFF000000)
N
N
N/** @} */ /* End of group Periph_CAN_CAN_BUF_DATAL_Bits */
N
N/** @} */ /* End of group Periph_CAN_Defines */
N
N/** @defgroup Periph_CAN_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_CAN_CAN_BUF_DATAH_Bits CAN_BUF_DATAH
N  * @{
N  */
N
N#define CAN_BUF_DATAH_DB4_Pos                   0
N#define CAN_BUF_DATAH_DB4_Msk                   ((uint32_t)0x000000FF)
N
N#define CAN_BUF_DATAH_DB5_Pos                   8
N#define CAN_BUF_DATAH_DB5_Msk                   ((uint32_t)0x0000FF00)
N
N#define CAN_BUF_DATAH_DB6_Pos                   16
N#define CAN_BUF_DATAH_DB6_Msk                   ((uint32_t)0x00FF0000)
N
N#define CAN_BUF_DATAH_DB7_Pos                   24
N#define CAN_BUF_DATAH_DB7_Msk                   ((uint32_t)0xFF000000)
N
N
N/** @} */ /* End of group Periph_CAN_CAN_BUF_DATAH_Bits */
N
N/** @} */ /* End of group Periph_CAN_Defines */
N
N/** @} */ /* End of group Periph_CAN */
N
N/** @} */ /* End of group __1986BE9x_Peripheral_Units */
N
N/** @} */ /* End of group __CMSIS */
N
N#endif /* __1986BE9X_CAN_DEFS_H */
N
N/******************* (C) COPYRIGHT 2010 Phyton *********************************
N*
N* END OF FILE 1986BE9x_can_defs.h */
L 84 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x.h" 2
N#include "1986BE9x_usb_defs.h"
L 1 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x_usb_defs.h" 1
N/**
N  ******************************************************************************
N  * @file    1986BE9x_usb_defs.h
N  * @author  Phyton Application Team
N  * @version V1.0.0
N  * @date    06/06/2011
N  * @brief   This file contains all the Special Function Registers definitions
N  *          for the USB peripheral unit used in the Milandr 1986BE9x
N  *          microcontrollers.
N  ******************************************************************************
N  * <br><br>
N  *
N  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
N  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
N  * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT
N  * OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
N  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
N  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
N  *
N  * <h2><center>&copy; COPYRIGHT 2010 Phyton</center></h2>
N  ******************************************************************************
N  * FILE 1986BE9x_usb_defs.h
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __1986BE9X_USB_DEFS_H
N#define __1986BE9X_USB_DEFS_H
N
N/** @addtogroup __CMSIS CMSIS
N  * @{
N  */
N
N/** @addtogroup __1986BE9x_Peripheral_Units 1986BE9x Peripheral Units
N  * @{
N  */
N
N/** @defgroup Periph_USB USB
N  * @{
N  */
N
N/**
N  * @brief USB_SEP_TypeDef structure
N  */
N
Ntypedef struct
N{
N  __IO uint32_t CTRL;
X  volatile uint32_t CTRL;
N  __IO uint32_t STS;
X  volatile uint32_t STS;
N  __IO uint32_t TS;
X  volatile uint32_t TS;
N  __IO uint32_t NTS;
X  volatile uint32_t NTS;
N}USB_SEP_TypeDef;
N
N/**
N  * @brief USB_SEP_FIFO_TypeDef structure
N  */
N
Ntypedef struct
N{
N  __IO uint32_t RXFD;
X  volatile uint32_t RXFD;
N       uint32_t RESERVED0;
N  __IO uint32_t RXFDC_L;
X  volatile uint32_t RXFDC_L;
N  __IO uint32_t RXFDC_H;
X  volatile uint32_t RXFDC_H;
N  __IO uint32_t RXFC;
X  volatile uint32_t RXFC;
N       uint32_t RESERVED1[11];
N  __IO uint32_t TXFD;
X  volatile uint32_t TXFD;
N       uint32_t RESERVED2[3];
N  __IO uint32_t TXFDC;
X  volatile uint32_t TXFDC;
N       uint32_t RESERVED6[11];
N}USB_SEP_FIFO_TypeDef;
N
N/** @defgroup Periph_USB_Data_Structures Data Structures
N  * @{
N  */
N
N/** @defgroup Periph_USB_TypeDef USB_TypeDef
N  * @{
N  */
N
Ntypedef struct
N{
N  __IO uint32_t HTXC;
X  volatile uint32_t HTXC;
N  __IO uint32_t HTXT;
X  volatile uint32_t HTXT;
N  __IO uint32_t HTXLC;
X  volatile uint32_t HTXLC;
N  __IO uint32_t HTXSE;
X  volatile uint32_t HTXSE;
N  __IO uint32_t HTXA;
X  volatile uint32_t HTXA;
N  __IO uint32_t HTXE;
X  volatile uint32_t HTXE;
N  __IO uint32_t HFN_L;
X  volatile uint32_t HFN_L;
N  __IO uint32_t HFN_H;
X  volatile uint32_t HFN_H;
N  __IO uint32_t HIS;
X  volatile uint32_t HIS;
N  __IO uint32_t HIM;
X  volatile uint32_t HIM;
N  __IO uint32_t HRXS;
X  volatile uint32_t HRXS;
N  __IO uint32_t HRXP;
X  volatile uint32_t HRXP;
N  __IO uint32_t HRXA;
X  volatile uint32_t HRXA;
N  __IO uint32_t HRXE;
X  volatile uint32_t HRXE;
N  __IO uint32_t HRXCS;
X  volatile uint32_t HRXCS;
N  __IO uint32_t HSTM;
X  volatile uint32_t HSTM;
N       uint32_t RESERVED0[16];
N  __IO uint32_t HRXFD;
X  volatile uint32_t HRXFD;
N       uint32_t RESERVED1;
N  __IO uint32_t HRXFDC_L;
X  volatile uint32_t HRXFDC_L;
N  __IO uint32_t HRXFDC_H;
X  volatile uint32_t HRXFDC_H;
N  __IO uint32_t HRXFC;
X  volatile uint32_t HRXFC;
N       uint32_t RESERVED2[11];
N  __IO uint32_t HTXFD;
X  volatile uint32_t HTXFD;
N       uint32_t RESERVED3[3];
N  __IO uint32_t HTXFC;
X  volatile uint32_t HTXFC;
N       uint32_t RESERVED4[11];
N    USB_SEP_TypeDef USB_SEP[4];
N  __IO uint32_t SC;
X  volatile uint32_t SC;
N  __IO uint32_t SLS;
X  volatile uint32_t SLS;
N  __IO uint32_t SIS;
X  volatile uint32_t SIS;
N  __IO uint32_t SIM;
X  volatile uint32_t SIM;
N  __IO uint32_t SA;
X  volatile uint32_t SA;
N  __IO uint32_t SFN_L;
X  volatile uint32_t SFN_L;
N  __IO uint32_t SFN_H;
X  volatile uint32_t SFN_H;
N       uint32_t RESERVED5[9];
N    USB_SEP_FIFO_TypeDef USB_SEP_FIFO[4];
N  __IO uint32_t HSCR;
X  volatile uint32_t HSCR;
N  __IO uint32_t HSVR;
X  volatile uint32_t HSVR;
N}USB_TypeDef;
N
N/** @} */ /* End of group Periph_USB_TypeDef */
N
N/** @} */ /* End of group Periph_USB_Data_Structures */
N
N/** @defgroup Periph_USB_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_USB_USB_HTXC_Bits USB_HTXC
N  * @{
N  */
N
N#define USB_HTXC_TREQ_Pos                       0
N#define USB_HTXC_TREQ                           ((uint32_t)0x00000001)
N
N#define USB_HTXC_SOFS_Pos                       1
N#define USB_HTXC_SOFS                           ((uint32_t)0x00000002)
N
N#define USB_HTXC_PREEN_Pos                      2
N#define USB_HTXC_PREEN                          ((uint32_t)0x00000004)
N
N#define USB_HTXC_ISOEN_Pos                      3
N#define USB_HTXC_ISOEN                          ((uint32_t)0x00000008)
N
N
N/** @} */ /* End of group Periph_USB_USB_HTXC_Bits */
N
N/** @} */ /* End of group Periph_USB_Defines */
N
N/** @defgroup Periph_USB_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_USB_USB_HTXLC_Bits USB_HTXLC
N  * @{
N  */
N
N#define USB_HTXLC_Pos                           0
N#define USB_HTXLC_Msk                           ((uint32_t)0x00000003)
N
N#define USB_HTXLC_DC_Pos                        2
N#define USB_HTXLC_DC                            ((uint32_t)0x00000004)
N
N#define USB_HTXLC_FSPL_Pos                      3
N#define USB_HTXLC_FSPL                          ((uint32_t)0x00000008)
N
N#define USB_HTXLC_FSLR_Pos                      4
N#define USB_HTXLC_FSLR                          ((uint32_t)0x00000010)
N
N
N/** @} */ /* End of group Periph_USB_USB_HTXLC_Bits */
N
N/** @} */ /* End of group Periph_USB_Defines */
N
N/** @defgroup Periph_USB_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_USB_USB_HIS_Bits USB_HIS
N  * @{
N  */
N
N#define USB_HIS_TDONE_Pos                       0
N#define USB_HIS_TDONE                           ((uint32_t)0x00000001)
N
N#define USB_HIS_RESUME_Pos                      1
N#define USB_HIS_RESUME                          ((uint32_t)0x00000002)
N
N#define USB_HIS_CONEV_Pos                       2
N#define USB_HIS_CONEV                           ((uint32_t)0x00000004)
N
N#define USB_HIS_SOFS_Pos                        3
N#define USB_HIS_SOFS                            ((uint32_t)0x00000008)
N
N
N/** @} */ /* End of group Periph_USB_USB_HIS_Bits */
N
N/** @} */ /* End of group Periph_USB_Defines */
N
N/** @defgroup Periph_USB_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_USB_USB_HIM_Bits USB_HIM
N  * @{
N  */
N
N#define USB_HIM_TDONEIE_Pos                     0
N#define USB_HIM_TDONEIE                         ((uint32_t)0x00000001)
N
N#define USB_HIM_RESUMEIE_Pos                    1
N#define USB_HIM_RESUMEIE                        ((uint32_t)0x00000002)
N
N#define USB_HIM_CONEVIE_Pos                     2
N#define USB_HIM_CONEVIE                         ((uint32_t)0x00000004)
N
N#define USB_HIM_SOFIE_Pos                       3
N#define USB_HIM_SOFIE                           ((uint32_t)0x00000008)
N
N
N/** @} */ /* End of group Periph_USB_USB_HIM_Bits */
N
N/** @} */ /* End of group Periph_USB_Defines */
N
N/** @defgroup Periph_USB_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_USB_USB_HRXS_Bits USB_HRXS
N  * @{
N  */
N
N#define USB_HRXS_CRCERR_Pos                     0
N#define USB_HRXS_CRCERR                         ((uint32_t)0x00000001)
N
N#define USB_HRXS_BSERR_Pos                      1
N#define USB_HRXS_BSERR                          ((uint32_t)0x00000002)
N
N#define USB_HRXS_RXOF_Pos                       2
N#define USB_HRXS_RXOF                           ((uint32_t)0x00000004)
N
N#define USB_HRXS_RXTO_Pos                       3
N#define USB_HRXS_RXTO                           ((uint32_t)0x00000008)
N
N#define USB_HRXS_NAKRXED_Pos                    4
N#define USB_HRXS_NAKRXED                        ((uint32_t)0x00000010)
N
N#define USB_HRXS_STALLRXED_Pos                  5
N#define USB_HRXS_STALLRXED                      ((uint32_t)0x00000020)
N
N#define USB_HRXS_ACKRXED_Pos                    6
N#define USB_HRXS_ACKRXED                        ((uint32_t)0x00000040)
N
N#define USB_HRXS_DATASEQ_Pos                    7
N#define USB_HRXS_DATASEQ                        ((uint32_t)0x00000080)
N
N
N/** @} */ /* End of group Periph_USB_USB_HRXS_Bits */
N
N/** @} */ /* End of group Periph_USB_Defines */
N
N/** @defgroup Periph_USB_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_USB_USB_SEP_CTRL_Bits USB_SEP_CTRL
N  * @{
N  */
N
N#define USB_SEP_CTRL_EPEN_Pos                   0
N#define USB_SEP_CTRL_EPEN                       ((uint32_t)0x00000001)
N
N#define USB_SEP_CTRL_EPRDY_Pos                  1
N#define USB_SEP_CTRL_EPRDY                      ((uint32_t)0x00000002)
N
N#define USB_SEP_CTRL_EPDATASEQ_Pos              2
N#define USB_SEP_CTRL_EPDATASEQ                  ((uint32_t)0x00000004)
N
N#define USB_SEP_CTRL_EPSSTALL_Pos               3
N#define USB_SEP_CTRL_EPSSTALL                   ((uint32_t)0x00000008)
N
N#define USB_SEP_CTRL_EPISOEN_Pos                4
N#define USB_SEP_CTRL_EPISOEN                    ((uint32_t)0x00000010)
N
N
N/** @} */ /* End of group Periph_USB_USB_SEP_CTRL_Bits */
N
N/** @} */ /* End of group Periph_USB_Defines */
N
N/** @defgroup Periph_USB_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_USB_USB_SEP_STS_Bits USB_SEP_STS
N  * @{
N  */
N
N#define USB_SEP_STS_SCCRCERR_Pos                0
N#define USB_SEP_STS_SCCRCERR                    ((uint32_t)0x00000001)
N
N#define USB_SEP_STS_SCBSERR_Pos                 1
N#define USB_SEP_STS_SCBSERR                     ((uint32_t)0x00000002)
N
N#define USB_SEP_STS_SCRXOF_Pos                  2
N#define USB_SEP_STS_SCRXOF                      ((uint32_t)0x00000004)
N
N#define USB_SEP_STS_SCRXTO_Pos                  3
N#define USB_SEP_STS_SCRXTO                      ((uint32_t)0x00000008)
N
N#define USB_SEP_STS_SCNAKSENT_Pos               4
N#define USB_SEP_STS_SCNAKSENT                   ((uint32_t)0x00000010)
N
N#define USB_SEP_STS_SCSTALLSENT_Pos             5
N#define USB_SEP_STS_SCSTALLSENT                 ((uint32_t)0x00000020)
N
N#define USB_SEP_STS_SCACKRXED_Pos               6
N#define USB_SEP_STS_SCACKRXED                   ((uint32_t)0x00000040)
N
N#define USB_SEP_STS_SCDATASEQ_Pos               7
N#define USB_SEP_STS_SCDATASEQ                   ((uint32_t)0x00000080)
N
N
N/** @} */ /* End of group Periph_USB_USB_SEP_STS_Bits */
N
N/** @} */ /* End of group Periph_USB_Defines */
N
N/** @defgroup Periph_USB_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_USB_USB_SC_Bits USB_SC
N  * @{
N  */
N
N#define USB_SC_SCGEN_Pos                        0
N#define USB_SC_SCGEN                            ((uint32_t)0x00000001)
N
N#define USB_SC_SCTXLS_Pos                       1
N#define USB_SC_SCTXLS_Msk                       ((uint32_t)0x00000006)
N
N#define USB_SC_SCDC_Pos                         3
N#define USB_SC_SCDC                             ((uint32_t)0x00000008)
N
N#define USB_SC_SCFSP_Pos                        4
N#define USB_SC_SCFSP                            ((uint32_t)0x00000010)
N
N#define USB_SC_SCFSR_Pos                        5
N#define USB_SC_SCFSR                            ((uint32_t)0x00000020)
N
N
N/** @} */ /* End of group Periph_USB_USB_SC_Bits */
N
N/** @} */ /* End of group Periph_USB_Defines */
N
N/** @defgroup Periph_USB_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_USB_USB_SIS_Bits USB_SIS
N  * @{
N  */
N
N#define USB_SIS_SCTDONE_Pos                     0
N#define USB_SIS_SCTDONE                         ((uint32_t)0x00000001)
N
N#define USB_SIS_SCRESUME_Pos                    1
N#define USB_SIS_SCRESUME                        ((uint32_t)0x00000002)
N
N#define USB_SIS_SCRESETEV_Pos                   2
N#define USB_SIS_SCRESETEV                       ((uint32_t)0x00000004)
N
N#define USB_SIS_SCSOFREC_Pos                    3
N#define USB_SIS_SCSOFREC                        ((uint32_t)0x00000008)
N
N#define USB_SIS_SCNAKSENT_Pos                   4
N#define USB_SIS_SCNAKSENT                       ((uint32_t)0x00000010)
N
N
N/** @} */ /* End of group Periph_USB_USB_SIS_Bits */
N
N/** @} */ /* End of group Periph_USB_Defines */
N
N/** @defgroup Periph_USB_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_USB_USB_SIM_Bits USB_SIM
N  * @{
N  */
N
N#define USB_SIM_SCTDONEIE_Pos                   0
N#define USB_SIM_SCTDONEIE                       ((uint32_t)0x00000001)
N
N#define USB_SIM_SCRESUMEIE_Pos                  1
N#define USB_SIM_SCRESUMEIE                      ((uint32_t)0x00000002)
N
N#define USB_SIM_SCRESETEVIE_Pos                 2
N#define USB_SIM_SCRESETEVIE                     ((uint32_t)0x00000004)
N
N#define USB_SIM_SCSOFRECIE_Pos                  3
N#define USB_SIM_SCSOFRECIE                      ((uint32_t)0x00000008)
N
N#define USB_SIM_SCNAKSENTIE_Pos                 4
N#define USB_SIM_SCNAKSENTIE                     ((uint32_t)0x00000010)
N
N
N/** @} */ /* End of group Periph_USB_USB_SIM_Bits */
N
N/** @} */ /* End of group Periph_USB_Defines */
N
N/** @defgroup Periph_USB_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_USB_USB_HSCR_Bits USB_HSCR
N  * @{
N  */
N
N#define USB_HSCR_HOST_MODE_Pos                  0
N#define USB_HSCR_HOST_MODE                      ((uint32_t)0x00000001)
N
N#define USB_HSCR_RESET_CORE_Pos                 1
N#define USB_HSCR_RESET_CORE                     ((uint32_t)0x00000002)
N
N#define USB_HSCR_EN_TX_Pos                      2
N#define USB_HSCR_EN_TX                          ((uint32_t)0x00000004)
N
N#define USB_HSCR_EN_RX_Pos                      3
N#define USB_HSCR_EN_RX                          ((uint32_t)0x00000008)
N
N#define USB_HSCR_DP_PULLUP_Pos                  4
N#define USB_HSCR_DP_PULLUP                      ((uint32_t)0x00000010)
N
N#define USB_HSCR_DP_PULLDOWN_Pos                5
N#define USB_HSCR_DP_PULLDOWN                    ((uint32_t)0x00000020)
N
N#define USB_HSCR_DM_PULLUP_Pos                  6
N#define USB_HSCR_DM_PULLUP                      ((uint32_t)0x00000040)
N
N#define USB_HSCR_DM_PULLDOWN_Pos                7
N#define USB_HSCR_DM_PULLDOWN                    ((uint32_t)0x00000080)
N
N
N/** @} */ /* End of group Periph_USB_USB_HSCR_Bits */
N
N/** @} */ /* End of group Periph_USB_Defines */
N
N/** @defgroup Periph_USB_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_USB_USB_HSVR_Bits USB_HSVR
N  * @{
N  */
N
N#define USB_HSVR_VERSION_Pos                    0
N#define USB_HSVR_VERSION_Msk                    ((uint32_t)0x0000000F)
N
N#define USB_HSVR_REVISION_Pos                   4
N#define USB_HSVR_REVISION_Msk                   ((uint32_t)0x000000F0)
N
N
N/** @} */ /* End of group Periph_USB_USB_HSVR_Bits */
N
N/** @} */ /* End of group Periph_USB_Defines */
N
N/** @} */ /* End of group Periph_USB */
N
N/** @} */ /* End of group __1986BE9x_Peripheral_Units */
N
N/** @} */ /* End of group __CMSIS */
N
N#endif /* __1986BE9X_USB_DEFS_H */
N
N/******************* (C) COPYRIGHT 2010 Phyton *********************************
N*
N* END OF FILE 1986BE9x_usb_defs.h */
N
L 85 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x.h" 2
N#include "1986BE9x_eeprom_defs.h"
L 1 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x_eeprom_defs.h" 1
N/**
N  ******************************************************************************
N  * @file    1986BE9x_eeprom_defs.h
N  * @author  Phyton Application Team
N  * @version V1.0.0
N  * @date    24/09/2010
N  * @brief   This file contains all the Special Function Registers definitions
N  *          for the EEPROM peripheral unit used in the Milandr 1986BE9x
N  *          microcontrollers.
N  ******************************************************************************
N  * <br><br>
N  *
N  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
N  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
N  * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT
N  * OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
N  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
N  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
N  *
N  * <h2><center>&copy; COPYRIGHT 2010 Phyton</center></h2>
N  ******************************************************************************
N  * FILE 1986BE9x_eeprom_defs.h
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __1986BE9X_EEPROM_DEFS_H
N#define __1986BE9X_EEPROM_DEFS_H
N
N/** @addtogroup __CMSIS CMSIS
N  * @{
N  */
N
N/** @addtogroup __1986BE9x_Peripheral_Units 1986BE9x Peripheral Units
N  * @{
N  */
N
N/** @defgroup Periph_EEPROM EEPROM
N  * @{
N  */
N
N/** @defgroup Periph_EEPROM_Data_Structures Data Structures
N  * @{
N  */
N
N/** @defgroup Periph_EEPROM_TypeDef EEPROM_TypeDef
N  * @{
N  */
N
Ntypedef struct
N{
N  __IO uint32_t CMD;
X  volatile uint32_t CMD;
N  __IO uint32_t ADR;
X  volatile uint32_t ADR;
N  __IO uint32_t DI;
X  volatile uint32_t DI;
N  __IO uint32_t DO;
X  volatile uint32_t DO;
N  __IO uint32_t KEY;
X  volatile uint32_t KEY;
N}EEPROM_TypeDef;
N
N/** @} */ /* End of group Periph_EEPROM_TypeDef */
N
N/** @} */ /* End of group Periph_EEPROM_Data_Structures */
N
N/** @defgroup Periph_EEPROM_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_EEPROM_EEPROM_CMD_Bits EEPROM_CMD
N  * @{
N  */
N
N#define EEPROM_CMD_CON_Pos                      0
N#define EEPROM_CMD_CON                          ((uint32_t)0x00000001)
N
N#define EEPROM_CMD_WR_Pos                       1
N#define EEPROM_CMD_WR                           ((uint32_t)0x00000002)
N
N#define EEPROM_CMD_RD_Pos                       2
N#define EEPROM_CMD_RD                           ((uint32_t)0x00000004)
N
N#define EEPROM_CMD_Delay_Pos                    3
N#define EEPROM_CMD_Delay_Msk                    ((uint32_t)0x00000038)
N
N#define EEPROM_CMD_XE_Pos                       6
N#define EEPROM_CMD_XE                           ((uint32_t)0x00000040)
N
N#define EEPROM_CMD_YE_Pos                       7
N#define EEPROM_CMD_YE                           ((uint32_t)0x00000080)
N
N#define EEPROM_CMD_SE_Pos                       8
N#define EEPROM_CMD_SE                           ((uint32_t)0x00000100)
N
N#define EEPROM_CMD_IFREN_Pos                    9
N#define EEPROM_CMD_IFREN                        ((uint32_t)0x00000200)
N
N#define EEPROM_CMD_ERASE_Pos                    10
N#define EEPROM_CMD_ERASE                        ((uint32_t)0x00000400)
N
N#define EEPROM_CMD_MAS1_Pos                     11
N#define EEPROM_CMD_MAS1                         ((uint32_t)0x00000800)
N
N#define EEPROM_CMD_PROG_Pos                     12
N#define EEPROM_CMD_PROG                         ((uint32_t)0x00001000)
N
N#define EEPROM_CMD_NVSTR_Pos                    13
N#define EEPROM_CMD_NVSTR                        ((uint32_t)0x00002000)
N
N
N/** @} */ /* End of group Periph_EEPROM_EEPROM_CMD_Bits */
N
N/** @} */ /* End of group Periph_EEPROM_Defines */
N
N/** @} */ /* End of group Periph_EEPROM */
N
N/** @} */ /* End of group __1986BE9x_Peripheral_Units */
N
N/** @} */ /* End of group __CMSIS */
N
N#endif /* __1986BE9X_EEPROM_DEFS_H */
N
N/******************* (C) COPYRIGHT 2010 Phyton *********************************
N*
N* END OF FILE 1986BE9x_eeprom_defs.h */
L 86 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x.h" 2
N#include "1986BE9x_rst_clk_defs.h"
L 1 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x_rst_clk_defs.h" 1
N/**
N  ******************************************************************************
N  * @file    1986BE9x_rst_clk_defs.h
N  * @author  Phyton Application Team
N  * @version V1.0.0
N  * @date    31/05/2011
N  * @brief   This file contains all the Special Function Registers definitions
N  *          for the RST_CLK peripheral unit used in the Milandr 1986BE9x
N  *          microcontrollers.
N  ******************************************************************************
N  * <br><br>
N  *
N  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
N  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
N  * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT
N  * OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
N  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
N  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
N  *
N  * <h2><center>&copy; COPYRIGHT 2010 Phyton</center></h2>
N  ******************************************************************************
N  * FILE 1986BE9x_rst_clk_defs.h
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __1986BE9X_RST_CLK_DEFS_H
N#define __1986BE9X_RST_CLK_DEFS_H
N
N/** @addtogroup __CMSIS CMSIS
N  * @{
N  */
N
N/** @addtogroup __1986BE9x_Peripheral_Units 1986BE9x Peripheral Units
N  * @{
N  */
N
N/** @defgroup Periph_RST_CLK RST_CLK
N  * @{
N  */
N
N/** @defgroup Periph_RST_CLK_Data_Structures Data Structures
N  * @{
N  */
N
N/** @defgroup Periph_RST_CLK_TypeDef RST_CLK_TypeDef
N  * @{
N  */
N
Ntypedef struct
N{
N  __IO uint32_t CLOCK_STATUS;
X  volatile uint32_t CLOCK_STATUS;
N  __IO uint32_t PLL_CONTROL;
X  volatile uint32_t PLL_CONTROL;
N  __IO uint32_t HS_CONTROL;
X  volatile uint32_t HS_CONTROL;
N  __IO uint32_t CPU_CLOCK;
X  volatile uint32_t CPU_CLOCK;
N  __IO uint32_t USB_CLOCK;
X  volatile uint32_t USB_CLOCK;
N  __IO uint32_t ADC_MCO_CLOCK;
X  volatile uint32_t ADC_MCO_CLOCK;
N  __IO uint32_t RTC_CLOCK;
X  volatile uint32_t RTC_CLOCK;
N  __IO uint32_t PER_CLOCK;
X  volatile uint32_t PER_CLOCK;
N  __IO uint32_t CAN_CLOCK;
X  volatile uint32_t CAN_CLOCK;
N  __IO uint32_t TIM_CLOCK;
X  volatile uint32_t TIM_CLOCK;
N  __IO uint32_t UART_CLOCK;
X  volatile uint32_t UART_CLOCK;
N  __IO uint32_t SSP_CLOCK;
X  volatile uint32_t SSP_CLOCK;
N}RST_CLK_TypeDef;
N
N/** @} */ /* End of group Periph_RST_CLK_TypeDef */
N
N/** @} */ /* End of group Periph_RST_CLK_Data_Structures */
N
N/** @defgroup Periph_RST_CLK_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_RST_CLK_RST_CLK_CLOCK_STATUS_Bits RST_CLK_CLOCK_STATUS
N  * @{
N  */
N
N#define RST_CLK_CLOCK_STATUS_PLL_USB_RDY_Pos    0
N#define RST_CLK_CLOCK_STATUS_PLL_USB_RDY        ((uint32_t)0x00000001)
N
N#define RST_CLK_CLOCK_STATUS_PLL_CPU_RDY_Pos    1
N#define RST_CLK_CLOCK_STATUS_PLL_CPU_RDY        ((uint32_t)0x00000002)
N
N#define RST_CLK_CLOCK_STATUS_HSE_RDY_Pos        2
N#define RST_CLK_CLOCK_STATUS_HSE_RDY            ((uint32_t)0x00000004)
N
N
N/** @} */ /* End of group Periph_RST_CLK_RST_CLK_CLOCK_STATUS_Bits */
N
N/** @} */ /* End of group Periph_RST_CLK_Defines */
N
N/** @defgroup Periph_RST_CLK_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_RST_CLK_RST_CLK_PLL_CONTROL_Bits RST_CLK_PLL_CONTROL
N  * @{
N  */
N
N#define RST_CLK_PLL_CONTROL_PLL_USB_ON_Pos      0
N#define RST_CLK_PLL_CONTROL_PLL_USB_ON          ((uint32_t)0x00000001)
N
N#define RST_CLK_PLL_CONTROL_PLL_USB_RLD_Pos     1
N#define RST_CLK_PLL_CONTROL_PLL_USB_RLD         ((uint32_t)0x00000002)
N
N#define RST_CLK_PLL_CONTROL_PLL_CPU_ON_Pos      2
N#define RST_CLK_PLL_CONTROL_PLL_CPU_ON          ((uint32_t)0x00000004)
N
N#define RST_CLK_PLL_CONTROL_PLL_CPU_PLD_Pos     3
N#define RST_CLK_PLL_CONTROL_PLL_CPU_PLD         ((uint32_t)0x00000008)
N
N#define RST_CLK_PLL_CONTROL_PLL_USB_MUL_Pos     4
N#define RST_CLK_PLL_CONTROL_PLL_USB_MUL_Msk     ((uint32_t)0x000000F0)
N
N#define RST_CLK_PLL_CONTROL_PLL_CPU_MUL_Pos     8
N#define RST_CLK_PLL_CONTROL_PLL_CPU_MUL_Msk     ((uint32_t)0x00000F00)
N
N
N/** @} */ /* End of group Periph_RST_CLK_RST_CLK_PLL_CONTROL_Bits */
N
N/** @} */ /* End of group Periph_RST_CLK_Defines */
N
N/** @defgroup Periph_RST_CLK_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_RST_CLK_RST_CLK_HS_CONTROL_Bits RST_CLK_HS_CONTROL
N  * @{
N  */
N
N#define RST_CLK_HS_CONTROL_HSE_ON_Pos           0
N#define RST_CLK_HS_CONTROL_HSE_ON               ((uint32_t)0x00000001)
N
N#define RST_CLK_HS_CONTROL_HSE_BYP_Pos          1
N#define RST_CLK_HS_CONTROL_HSE_BYP              ((uint32_t)0x00000002)
N
N
N/** @} */ /* End of group Periph_RST_CLK_RST_CLK_HS_CONTROL_Bits */
N
N/** @} */ /* End of group Periph_RST_CLK_Defines */
N
N/** @defgroup Periph_RST_CLK_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_RST_CLK_RST_CLK_CPU_CLOCK_Bits RST_CLK_CPU_CLOCK
N  * @{
N  */
N
N#define RST_CLK_CPU_CLOCK_CPU_C1_SEL_Pos        0
N#define RST_CLK_CPU_CLOCK_CPU_C1_SEL_Msk        ((uint32_t)0x00000003)
N
N#define RST_CLK_CPU_CLOCK_CPU_C2_SEL_Pos        2
N#define RST_CLK_CPU_CLOCK_CPU_C2_SEL            ((uint32_t)0x00000004)
N
N#define RST_CLK_CPU_CLOCK_CPU_C3_SEL_Pos        4
N#define RST_CLK_CPU_CLOCK_CPU_C3_SEL_Msk        ((uint32_t)0x000000F0)
N
N#define RST_CLK_CPU_CLOCK_HCLK_SEL_Pos          8
N#define RST_CLK_CPU_CLOCK_HCLK_SEL_Msk          ((uint32_t)0x00000300)
N
N
N/** @} */ /* End of group Periph_RST_CLK_RST_CLK_CPU_CLOCK_Bits */
N
N/** @} */ /* End of group Periph_RST_CLK_Defines */
N
N/** @defgroup Periph_RST_CLK_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_RST_CLK_RST_CLK_USB_CLOCK_Bits RST_CLK_USB_CLOCK
N  * @{
N  */
N
N#define RST_CLK_USB_CLOCK_USB_C1_SEL_Pos        0
N#define RST_CLK_USB_CLOCK_USB_C1_SEL_Msk        ((uint32_t)0x00000003)
N
N#define RST_CLK_USB_CLOCK_USB_C2_SEL_Pos        2
N#define RST_CLK_USB_CLOCK_USB_C2_SEL            ((uint32_t)0x00000004)
N
N#define RST_CLK_USB_CLOCK_USB_C3_SEL_Pos        4
N#define RST_CLK_USB_CLOCK_USB_C3_SEL            ((uint32_t)0x00000010)
N
N#define RST_CLK_USB_CLOCK_USB_CLK_EN_Pos        8
N#define RST_CLK_USB_CLOCK_USB_CLK_EN            ((uint32_t)0x00000100)
N
N
N/** @} */ /* End of group Periph_RST_CLK_RST_CLK_USB_CLOCK_Bits */
N
N/** @} */ /* End of group Periph_RST_CLK_Defines */
N
N/** @defgroup Periph_RST_CLK_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_RST_CLK_RST_CLK_ADC_MCO_CLOCK_Bits RST_CLK_ADC_MCO_CLOCK
N  * @{
N  */
N
N#define RST_CLK_ADC_MCO_CLOCK_ADC_C1_SEL_Pos    0
N#define RST_CLK_ADC_MCO_CLOCK_ADC_C1_SEL_Msk    ((uint32_t)0x00000003)
N
N#define RST_CLK_ADC_MCO_CLOCK_ADC_C2_SEL_Pos    4
N#define RST_CLK_ADC_MCO_CLOCK_ADC_C2_SEL_Msk    ((uint32_t)0x00000030)
N
N#define RST_CLK_ADC_MCO_CLOCK_ADC_C3_SEL_Pos    8
N#define RST_CLK_ADC_MCO_CLOCK_ADC_C3_SEL_Msk    ((uint32_t)0x00000F00)
N
N#define RST_CLK_ADC_MCO_CLOCK_MCO_EN_Pos        12
N#define RST_CLK_ADC_MCO_CLOCK_MCO_EN            ((uint32_t)0x00001000)
N
N#define RST_CLK_ADC_MCO_CLOCK_ADC_CLK_EN_Pos    13
N#define RST_CLK_ADC_MCO_CLOCK_ADC_CLK_EN        ((uint32_t)0x00002000)
N
N
N/** @} */ /* End of group Periph_RST_CLK_RST_CLK_ADC_MCO_CLOCK_Bits */
N
N/** @} */ /* End of group Periph_RST_CLK_Defines */
N
N/** @defgroup Periph_RST_CLK_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_RST_CLK_RST_CLK_RTC_CLOCK_Bits RST_CLK_RTC_CLOCK
N  * @{
N  */
N
N#define RST_CLK_RTC_CLOCK_HSE_SEL_Pos           0
N#define RST_CLK_RTC_CLOCK_HSE_SEL_Msk           ((uint32_t)0x0000000F)
N
N#define RST_CLK_RTC_CLOCK_HSI_SEL_Pos           4
N#define RST_CLK_RTC_CLOCK_HSI_SEL_Msk           ((uint32_t)0x000000F0)
N
N#define RST_CLK_RTC_CLOCK_HSE_RTC_EN_Pos        8
N#define RST_CLK_RTC_CLOCK_HSE_RTC_EN            ((uint32_t)0x00000100)
N
N#define RST_CLK_RTC_CLOCK_HSI_RTC_EN_Pos        9
N#define RST_CLK_RTC_CLOCK_HSI_RTC_EN            ((uint32_t)0x00000200)
N
N
N/** @} */ /* End of group Periph_RST_CLK_RST_CLK_RTC_CLOCK_Bits */
N
N/** @} */ /* End of group Periph_RST_CLK_Defines */
N
N/** @defgroup Periph_RST_CLK_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_RST_CLK_RST_CLK_CAN_CLOCK_Bits RST_CLK_CAN_CLOCK
N  * @{
N  */
N
N#define RST_CLK_CAN_CLOCK_CAN1_BRG_Pos          0
N#define RST_CLK_CAN_CLOCK_CAN1_BRG_Msk          ((uint32_t)0x000000FF)
N
N#define RST_CLK_CAN_CLOCK_CAN2_BRG_Pos          8
N#define RST_CLK_CAN_CLOCK_CAN2_BRG_Msk          ((uint32_t)0x0000FF00)
N
N#define RST_CLK_CAN_CLOCK_CAN1_CLK_EN_Pos       24
N#define RST_CLK_CAN_CLOCK_CAN1_CLK_EN           ((uint32_t)0x01000000)
N
N#define RST_CLK_CAN_CLOCK_CAN2_CLK_EN_Pos       25
N#define RST_CLK_CAN_CLOCK_CAN2_CLK_EN           ((uint32_t)0x02000000)
N
N
N/** @} */ /* End of group Periph_RST_CLK_RST_CLK_CAN_CLOCK_Bits */
N
N/** @} */ /* End of group Periph_RST_CLK_Defines */
N
N/** @defgroup Periph_RST_CLK_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_RST_CLK_RST_CLK_TIM_CLOCK_Bits RST_CLK_TIM_CLOCK
N  * @{
N  */
N
N#define RST_CLK_TIM_CLOCK_TIM1_BRG_Pos          0
N#define RST_CLK_TIM_CLOCK_TIM1_BRG_Msk          ((uint32_t)0x000000FF)
N
N#define RST_CLK_TIM_CLOCK_TIM2_BRG_Pos          8
N#define RST_CLK_TIM_CLOCK_TIM2_BRG_Msk          ((uint32_t)0x0000FF00)
N
N#define RST_CLK_TIM_CLOCK_TIM3_BRG_Pos          16
N#define RST_CLK_TIM_CLOCK_TIM3_BRG_Msk          ((uint32_t)0x00FF0000)
N
N#define RST_CLK_TIM_CLOCK_TIM1_CLK_EN_Pos       24
N#define RST_CLK_TIM_CLOCK_TIM1_CLK_EN           ((uint32_t)0x01000000)
N
N#define RST_CLK_TIM_CLOCK_TIM2_CLK_EN_Pos       25
N#define RST_CLK_TIM_CLOCK_TIM2_CLK_EN           ((uint32_t)0x02000000)
N
N#define RST_CLK_TIM_CLOCK_TIM3_CLK_EN_Pos       26
N#define RST_CLK_TIM_CLOCK_TIM3_CLK_EN           ((uint32_t)0x04000000)
N
N
N/** @} */ /* End of group Periph_RST_CLK_RST_CLK_TIM_CLOCK_Bits */
N
N/** @} */ /* End of group Periph_RST_CLK_Defines */
N
N/** @defgroup Periph_RST_CLK_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_RST_CLK_RST_CLK_UART_CLOCK_Bits RST_CLK_UART_CLOCK
N  * @{
N  */
N
N#define RST_CLK_UART_CLOCK_UART1_BRG_Pos        0
N#define RST_CLK_UART_CLOCK_UART1_BRG_Msk        ((uint32_t)0x000000FF)
N
N#define RST_CLK_UART_CLOCK_UART2_BRG_Pos        8
N#define RST_CLK_UART_CLOCK_UART2_BRG_Msk        ((uint32_t)0x0000FF00)
N
N#define RST_CLK_UART_CLOCK_UART1_CLK_EN_Pos     24
N#define RST_CLK_UART_CLOCK_UART1_CLK_EN         ((uint32_t)0x01000000)
N
N#define RST_CLK_UART_CLOCK_UART2_CLK_EN_Pos     25
N#define RST_CLK_UART_CLOCK_UART2_CLK_EN         ((uint32_t)0x02000000)
N
N
N/** @} */ /* End of group Periph_RST_CLK_RST_CLK_UART_CLOCK_Bits */
N
N/** @} */ /* End of group Periph_RST_CLK_Defines */
N
N/** @defgroup Periph_RST_CLK_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_RST_CLK_RST_CLK_SSP_CLOCK_Bits RST_CLK_SSP_CLOCK
N  * @{
N  */
N
N#define RST_CLK_SSP_CLOCK_SSP1_BRG_Pos          0
N#define RST_CLK_SSP_CLOCK_SSP1_BRG_Msk          ((uint32_t)0x000000FF)
N
N#define RST_CLK_SSP_CLOCK_SSP2_BRG_Pos          8
N#define RST_CLK_SSP_CLOCK_SSP2_BRG_Msk          ((uint32_t)0x0000FF00)
N
N#define RST_CLK_SSP_CLOCK_SSP1_CLK_EN_Pos       24
N#define RST_CLK_SSP_CLOCK_SSP1_CLK_EN           ((uint32_t)0x01000000)
N
N#define RST_CLK_SSP_CLOCK_SSP2_CLK_EN_Pos       25
N#define RST_CLK_SSP_CLOCK_SSP2_CLK_EN           ((uint32_t)0x02000000)
N
N
N/** @} */ /* End of group Periph_RST_CLK_RST_CLK_SSP_CLOCK_Bits */
N
N/** @} */ /* End of group Periph_RST_CLK_Defines */
N
N/** @} */ /* End of group Periph_RST_CLK */
N
N/** @} */ /* End of group __1986BE9x_Peripheral_Units */
N
N/** @} */ /* End of group __CMSIS */
N
N#endif /* __1986BE9X_RST_CLK_DEFS_H */
N
N/******************* (C) COPYRIGHT 2010 Phyton *********************************
N*
N* END OF FILE 1986BE9x_rst_clk_defs.h */
L 87 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x.h" 2
N#include "1986BE9x_dma_defs.h"
L 1 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x_dma_defs.h" 1
N/**
N  ******************************************************************************
N  * @file    1986BE9x_dma_defs.h
N  * @author  Phyton Application Team
N  * @version V1.0.0
N  * @date    24/09/2010
N  * @brief   This file contains all the Special Function Registers definitions
N  *          for the DMA peripheral unit used in the Milandr 1986BE9x
N  *          microcontrollers.
N  ******************************************************************************
N  * <br><br>
N  *
N  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
N  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
N  * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT
N  * OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
N  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
N  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
N  *
N  * <h2><center>&copy; COPYRIGHT 2010 Phyton</center></h2>
N  ******************************************************************************
N  * FILE 1986BE9x_dma_defs.h
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __1986BE9X_DMA_DEFS_H
N#define __1986BE9X_DMA_DEFS_H
N
N/** @addtogroup __CMSIS CMSIS
N  * @{
N  */
N
N/** @addtogroup __1986BE9x_Peripheral_Units 1986BE9x Peripheral Units
N  * @{
N  */
N
N/** @defgroup Periph_DMA DMA
N  * @{
N  */
N
N/** @defgroup Periph_DMA_Data_Structures Data Structures
N  * @{
N  */
N
N/** @defgroup Periph_DMA_TypeDef DMA_TypeDef
N  * @{
N  */
N
Ntypedef struct
N{
N  __IO uint32_t STATUS;
X  volatile uint32_t STATUS;
N  __IO uint32_t CFG;
X  volatile uint32_t CFG;
N  __IO uint32_t CTRL_BASE_PTR;
X  volatile uint32_t CTRL_BASE_PTR;
N  __IO uint32_t ALT_CTRL_BASE_PTR;
X  volatile uint32_t ALT_CTRL_BASE_PTR;
N  __IO uint32_t WAITONREQ_STATUS;
X  volatile uint32_t WAITONREQ_STATUS;
N  __IO uint32_t CHNL_SW_REQUEST;
X  volatile uint32_t CHNL_SW_REQUEST;
N  __IO uint32_t CHNL_USEBURST_SET;
X  volatile uint32_t CHNL_USEBURST_SET;
N  __IO uint32_t CHNL_USEBURST_CLR;
X  volatile uint32_t CHNL_USEBURST_CLR;
N  __IO uint32_t CHNL_REQ_MASK_SET;
X  volatile uint32_t CHNL_REQ_MASK_SET;
N  __IO uint32_t CHNL_REQ_MASK_CLR;
X  volatile uint32_t CHNL_REQ_MASK_CLR;
N  __IO uint32_t CHNL_ENABLE_SET;
X  volatile uint32_t CHNL_ENABLE_SET;
N  __IO uint32_t CHNL_ENABLE_CLR;
X  volatile uint32_t CHNL_ENABLE_CLR;
N  __IO uint32_t CHNL_PRI_ALT_SET;
X  volatile uint32_t CHNL_PRI_ALT_SET;
N  __IO uint32_t CHNL_PRI_ALT_CLR;
X  volatile uint32_t CHNL_PRI_ALT_CLR;
N  __IO uint32_t CHNL_PRIORITY_SET;
X  volatile uint32_t CHNL_PRIORITY_SET;
N  __IO uint32_t CHNL_PRIORITY_CLR;
X  volatile uint32_t CHNL_PRIORITY_CLR;
N       uint32_t RESERVED0[3];
N  __IO uint32_t ERR_CLR;
X  volatile uint32_t ERR_CLR;
N}DMA_TypeDef;
N
N/** @} */ /* End of group Periph_DMA_TypeDef */
N
N/** @} */ /* End of group Periph_DMA_Data_Structures */
N
N/** @defgroup Periph_DMA_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_DMA_DMA_STATUS_Bits DMA_STATUS
N  * @{
N  */
N
N#define DMA_STATUS_MASTER_ENABLE_Pos            0
N#define DMA_STATUS_MASTER_ENABLE                ((uint32_t)0x00000001)
N
N#define DMA_STATUS_STATE_Pos                    4
N#define DMA_STATUS_STATE_Msk                    ((uint32_t)0x000000F0)
N
N#define DMA_STATUS_CHNLS_MINUS1_Pos             16
N#define DMA_STATUS_CHNLS_MINUS1_Msk             ((uint32_t)0x001F0000)
N
N#define DMA_STATUS_TEST_STATUS_Pos              28
N#define DMA_STATUS_TEST_STATUS_Msk              ((uint32_t)0xF0000000)
N
N
N/** @} */ /* End of group Periph_DMA_DMA_STATUS_Bits */
N
N/** @} */ /* End of group Periph_DMA_Defines */
N
N/** @defgroup Periph_DMA_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_DMA_DMA_CFG_Bits DMA_CFG
N  * @{
N  */
N
N#define DMA_CFG_MASTER_ENABLE_Pos               0
N#define DMA_CFG_MASTER_ENABLE                   ((uint32_t)0x00000001)
N
N#define DMA_CFG_CHNL_PROT_CTRL_Pos              5
N#define DMA_CFG_CHNL_PROT_CTRL_Msk              ((uint32_t)0x000000E0)
N
N
N/** @} */ /* End of group Periph_DMA_DMA_CFG_Bits */
N
N/** @} */ /* End of group Periph_DMA_Defines */
N
N/** @} */ /* End of group Periph_DMA */
N
N/** @} */ /* End of group __1986BE9x_Peripheral_Units */
N
N/** @} */ /* End of group __CMSIS */
N
N#endif /* __1986BE9X_DMA_DEFS_H */
N
N/******************* (C) COPYRIGHT 2010 Phyton *********************************
N*
N* END OF FILE 1986BE9x_dma_defs.h */
L 88 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x.h" 2
N#include "1986BE9x_uart_defs.h"
L 1 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x_uart_defs.h" 1
N/**
N  ******************************************************************************
N  * @file    1986BE9x_uart_defs.h
N  * @author  Phyton Application Team
N  * @version V1.0.0
N  * @date    24/09/2010
N  * @brief   This file contains all the Special Function Registers definitions
N  *          for the UART peripheral unit used in the Milandr 1986BE9x
N  *          microcontrollers.
N  ******************************************************************************
N  * <br><br>
N  *
N  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
N  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
N  * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT
N  * OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
N  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
N  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
N  *
N  * <h2><center>&copy; COPYRIGHT 2010 Phyton</center></h2>
N  ******************************************************************************
N  * FILE 1986BE9x_uart_defs.h
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __1986BE9X_UART_DEFS_H
N#define __1986BE9X_UART_DEFS_H
N
N/** @addtogroup __CMSIS CMSIS
N  * @{
N  */
N
N/** @addtogroup __1986BE9x_Peripheral_Units 1986BE9x Peripheral Units
N  * @{
N  */
N
N/** @defgroup Periph_UART UART
N  * @{
N  */
N
N/** @defgroup Periph_UART_Data_Structures Data Structures
N  * @{
N  */
N
N/** @defgroup Periph_UART_TypeDef UART_TypeDef
N  * @{
N  */
N
Ntypedef struct
N{
N  __IO uint32_t DR;
X  volatile uint32_t DR;
N  __IO uint32_t RSR_ECR;
X  volatile uint32_t RSR_ECR;
N       uint32_t RESERVED0[4];
N  __IO uint32_t FR;
X  volatile uint32_t FR;
N       uint32_t RESERVED1;
N  __IO uint32_t ILPR;
X  volatile uint32_t ILPR;
N  __IO uint32_t IBRD;
X  volatile uint32_t IBRD;
N  __IO uint32_t FBRD;
X  volatile uint32_t FBRD;
N  __IO uint32_t LCR_H;
X  volatile uint32_t LCR_H;
N  __IO uint32_t CR;
X  volatile uint32_t CR;
N  __IO uint32_t IFLS;
X  volatile uint32_t IFLS;
N  __IO uint32_t IMSC;
X  volatile uint32_t IMSC;
N  __IO uint32_t RIS;
X  volatile uint32_t RIS;
N  __IO uint32_t MIS;
X  volatile uint32_t MIS;
N  __IO uint32_t ICR;
X  volatile uint32_t ICR;
N  __IO uint32_t DMACR;
X  volatile uint32_t DMACR;
N}UART_TypeDef;
N
N/** @} */ /* End of group Periph_UART_TypeDef */
N
N/** @} */ /* End of group Periph_UART_Data_Structures */
N
N/** @defgroup Periph_UART_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_UART_UART_DR_Bits UART_DR
N  * @{
N  */
N
N#define UART_DR_DATA_Pos                        0
N#define UART_DR_DATA_Msk                        ((uint32_t)0x000000FF)
N
N#define UART_DR_FE_Pos                          8
N#define UART_DR_FE                              ((uint32_t)0x00000100)
N
N#define UART_DR_PE_Pos                          9
N#define UART_DR_PE                              ((uint32_t)0x00000200)
N
N#define UART_DR_BE_Pos                          10
N#define UART_DR_BE                              ((uint32_t)0x00000400)
N
N#define UART_DR_OE_Pos                          11
N#define UART_DR_OE                              ((uint32_t)0x00000800)
N
N
N/** @} */ /* End of group Periph_UART_UART_DR_Bits */
N
N/** @} */ /* End of group Periph_UART_Defines */
N
N/** @defgroup Periph_UART_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_UART_UART_RSR_ECR_Bits UART_RSR_ECR
N  * @{
N  */
N
N#define UART_RSR_ECR_FE_Pos                     0
N#define UART_RSR_ECR_FE                         ((uint32_t)0x00000001)
N
N#define UART_RSR_ECR_PE_Pos                     1
N#define UART_RSR_ECR_PE                         ((uint32_t)0x00000002)
N
N#define UART_RSR_ECR_BE_Pos                     2
N#define UART_RSR_ECR_BE                         ((uint32_t)0x00000004)
N
N#define UART_RSR_ECR_OE_Pos                     3
N#define UART_RSR_ECR_OE                         ((uint32_t)0x00000008)
N
N
N/** @} */ /* End of group Periph_UART_UART_RSR_ECR_Bits */
N
N/** @} */ /* End of group Periph_UART_Defines */
N
N/** @defgroup Periph_UART_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_UART_UART_FR_Bits UART_FR
N  * @{
N  */
N
N#define UART_FR_CTS_Pos                         0
N#define UART_FR_CTS                             ((uint32_t)0x00000001)
N
N#define UART_FR_DSR_Pos                         1
N#define UART_FR_DSR                             ((uint32_t)0x00000002)
N
N#define UART_FR_DCD_Pos                         2
N#define UART_FR_DCD                             ((uint32_t)0x00000004)
N
N#define UART_FR_BUSY_Pos                        3
N#define UART_FR_BUSY                            ((uint32_t)0x00000008)
N
N#define UART_FR_RXFE_Pos                        4
N#define UART_FR_RXFE                            ((uint32_t)0x00000010)
N
N#define UART_FR_TXFF_Pos                        5
N#define UART_FR_TXFF                            ((uint32_t)0x00000020)
N
N#define UART_FR_RXFF_Pos                        6
N#define UART_FR_RXFF                            ((uint32_t)0x00000040)
N
N#define UART_FR_TXFE_Pos                        7
N#define UART_FR_TXFE                            ((uint32_t)0x00000080)
N
N#define UART_FR_RI_Pos                          8
N#define UART_FR_RI                              ((uint32_t)0x00000100)
N
N
N/** @} */ /* End of group Periph_UART_UART_FR_Bits */
N
N/** @} */ /* End of group Periph_UART_Defines */
N
N/** @defgroup Periph_UART_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_UART_UART_LCR_H_Bits UART_LCR_H
N  * @{
N  */
N
N#define UART_LCR_H_BRK_Pos                      0
N#define UART_LCR_H_BRK                          ((uint32_t)0x00000001)
N
N#define UART_LCR_H_PEN_Pos                      1
N#define UART_LCR_H_PEN                          ((uint32_t)0x00000002)
N
N#define UART_LCR_H_EPS_Pos                      2
N#define UART_LCR_H_EPS                          ((uint32_t)0x00000004)
N
N#define UART_LCR_H_STP2_Pos                     3
N#define UART_LCR_H_STP2                         ((uint32_t)0x00000008)
N
N#define UART_LCR_H_FEN_Pos                      4
N#define UART_LCR_H_FEN                          ((uint32_t)0x00000010)
N
N#define UART_LCR_H_WLEN_Pos                     5
N#define UART_LCR_H_WLEN_Msk                     ((uint32_t)0x00000060)
N
N#define UART_LCR_H_SPS_Pos                      7
N#define UART_LCR_H_SPS                          ((uint32_t)0x00000080)
N
N
N/** @} */ /* End of group Periph_UART_UART_LCR_H_Bits */
N
N/** @} */ /* End of group Periph_UART_Defines */
N
N/** @defgroup Periph_UART_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_UART_UART_CR_Bits UART_CR
N  * @{
N  */
N
N#define UART_CR_UARTEN_Pos                      0
N#define UART_CR_UARTEN                          ((uint32_t)0x00000001)
N
N#define UART_CR_SIREN_Pos                       1
N#define UART_CR_SIREN                           ((uint32_t)0x00000002)
N
N#define UART_CR_SIRLP_Pos                       2
N#define UART_CR_SIRLP                           ((uint32_t)0x00000004)
N
N#define UART_CR_LBE_Pos                         7
N#define UART_CR_LBE                             ((uint32_t)0x00000080)
N
N#define UART_CR_TXE_Pos                         8
N#define UART_CR_TXE                             ((uint32_t)0x00000100)
N
N#define UART_CR_RXE_Pos                         9
N#define UART_CR_RXE                             ((uint32_t)0x00000200)
N
N#define UART_CR_DTR_Pos                         10
N#define UART_CR_DTR                             ((uint32_t)0x00000400)
N
N#define UART_CR_RTS_Pos                         11
N#define UART_CR_RTS                             ((uint32_t)0x00000800)
N
N#define UART_CR_Out1_Pos                        12
N#define UART_CR_Out1                            ((uint32_t)0x00001000)
N
N#define UART_CR_Out2_Pos                        13
N#define UART_CR_Out2                            ((uint32_t)0x00002000)
N
N#define UART_CR_RTSEn_Pos                       14
N#define UART_CR_RTSEn                           ((uint32_t)0x00004000)
N
N#define UART_CR_CTSEn_Pos                       15
N#define UART_CR_CTSEn                           ((uint32_t)0x00008000)
N
N
N/** @} */ /* End of group Periph_UART_UART_CR_Bits */
N
N/** @} */ /* End of group Periph_UART_Defines */
N
N/** @defgroup Periph_UART_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_UART_UART_IFLS_Bits UART_IFLS
N  * @{
N  */
N
N#define UART_IFLS_TXIFLSEL_Pos                  0
N#define UART_IFLS_TXIFLSEL_Msk                  ((uint32_t)0x00000007)
N
N#define UART_IFLS_RXIFLSEL_Pos                  3
N#define UART_IFLS_RXIFLSEL_Msk                  ((uint32_t)0x00000038)
N
N
N/** @} */ /* End of group Periph_UART_UART_IFLS_Bits */
N
N/** @} */ /* End of group Periph_UART_Defines */
N
N/** @defgroup Periph_UART_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_UART_UART_IMSC_Bits UART_IMSC
N  * @{
N  */
N
N#define UART_IMSC_RIMIM_Pos                     0
N#define UART_IMSC_RIMIM                         ((uint32_t)0x00000001)
N
N#define UART_IMSC_CTSMIM_Pos                    1
N#define UART_IMSC_CTSMIM                        ((uint32_t)0x00000002)
N
N#define UART_IMSC_DCDMIM_Pos                    2
N#define UART_IMSC_DCDMIM                        ((uint32_t)0x00000004)
N
N#define UART_IMSC_DSRMIM_Pos                    3
N#define UART_IMSC_DSRMIM                        ((uint32_t)0x00000008)
N
N#define UART_IMSC_RXIM_Pos                      4
N#define UART_IMSC_RXIM                          ((uint32_t)0x00000010)
N
N#define UART_IMSC_TXIM_Pos                      5
N#define UART_IMSC_TXIM                          ((uint32_t)0x00000020)
N
N#define UART_IMSC_RTIM_Pos                      6
N#define UART_IMSC_RTIM                          ((uint32_t)0x00000040)
N
N#define UART_IMSC_FEIM_Pos                      7
N#define UART_IMSC_FEIM                          ((uint32_t)0x00000080)
N
N#define UART_IMSC_PEIM_Pos                      8
N#define UART_IMSC_PEIM                          ((uint32_t)0x00000100)
N
N#define UART_IMSC_BEIM_Pos                      9
N#define UART_IMSC_BEIM                          ((uint32_t)0x00000200)
N
N#define UART_IMSC_OEIM_Pos                      10
N#define UART_IMSC_OEIM                          ((uint32_t)0x00000400)
N
N
N/** @} */ /* End of group Periph_UART_UART_IMSC_Bits */
N
N/** @} */ /* End of group Periph_UART_Defines */
N
N/** @defgroup Periph_UART_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_UART_UART_RIS_Bits UART_RIS
N  * @{
N  */
N
N#define UART_RIS_RIRMIS_Pos                     0
N#define UART_RIS_RIRMIS                         ((uint32_t)0x00000001)
N
N#define UART_RIS_CTSRMIS_Pos                    1
N#define UART_RIS_CTSRMIS                        ((uint32_t)0x00000002)
N
N#define UART_RIS_DCDRMIS_Pos                    2
N#define UART_RIS_DCDRMIS                        ((uint32_t)0x00000004)
N
N#define UART_RIS_DSRRMIS_Pos                    3
N#define UART_RIS_DSRRMIS                        ((uint32_t)0x00000008)
N
N#define UART_RIS_RXRIS_Pos                      4
N#define UART_RIS_RXRIS                          ((uint32_t)0x00000010)
N
N#define UART_RIS_TXRIS_Pos                      5
N#define UART_RIS_TXRIS                          ((uint32_t)0x00000020)
N
N#define UART_RIS_RTRIS_Pos                      6
N#define UART_RIS_RTRIS                          ((uint32_t)0x00000040)
N
N#define UART_RIS_FERIS_Pos                      7
N#define UART_RIS_FERIS                          ((uint32_t)0x00000080)
N
N#define UART_RIS_PERIS_Pos                      8
N#define UART_RIS_PERIS                          ((uint32_t)0x00000100)
N
N#define UART_RIS_BERIS_Pos                      9
N#define UART_RIS_BERIS                          ((uint32_t)0x00000200)
N
N#define UART_RIS_OERIS_Pos                      10
N#define UART_RIS_OERIS                          ((uint32_t)0x00000400)
N
N
N/** @} */ /* End of group Periph_UART_UART_RIS_Bits */
N
N/** @} */ /* End of group Periph_UART_Defines */
N
N/** @defgroup Periph_UART_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_UART_UART_MIS_Bits UART_MIS
N  * @{
N  */
N
N#define UART_MIS_RIMMIS_Pos                     0
N#define UART_MIS_RIMMIS                         ((uint32_t)0x00000001)
N
N#define UART_MIS_CTSMMIS_Pos                    1
N#define UART_MIS_CTSMMIS                        ((uint32_t)0x00000002)
N
N#define UART_MIS_DCDMMIS_Pos                    2
N#define UART_MIS_DCDMMIS                        ((uint32_t)0x00000004)
N
N#define UART_MIS_DSRMMIS_Pos                    3
N#define UART_MIS_DSRMMIS                        ((uint32_t)0x00000008)
N
N#define UART_MIS_RXMIS_Pos                      4
N#define UART_MIS_RXMIS                          ((uint32_t)0x00000010)
N
N#define UART_MIS_TXMIS_Pos                      5
N#define UART_MIS_TXMIS                          ((uint32_t)0x00000020)
N
N#define UART_MIS_RTMIS_Pos                      6
N#define UART_MIS_RTMIS                          ((uint32_t)0x00000040)
N
N#define UART_MIS_FEMIS_Pos                      7
N#define UART_MIS_FEMIS                          ((uint32_t)0x00000080)
N
N#define UART_MIS_PEMIS_Pos                      8
N#define UART_MIS_PEMIS                          ((uint32_t)0x00000100)
N
N#define UART_MIS_BEMIS_Pos                      9
N#define UART_MIS_BEMIS                          ((uint32_t)0x00000200)
N
N#define UART_MIS_OEMIS_Pos                      10
N#define UART_MIS_OEMIS                          ((uint32_t)0x00000400)
N
N
N/** @} */ /* End of group Periph_UART_UART_MIS_Bits */
N
N/** @} */ /* End of group Periph_UART_Defines */
N
N/** @defgroup Periph_UART_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_UART_UART_ICR_Bits UART_ICR
N  * @{
N  */
N
N#define UART_ICR_RIMIC_Pos                      0
N#define UART_ICR_RIMIC                          ((uint32_t)0x00000001)
N
N#define UART_ICR_CTSMIC_Pos                     1
N#define UART_ICR_CTSMIC                         ((uint32_t)0x00000002)
N
N#define UART_ICR_DCDMIC_Pos                     2
N#define UART_ICR_DCDMIC                         ((uint32_t)0x00000004)
N
N#define UART_ICR_DSRMIC_Pos                     3
N#define UART_ICR_DSRMIC                         ((uint32_t)0x00000008)
N
N#define UART_ICR_RXIC_Pos                       4
N#define UART_ICR_RXIC                           ((uint32_t)0x00000010)
N
N#define UART_ICR_TXIC_Pos                       5
N#define UART_ICR_TXIC                           ((uint32_t)0x00000020)
N
N#define UART_ICR_RTIC_Pos                       6
N#define UART_ICR_RTIC                           ((uint32_t)0x00000040)
N
N#define UART_ICR_FEIC_Pos                       7
N#define UART_ICR_FEIC                           ((uint32_t)0x00000080)
N
N#define UART_ICR_PEIC_Pos                       8
N#define UART_ICR_PEIC                           ((uint32_t)0x00000100)
N
N#define UART_ICR_BEIC_Pos                       9
N#define UART_ICR_BEIC                           ((uint32_t)0x00000200)
N
N#define UART_ICR_OEIC_Pos                       10
N#define UART_ICR_OEIC                           ((uint32_t)0x00000400)
N
N
N/** @} */ /* End of group Periph_UART_UART_ICR_Bits */
N
N/** @} */ /* End of group Periph_UART_Defines */
N
N/** @defgroup Periph_UART_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_UART_UART_DMACR_Bits UART_DMACR
N  * @{
N  */
N
N#define UART_DMACR_RXDMAE_Pos                   0
N#define UART_DMACR_RXDMAE                       ((uint32_t)0x00000001)
N
N#define UART_DMACR_TXDMAE_Pos                   1
N#define UART_DMACR_TXDMAE                       ((uint32_t)0x00000002)
N
N#define UART_DMACR_DMAONERR_Pos                 2
N#define UART_DMACR_DMAONERR                     ((uint32_t)0x00000004)
N
N
N/** @} */ /* End of group Periph_UART_UART_DMACR_Bits */
N
N/** @} */ /* End of group Periph_UART_Defines */
N
N/** @} */ /* End of group Periph_UART */
N
N/** @} */ /* End of group __1986BE9x_Peripheral_Units */
N
N/** @} */ /* End of group __CMSIS */
N
N#endif /* __1986BE9X_UART_DEFS_H */
N
N/******************* (C) COPYRIGHT 2010 Phyton *********************************
N*
N* END OF FILE 1986BE9x_uart_defs.h */
L 89 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x.h" 2
N#include "1986BE9x_ssp_defs.h"
L 1 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x_ssp_defs.h" 1
N/**
N  ******************************************************************************
N  * @file    1986BE9x_ssp_defs.h
N  * @author  Phyton Application Team
N  * @version V1.0.0
N  * @date    22/02/2011
N  * @brief   This file contains all the Special Function Registers definitions
N  *          for the SSP peripheral unit used in the Milandr 1986BE9x
N  *          microcontrollers.
N  ******************************************************************************
N  * <br><br>
N  *
N  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
N  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
N  * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT
N  * OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
N  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
N  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
N  *
N  * <h2><center>&copy; COPYRIGHT 2010 Phyton</center></h2>
N  ******************************************************************************
N  * FILE 1986BE9x_ssp_defs.h
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __1986BE9X_SSP_DEFS_H
N#define __1986BE9X_SSP_DEFS_H
N
N/** @addtogroup __CMSIS CMSIS
N  * @{
N  */
N
N/** @addtogroup __1986BE9x_Peripheral_Units 1986BE9x Peripheral Units
N  * @{
N  */
N
N/** @defgroup Periph_SSP SSP
N  * @{
N  */
N
N/** @defgroup Periph_SSP_Data_Structures Data Structures
N  * @{
N  */
N
N/** @defgroup Periph_SSP_TypeDef SSP_TypeDef
N  * @{
N  */
N
Ntypedef struct
N{
N  __IO uint32_t CR0;
X  volatile uint32_t CR0;
N  __IO uint32_t CR1;
X  volatile uint32_t CR1;
N  __IO uint32_t DR;
X  volatile uint32_t DR;
N  __IO uint32_t SR;
X  volatile uint32_t SR;
N  __IO uint32_t CPSR;
X  volatile uint32_t CPSR;
N  __IO uint32_t IMSC;
X  volatile uint32_t IMSC;
N  __IO uint32_t RIS;
X  volatile uint32_t RIS;
N  __IO uint32_t MIS;
X  volatile uint32_t MIS;
N  __IO uint32_t ICR;
X  volatile uint32_t ICR;
N  __IO uint32_t DMACR;
X  volatile uint32_t DMACR;
N}SSP_TypeDef;
N
N/** @} */ /* End of group Periph_SSP_TypeDef */
N
N/** @} */ /* End of group Periph_SSP_Data_Structures */
N
N/** @defgroup Periph_SSP_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_SSP_SSP_CR0_Bits SSP_CR0
N  * @{
N  */
N
N#define SSP_CR0_DSS_Pos                         0
N#define SSP_CR0_DSS_Msk                         ((uint32_t)0x0000000F)
N
N#define SSP_CR0_FRF_Pos                         4
N#define SSP_CR0_FRF_Msk                         ((uint32_t)0x00000030)
N
N#define SSP_CR0_SPO_Pos                         6
N#define SSP_CR0_SPO                             ((uint32_t)0x00000040)
N
N#define SSP_CR0_SPH_Pos                         7
N#define SSP_CR0_SPH                             ((uint32_t)0x00000080)
N
N#define SSP_CR0_SCR_Pos                         8
N#define SSP_CR0_SCR_Msk                         ((uint32_t)0x0000FF00)
N
N
N/** @} */ /* End of group Periph_SSP_SSP_CR0_Bits */
N
N/** @} */ /* End of group Periph_SSP_Defines */
N
N/** @defgroup Periph_SSP_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_SSP_SSP_CR1_Bits SSP_CR1
N  * @{
N  */
N
N#define SSP_CR1_LBM_Pos                         0
N#define SSP_CR1_LBM                             ((uint32_t)0x00000001)
N
N#define SSP_CR1_SSE_Pos                         1
N#define SSP_CR1_SSE                             ((uint32_t)0x00000002)
N
N#define SSP_CR1_MS_Pos                          2
N#define SSP_CR1_MS                              ((uint32_t)0x00000004)
N
N#define SSP_CR1_SOD_Pos                         3
N#define SSP_CR1_SOD                             ((uint32_t)0x00000008)
N
N
N/** @} */ /* End of group Periph_SSP_SSP_CR1_Bits */
N
N/** @} */ /* End of group Periph_SSP_Defines */
N
N/** @defgroup Periph_SSP_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_SSP_SSP_SR_Bits SSP_SR
N  * @{
N  */
N
N#define SSP_SR_TFE_Pos                          0
N#define SSP_SR_TFE                              ((uint32_t)0x00000001)
N
N#define SSP_SR_TNF_Pos                          1
N#define SSP_SR_TNF                              ((uint32_t)0x00000002)
N
N#define SSP_SR_RNE_Pos                          2
N#define SSP_SR_RNE                              ((uint32_t)0x00000004)
N
N#define SSP_SR_RFF_Pos                          3
N#define SSP_SR_RFF                              ((uint32_t)0x00000008)
N
N#define SSP_SR_BSY_Pos                          4
N#define SSP_SR_BSY                              ((uint32_t)0x00000010)
N
N
N/** @} */ /* End of group Periph_SSP_SSP_SR_Bits */
N
N/** @} */ /* End of group Periph_SSP_Defines */
N
N/** @defgroup Periph_SSP_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_SSP_SSP_IMSC_Bits SSP_IMSC
N  * @{
N  */
N
N#define SSP_IMSC_RORIM_Pos                      0
N#define SSP_IMSC_RORIM                          ((uint32_t)0x00000001)
N
N#define SSP_IMSC_RTIM_Pos                       1
N#define SSP_IMSC_RTIM                           ((uint32_t)0x00000002)
N
N#define SSP_IMSC_RXIM_Pos                       2
N#define SSP_IMSC_RXIM                           ((uint32_t)0x00000004)
N
N#define SSP_IMSC_TXIM_Pos                       3
N#define SSP_IMSC_TXIM                           ((uint32_t)0x00000008)
N
N
N/** @} */ /* End of group Periph_SSP_SSP_IMSC_Bits */
N
N/** @} */ /* End of group Periph_SSP_Defines */
N
N/** @defgroup Periph_SSP_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_SSP_SSP_RIS_Bits SSP_RIS
N  * @{
N  */
N
N#define SSP_RIS_RORRIS_Pos                      0
N#define SSP_RIS_RORRIS                          ((uint32_t)0x00000001)
N
N#define SSP_RIS_RTRIS_Pos                       1
N#define SSP_RIS_RTRIS                           ((uint32_t)0x00000002)
N
N#define SSP_RIS_RXRIS_Pos                       2
N#define SSP_RIS_RXRIS                           ((uint32_t)0x00000004)
N
N#define SSP_RIS_TXRIS_Pos                       3
N#define SSP_RIS_TXRIS                           ((uint32_t)0x00000008)
N
N
N/** @} */ /* End of group Periph_SSP_SSP_RIS_Bits */
N
N/** @} */ /* End of group Periph_SSP_Defines */
N
N/** @defgroup Periph_SSP_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_SSP_SSP_MIS_Bits SSP_MIS
N  * @{
N  */
N
N#define SSP_MIS_RORMIS_Pos                      0
N#define SSP_MIS_RORMIS                          ((uint32_t)0x00000001)
N
N#define SSP_MIS_RTMIS_Pos                       1
N#define SSP_MIS_RTMIS                           ((uint32_t)0x00000002)
N
N#define SSP_MIS_RXMIS_Pos                       2
N#define SSP_MIS_RXMIS                           ((uint32_t)0x00000004)
N
N#define SSP_MIS_TXMIS_Pos                       3
N#define SSP_MIS_TXMIS                           ((uint32_t)0x00000008)
N
N
N/** @} */ /* End of group Periph_SSP_SSP_MIS_Bits */
N
N/** @} */ /* End of group Periph_SSP_Defines */
N
N/** @defgroup Periph_SSP_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_SSP_SSP_ICR_Bits SSP_ICR
N  * @{
N  */
N
N#define SSP_ICR_RORIC_Pos                       0
N#define SSP_ICR_RORIC                           ((uint32_t)0x00000001)
N
N#define SSP_ICR_RTIC_Pos                        1
N#define SSP_ICR_RTIC                            ((uint32_t)0x00000002)
N
N
N/** @} */ /* End of group Periph_SSP_SSP_ICR_Bits */
N
N/** @} */ /* End of group Periph_SSP_Defines */
N
N/** @defgroup Periph_SSP_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_SSP_SSP_DMACR_Bits SSP_DMACR
N  * @{
N  */
N
N#define SSP_DMACR_RXDMAE_Pos                    0
N#define SSP_DMACR_RXDMAE                        ((uint32_t)0x00000001)
N
N#define SSP_DMACR_TXDMAE_Pos                    1
N#define SSP_DMACR_TXDMAE                        ((uint32_t)0x00000002)
N
N
N/** @} */ /* End of group Periph_SSP_SSP_DMACR_Bits */
N
N/** @} */ /* End of group Periph_SSP_Defines */
N
N/** @} */ /* End of group Periph_SSP */
N
N/** @} */ /* End of group __1986BE9x_Peripheral_Units */
N
N/** @} */ /* End of group __CMSIS */
N
N#endif /* __1986BE9X_SSP_DEFS_H */
N
N/******************* (C) COPYRIGHT 2010 Phyton *********************************
N*
N* END OF FILE 1986BE9x_ssp_defs.h */
L 90 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x.h" 2
N#include "1986BE9x_i2c_defs.h"
L 1 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x_i2c_defs.h" 1
N/**
N  ******************************************************************************
N  * @file    1986BE9x_i2c_defs.h
N  * @author  Phyton Application Team
N  * @version V1.0.0
N  * @date    10/03/2011
N  * @brief   This file contains all the Special Function Registers definitions
N  *          for the I2C peripheral unit used in the Milandr 1986BE9x
N  *          microcontrollers.
N  ******************************************************************************
N  * <br><br>
N  *
N  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
N  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
N  * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT
N  * OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
N  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
N  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
N  *
N  * <h2><center>&copy; COPYRIGHT 2010 Phyton</center></h2>
N  ******************************************************************************
N  * FILE 1986BE9x_i2c_defs.h
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __1986BE9X_I2C_DEFS_H
N#define __1986BE9X_I2C_DEFS_H
N
N/** @addtogroup __CMSIS CMSIS
N  * @{
N  */
N
N/** @addtogroup __1986BE9x_Peripheral_Units 1986BE9x Peripheral Units
N  * @{
N  */
N
N/** @defgroup Periph_I2C I2C
N  * @{
N  */
N
N/** @defgroup Periph_I2C_Data_Structures Data Structures
N  * @{
N  */
N
N/** @defgroup Periph_I2C_TypeDef I2C_TypeDef
N  * @{
N  */
N
Ntypedef struct
N{
N  __IO uint32_t PRL;
X  volatile uint32_t PRL;
N  __IO uint32_t PRH;
X  volatile uint32_t PRH;
N  __IO uint32_t CTR;
X  volatile uint32_t CTR;
N  __IO uint32_t RXD;
X  volatile uint32_t RXD;
N  __IO uint32_t STA;
X  volatile uint32_t STA;
N  __IO uint32_t TXD;
X  volatile uint32_t TXD;
N  __IO uint32_t CMD;
X  volatile uint32_t CMD;
N}I2C_TypeDef;
N
N/** @} */ /* End of group Periph_I2C_TypeDef */
N
N/** @} */ /* End of group Periph_I2C_Data_Structures */
N
N/** @defgroup Periph_I2C_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_I2C_I2C_CTR_Bits I2C_CTR
N  * @{
N  */
N
N#define I2C_CTR_S_I2C_Pos                       5
N#define I2C_CTR_S_I2C                           ((uint32_t)0x00000020)
N
N#define I2C_CTR_EN_INT_Pos                      6
N#define I2C_CTR_EN_INT                          ((uint32_t)0x00000040)
N
N#define I2C_CTR_EN_I2C_Pos                      7
N#define I2C_CTR_EN_I2C                          ((uint32_t)0x00000080)
N
N
N/** @} */ /* End of group Periph_I2C_I2C_CTR_Bits */
N
N/** @} */ /* End of group Periph_I2C_Defines */
N
N/** @defgroup Periph_I2C_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_I2C_I2C_STA_Bits I2C_STA
N  * @{
N  */
N
N#define I2C_STA_INT_Pos                         0
N#define I2C_STA_INT                             ((uint32_t)0x00000001)
N
N#define I2C_STA_TR_PROG_Pos                     1
N#define I2C_STA_TR_PROG                         ((uint32_t)0x00000002)
N
N#define I2C_STA_LOST_ARB_Pos                    5
N#define I2C_STA_LOST_ARB                        ((uint32_t)0x00000020)
N
N#define I2C_STA_BUSY_Pos                        6
N#define I2C_STA_BUSY                            ((uint32_t)0x00000040)
N
N#define I2C_STA_Rx_ACK_Pos                      7
N#define I2C_STA_Rx_ACK                          ((uint32_t)0x00000080)
N
N
N/** @} */ /* End of group Periph_I2C_I2C_STA_Bits */
N
N/** @} */ /* End of group Periph_I2C_Defines */
N
N/** @defgroup Periph_I2C_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_I2C_I2C_CMD_Bits I2C_CMD
N  * @{
N  */
N
N#define I2C_CMD_CLRINT_Pos                      0
N#define I2C_CMD_CLRINT                          ((uint32_t)0x00000001)
N
N#define I2C_CMD_ACK_Pos                         3
N#define I2C_CMD_ACK                             ((uint32_t)0x00000008)
N
N#define I2C_CMD_WR_Pos                          4
N#define I2C_CMD_WR                              ((uint32_t)0x00000010)
N
N#define I2C_CMD_RD_Pos                          5
N#define I2C_CMD_RD                              ((uint32_t)0x00000020)
N
N#define I2C_CMD_STOP_Pos                        6
N#define I2C_CMD_STOP                            ((uint32_t)0x00000040)
N
N#define I2C_CMD_START_Pos                       7
N#define I2C_CMD_START                           ((uint32_t)0x00000080)
N
N
N/** @} */ /* End of group Periph_I2C_I2C_CMD_Bits */
N
N/** @} */ /* End of group Periph_I2C_Defines */
N
N/** @} */ /* End of group Periph_I2C */
N
N/** @} */ /* End of group __1986BE9x_Peripheral_Units */
N
N/** @} */ /* End of group __CMSIS */
N
N#endif /* __1986BE9X_I2C_DEFS_H */
N
N/******************* (C) COPYRIGHT 2010 Phyton *********************************
N*
N* END OF FILE 1986BE9x_i2c_defs.h */
L 91 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x.h" 2
N#include "1986BE9x_power_defs.h"
L 1 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x_power_defs.h" 1
N/**
N  ******************************************************************************
N  * @file    1986BE9x_power_defs.h
N  * @author  Phyton Application Team
N  * @version V1.0.0
N  * @date    24/09/2010
N  * @brief   This file contains all the Special Function Registers definitions
N  *          for the POWER peripheral unit used in the Milandr 1986BE9x
N  *          microcontrollers.
N  ******************************************************************************
N  * <br><br>
N  *
N  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
N  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
N  * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT
N  * OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
N  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
N  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
N  *
N  * <h2><center>&copy; COPYRIGHT 2010 Phyton</center></h2>
N  ******************************************************************************
N  * FILE 1986BE9x_power_defs.h
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __1986BE9X_POWER_DEFS_H
N#define __1986BE9X_POWER_DEFS_H
N
N/** @addtogroup __CMSIS CMSIS
N  * @{
N  */
N
N/** @addtogroup __1986BE9x_Peripheral_Units 1986BE9x Peripheral Units
N  * @{
N  */
N
N/** @defgroup Periph_POWER POWER
N  * @{
N  */
N
N/** @defgroup Periph_POWER_Data_Structures Data Structures
N  * @{
N  */
N
N/** @defgroup Periph_POWER_TypeDef POWER_TypeDef
N  * @{
N  */
N
Ntypedef struct
N{
N  __IO uint32_t PVDCS;
X  volatile uint32_t PVDCS;
N}POWER_TypeDef;
N
N/** @} */ /* End of group Periph_POWER_TypeDef */
N
N/** @} */ /* End of group Periph_POWER_Data_Structures */
N
N/** @defgroup Periph_POWER_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_POWER_POWER_PVDCS_Bits POWER_PVDCS
N  * @{
N  */
N
N#define POWER_PVDCS_PVDEN_Pos                   0
N#define POWER_PVDCS_PVDEN                       ((uint32_t)0x00000001)
N
N#define POWER_PVDCS_PBLS_Pos                    1
N#define POWER_PVDCS_PBLS_Msk                    ((uint32_t)0x00000006)
N
N#define POWER_PVDCS_PLS_Pos                     3
N#define POWER_PVDCS_PLS_Msk                     ((uint32_t)0x00000038)
N
N#define POWER_PVDCS_PVBD_Pos                    6
N#define POWER_PVDCS_PVBD                        ((uint32_t)0x00000040)
N
N#define POWER_PVDCS_PVD_Pos                     7
N#define POWER_PVDCS_PVD                         ((uint32_t)0x00000080)
N
N#define POWER_PVDCS_IEPVBD_Pos                  8
N#define POWER_PVDCS_IEPVBD                      ((uint32_t)0x00000100)
N
N#define POWER_PVDCS_IEPVD_Pos                   9
N#define POWER_PVDCS_IEPVD                       ((uint32_t)0x00000200)
N
N#define POWER_PVDCS_INVB_Pos                    10
N#define POWER_PVDCS_INVB                        ((uint32_t)0x00000400)
N
N#define POWER_PVDCS_INV_Pos                     11
N#define POWER_PVDCS_INV                         ((uint32_t)0x00000800)
N
N
N/** @} */ /* End of group Periph_POWER_POWER_PVDCS_Bits */
N
N/** @} */ /* End of group Periph_POWER_Defines */
N
N/** @} */ /* End of group Periph_POWER */
N
N/** @} */ /* End of group __1986BE9x_Peripheral_Units */
N
N/** @} */ /* End of group __CMSIS */
N
N#endif /* __1986BE9X_POWER_DEFS_H */
N
N/******************* (C) COPYRIGHT 2010 Phyton *********************************
N*
N* END OF FILE 1986BE9x_power_defs.h */
L 92 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x.h" 2
N#include "1986BE9x_wwdg_defs.h"
L 1 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x_wwdg_defs.h" 1
N/**
N  ******************************************************************************
N  * @file    1986BE9x_wwdg_defs.h
N  * @author  Phyton Application Team
N  * @version V1.0.0
N  * @date    24/09/2010
N  * @brief   This file contains all the Special Function Registers definitions
N  *          for the WWDG peripheral unit used in the Milandr 1986BE9x
N  *          microcontrollers.
N  ******************************************************************************
N  * <br><br>
N  *
N  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
N  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
N  * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT
N  * OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
N  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
N  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
N  *
N  * <h2><center>&copy; COPYRIGHT 2010 Phyton</center></h2>
N  ******************************************************************************
N  * FILE 1986BE9x_wwdg_defs.h
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __1986BE9X_WWDG_DEFS_H
N#define __1986BE9X_WWDG_DEFS_H
N
N/** @addtogroup __CMSIS CMSIS
N  * @{
N  */
N
N/** @addtogroup __1986BE9x_Peripheral_Units 1986BE9x Peripheral Units
N  * @{
N  */
N
N/** @defgroup Periph_WWDG WWDG
N  * @{
N  */
N
N/** @defgroup Periph_WWDG_Data_Structures Data Structures
N  * @{
N  */
N
N/** @defgroup Periph_WWDG_TypeDef WWDG_TypeDef
N  * @{
N  */
N
Ntypedef struct
N{
N  __IO uint32_t CR;
X  volatile uint32_t CR;
N  __IO uint32_t CFR;
X  volatile uint32_t CFR;
N  __IO uint32_t SR;
X  volatile uint32_t SR;
N}WWDG_TypeDef;
N
N/** @} */ /* End of group Periph_WWDG_TypeDef */
N
N/** @} */ /* End of group Periph_WWDG_Data_Structures */
N
N/** @defgroup Periph_WWDG_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_WWDG_WWDG_CR_Bits WWDG_CR
N  * @{
N  */
N
N#define WWDG_CR_T_Pos                           0
N#define WWDG_CR_T_Msk                           ((uint32_t)0x0000007F)
N
N#define WWDG_CR_WDGA_Pos                        7
N#define WWDG_CR_WDGA                            ((uint32_t)0x00000080)
N
N
N/** @} */ /* End of group Periph_WWDG_WWDG_CR_Bits */
N
N/** @} */ /* End of group Periph_WWDG_Defines */
N
N/** @defgroup Periph_WWDG_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_WWDG_WWDG_CFR_Bits WWDG_CFR
N  * @{
N  */
N
N#define WWDG_CFR_W_Pos                          0
N#define WWDG_CFR_W_Msk                          ((uint32_t)0x0000007F)
N
N#define WWDG_CFR_WGTB_Pos                       7
N#define WWDG_CFR_WGTB_Msk                       ((uint32_t)0x00000180)
N
N#define WWDG_CFR_EWI_Pos                        9
N#define WWDG_CFR_EWI                            ((uint32_t)0x00000200)
N
N
N/** @} */ /* End of group Periph_WWDG_WWDG_CFR_Bits */
N
N/** @} */ /* End of group Periph_WWDG_Defines */
N
N/** @} */ /* End of group Periph_WWDG */
N
N/** @} */ /* End of group __1986BE9x_Peripheral_Units */
N
N/** @} */ /* End of group __CMSIS */
N
N#endif /* __1986BE9X_WWDG_DEFS_H */
N
N/******************* (C) COPYRIGHT 2010 Phyton *********************************
N*
N* END OF FILE 1986BE9x_wwdg_defs.h */
L 93 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x.h" 2
N#include "1986BE9x_iwdg_defs.h"
L 1 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x_iwdg_defs.h" 1
N/**
N  ******************************************************************************
N  * @file    1986BE9x_iwdg_defs.h
N  * @author  Phyton Application Team
N  * @version V1.0.0
N  * @date    08/06/2011
N  * @brief   This file contains all the Special Function Registers definitions
N  *          for the IWDG peripheral unit used in the Milandr 1986BE9x
N  *          microcontrollers.
N  ******************************************************************************
N  * <br><br>
N  *
N  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
N  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
N  * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT
N  * OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
N  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
N  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
N  *
N  * <h2><center>&copy; COPYRIGHT 2010 Phyton</center></h2>
N  ******************************************************************************
N  * FILE 1986BE9x_iwdg_defs.h
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __1986BE9X_IWDG_DEFS_H
N#define __1986BE9X_IWDG_DEFS_H
N
N/** @addtogroup __CMSIS CMSIS
N  * @{
N  */
N
N/** @addtogroup __1986BE9x_Peripheral_Units 1986BE9x Peripheral Units
N  * @{
N  */
N
N/** @defgroup Periph_IWDG IWDG
N  * @{
N  */
N
N/** @defgroup Periph_IWDG_Data_Structures Data Structures
N  * @{
N  */
N
N/** @defgroup Periph_IWDG_TypeDef IWDG_TypeDef
N  * @{
N  */
N
Ntypedef struct
N{
N  __IO uint32_t KR;
X  volatile uint32_t KR;
N  __IO uint32_t PR;
X  volatile uint32_t PR;
N  __IO uint32_t RLR;
X  volatile uint32_t RLR;
N  __IO uint32_t SR;
X  volatile uint32_t SR;
N}IWDG_TypeDef;
N
N/** @} */ /* End of group Periph_IWDG_TypeDef */
N
N/** @} */ /* End of group Periph_IWDG_Data_Structures */
N
N/** @defgroup Periph_IWDG_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_IWDG_IWDG_SR_Bits IWDG_SR
N  * @{
N  */
N
N#define IWDG_SR_PVU_Pos                         0
N#define IWDG_SR_PVU                             ((uint32_t)0x00000001)
N
N#define IWDG_SR_RVU_Pos                         1
N#define IWDG_SR_RVU                             ((uint32_t)0x00000002)
N
N
N/** @} */ /* End of group Periph_IWDG_IWDG_SR_Bits */
N
N/** @} */ /* End of group Periph_IWDG_Defines */
N
N/** @} */ /* End of group Periph_IWDG */
N
N/** @} */ /* End of group __1986BE9x_Peripheral_Units */
N
N/** @} */ /* End of group __CMSIS */
N
N#endif /* __1986BE9X_IWDG_DEFS_H */
N
N/******************* (C) COPYRIGHT 2010 Phyton *********************************
N*
N* END OF FILE 1986BE9x_iwdg_defs.h */
L 94 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x.h" 2
N#include "1986BE9x_timer_defs.h"
L 1 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x_timer_defs.h" 1
N/**
N  ******************************************************************************
N  * @file    1986BE9x_timer_defs.h
N  * @author  Phyton Application Team
N  * @version V1.0.0
N  * @date    06/06/2011
N  * @brief   This file contains all the Special Function Registers definitions
N  *          for the TIMER peripheral unit used in the Milandr 1986BE9x
N  *          microcontrollers.
N  ******************************************************************************
N  * <br><br>
N  *
N  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
N  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
N  * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT
N  * OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
N  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
N  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
N  *
N  * <h2><center>&copy; COPYRIGHT 2010 Phyton</center></h2>
N  ******************************************************************************
N  * FILE 1986BE9x_timer_defs.h
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __1986BE9X_TIMER_DEFS_H
N#define __1986BE9X_TIMER_DEFS_H
N
N/** @addtogroup __CMSIS CMSIS
N  * @{
N  */
N
N/** @addtogroup __1986BE9x_Peripheral_Units 1986BE9x Peripheral Units
N  * @{
N  */
N
N/** @defgroup Periph_TIMER TIMER
N  * @{
N  */
N
N/** @defgroup Periph_TIMER_Data_Structures Data Structures
N  * @{
N  */
N
N/** @defgroup Periph_TIMER_TypeDef TIMER_TypeDef
N  * @{
N  */
N
Ntypedef struct
N{
N  __IO uint32_t CNT;
X  volatile uint32_t CNT;
N  __IO uint32_t PSG;
X  volatile uint32_t PSG;
N  __IO uint32_t ARR;
X  volatile uint32_t ARR;
N  __IO uint32_t CNTRL;
X  volatile uint32_t CNTRL;
N  __IO uint32_t CCR1;
X  volatile uint32_t CCR1;
N  __IO uint32_t CCR2;
X  volatile uint32_t CCR2;
N  __IO uint32_t CCR3;
X  volatile uint32_t CCR3;
N  __IO uint32_t CCR4;
X  volatile uint32_t CCR4;
N  __IO uint32_t CH1_CNTRL;
X  volatile uint32_t CH1_CNTRL;
N  __IO uint32_t CH2_CNTRL;
X  volatile uint32_t CH2_CNTRL;
N  __IO uint32_t CH3_CNTRL;
X  volatile uint32_t CH3_CNTRL;
N  __IO uint32_t CH4_CNTRL;
X  volatile uint32_t CH4_CNTRL;
N  __IO uint32_t CH1_CNTRL1;
X  volatile uint32_t CH1_CNTRL1;
N  __IO uint32_t CH2_CNTRL1;
X  volatile uint32_t CH2_CNTRL1;
N  __IO uint32_t CH3_CNTRL1;
X  volatile uint32_t CH3_CNTRL1;
N  __IO uint32_t CH4_CNTRL1;
X  volatile uint32_t CH4_CNTRL1;
N  __IO uint32_t CH1_DTG;
X  volatile uint32_t CH1_DTG;
N  __IO uint32_t CH2_DTG;
X  volatile uint32_t CH2_DTG;
N  __IO uint32_t CH3_DTG;
X  volatile uint32_t CH3_DTG;
N  __IO uint32_t CH4_DTG;
X  volatile uint32_t CH4_DTG;
N  __IO uint32_t BRKETR_CNTRL;
X  volatile uint32_t BRKETR_CNTRL;
N  __IO uint32_t STATUS;
X  volatile uint32_t STATUS;
N  __IO uint32_t IE;
X  volatile uint32_t IE;
N  __IO uint32_t DMA_RE;
X  volatile uint32_t DMA_RE;
N  __IO uint32_t CH1_CNTRL2;
X  volatile uint32_t CH1_CNTRL2;
N  __IO uint32_t CH2_CNTRL2;
X  volatile uint32_t CH2_CNTRL2;
N  __IO uint32_t CH3_CNTRL2;
X  volatile uint32_t CH3_CNTRL2;
N  __IO uint32_t CH4_CNTRL2;
X  volatile uint32_t CH4_CNTRL2;
N  __IO uint32_t CCR11;
X  volatile uint32_t CCR11;
N  __IO uint32_t CCR21;
X  volatile uint32_t CCR21;
N  __IO uint32_t CCR31;
X  volatile uint32_t CCR31;
N  __IO uint32_t CCR41;
X  volatile uint32_t CCR41;
N}TIMER_TypeDef;
N
N/** @} */ /* End of group Periph_TIMER_TypeDef */
N
N/** @} */ /* End of group Periph_TIMER_Data_Structures */
N
N/** @defgroup Periph_TIMER_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_TIMER_TIMER_CNTRL_Bits TIMER_CNTRL
N  * @{
N  */
N
N#define TIMER_CNTRL_CNT_EN_Pos                  0
N#define TIMER_CNTRL_CNT_EN                      ((uint32_t)0x00000001)
N
N#define TIMER_CNTRL_ARRB_EN_Pos                 1
N#define TIMER_CNTRL_ARRB_EN                     ((uint32_t)0x00000002)
N
N#define TIMER_CNTRL_WR_CMPL_Pos                 2
N#define TIMER_CNTRL_WR_CMPL                     ((uint32_t)0x00000004)
N
N#define TIMER_CNTRL_DIR_Pos                     3
N#define TIMER_CNTRL_DIR                         ((uint32_t)0x00000008)
N
N#define TIMER_CNTRL_FDTS_Pos                    4
N#define TIMER_CNTRL_FDTS_Msk                    ((uint32_t)0x00000030)
N
N#define TIMER_CNTRL_CNT_MODE_Pos                6
N#define TIMER_CNTRL_CNT_MODE_Msk                ((uint32_t)0x000000C0)
N
N#define TIMER_CNTRL_EVENT_SEL_Pos               8
N#define TIMER_CNTRL_EVENT_SEL_Msk               ((uint32_t)0x00000F00)
N
N
N/** @} */ /* End of group Periph_TIMER_TIMER_CNTRL_Bits */
N
N/** @} */ /* End of group Periph_TIMER_Defines */
N
N/** @defgroup Periph_TIMER_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_TIMER_TIMER_CH_CNTRL_Bits TIMER_CH_CNTRL
N  * @{
N  */
N
N#define TIMER_CH_CNTRL_CHFLTR_Pos               0
N#define TIMER_CH_CNTRL_CHFLTR_Msk               ((uint32_t)0x0000000F)
N
N#define TIMER_CH_CNTRL_CHSEL_Pos                4
N#define TIMER_CH_CNTRL_CHSEL_Msk                ((uint32_t)0x00000030)
N
N#define TIMER_CH_CNTRL_CHPSC_Pos                6
N#define TIMER_CH_CNTRL_CHPSC_Msk                ((uint32_t)0x000000C0)
N
N#define TIMER_CH_CNTRL_OCCE_Pos                 8
N#define TIMER_CH_CNTRL_OCCE                     ((uint32_t)0x00000100)
N
N#define TIMER_CH_CNTRL_OCCM_Pos                 9
N#define TIMER_CH_CNTRL_OCCM_Msk                 ((uint32_t)0x00000E00)
N
N#define TIMER_CH_CNTRL_BRKEN_Pos                12
N#define TIMER_CH_CNTRL_BRKEN                    ((uint32_t)0x00001000)
N
N#define TIMER_CH_CNTRL_ETREN_Pos                13
N#define TIMER_CH_CNTRL_ETREN                    ((uint32_t)0x00002000)
N
N#define TIMER_CH_CNTRL_WR_CMPL_Pos              14
N#define TIMER_CH_CNTRL_WR_CMPL                  ((uint32_t)0x00004000)
N
N#define TIMER_CH_CNTRL_CAP_nPWM_Pos             15
N#define TIMER_CH_CNTRL_CAP_nPWM                 ((uint32_t)0x00008000)
N
N
N/** @} */ /* End of group Periph_TIMER_TIMER_CH_CNTRL_Bits */
N
N/** @} */ /* End of group Periph_TIMER_Defines */
N
N/** @defgroup Periph_TIMER_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_TIMER_TIMER_CH_CNTRL1_Bits TIMER_CH_CNTRL1
N  * @{
N  */
N
N#define TIMER_CH_CNTRL1_SELOE_Pos               0
N#define TIMER_CH_CNTRL1_SELOE_Msk               ((uint32_t)0x00000003)
N
N#define TIMER_CH_CNTRL1_SELO_Pos                2
N#define TIMER_CH_CNTRL1_SELO_Msk                ((uint32_t)0x0000000C)
N
N#define TIMER_CH_CNTRL1_INV_Pos                 4
N#define TIMER_CH_CNTRL1_INV                     ((uint32_t)0x00000010)
N
N#define TIMER_CH_CNTRL1_NSELOE_Pos              8
N#define TIMER_CH_CNTRL1_NSELOE_Msk              ((uint32_t)0x00000300)
N
N#define TIMER_CH_CNTRL1_NSELO_Pos               10
N#define TIMER_CH_CNTRL1_NSELO_Msk               ((uint32_t)0x00000C00)
N
N#define TIMER_CH_CNTRL1_NINV_Pos                12
N#define TIMER_CH_CNTRL1_NINV                    ((uint32_t)0x00001000)
N
N
N/** @} */ /* End of group Periph_TIMER_TIMER_CH_CNTRL1_Bits */
N
N/** @} */ /* End of group Periph_TIMER_Defines */
N
N/** @defgroup Periph_TIMER_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_TIMER_TIMER_CH_DTG_Bits TIMER_CH_DTG
N  * @{
N  */
N
N#define TIMER_CH_DTG_DTGx_Pos                   0
N#define TIMER_CH_DTG_DTGx_Msk                   ((uint32_t)0x0000000F)
N
N#define TIMER_CH_DTG_EDTS_Pos                   4
N#define TIMER_CH_DTG_EDTS                       ((uint32_t)0x00000010)
N
N#define TIMER_CH_DTG_Pos                        8
N#define TIMER_CH_DTG_Msk                        ((uint32_t)0x0000FF00)
N
N
N/** @} */ /* End of group Periph_TIMER_TIMER_CH_DTG_Bits */
N
N/** @} */ /* End of group Periph_TIMER_Defines */
N
N/** @defgroup Periph_TIMER_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_TIMER_TIMER_BRKETR_CNTRL_Bits TIMER_BRKETR_CNTRL
N  * @{
N  */
N
N#define TIMER_BRKETR_CNTRL_BRK_INV_Pos          0
N#define TIMER_BRKETR_CNTRL_BRK_INV              ((uint32_t)0x00000001)
N
N#define TIMER_BRKETR_CNTRL_ETR_INV_Pos          1
N#define TIMER_BRKETR_CNTRL_ETR_INV              ((uint32_t)0x00000002)
N
N#define TIMER_BRKETR_CNTRL_ETR_PSC_Pos          2
N#define TIMER_BRKETR_CNTRL_ETR_PSC_Msk          ((uint32_t)0x0000000C)
N
N#define TIMER_BRKETR_CNTRL_ETR_FILTER_Pos       4
N#define TIMER_BRKETR_CNTRL_ETR_FILTER_Msk       ((uint32_t)0x000000F0)
N
N
N/** @} */ /* End of group Periph_TIMER_TIMER_BRKETR_CNTRL_Bits */
N
N/** @} */ /* End of group Periph_TIMER_Defines */
N
N/** @defgroup Periph_TIMER_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_TIMER_TIMER_STATUS_Bits TIMER_STATUS
N  * @{
N  */
N
N#define TIMER_STATUS_CNT_ZERO_EVENT_Pos         0
N#define TIMER_STATUS_CNT_ZERO_EVENT             ((uint32_t)0x00000001)
N
N#define TIMER_STATUS_CNT_ARR_EVENT_Pos          1
N#define TIMER_STATUS_CNT_ARR_EVENT              ((uint32_t)0x00000002)
N
N#define TIMER_STATUS_ETR_RE_EVENT_Pos           2
N#define TIMER_STATUS_ETR_RE_EVENT               ((uint32_t)0x00000004)
N
N#define TIMER_STATUS_ETR_FE_EVENT_Pos           3
N#define TIMER_STATUS_ETR_FE_EVENT               ((uint32_t)0x00000008)
N
N#define TIMER_STATUS_BRK_EVENT_Pos              4
N#define TIMER_STATUS_BRK_EVENT                  ((uint32_t)0x00000010)
N
N#define TIMER_STATUS_CCR_CAP_EVENT_Pos          5
N#define TIMER_STATUS_CCR_CAP_EVENT_Msk          ((uint32_t)0x000001E0)
N
N#define TIMER_STATUS_CCR_REF_EVENT_Pos          9
N#define TIMER_STATUS_CCR_REF_EVENT_Msk          ((uint32_t)0x00001E00)
N
N#define TIMER_STATUS_CCR1_CAP_EVENT_Pos         13
N#define TIMER_STATUS_CCR1_CAP_EVENT_Msk         ((uint32_t)0x0001E000)
N
N
N/** @} */ /* End of group Periph_TIMER_TIMER_STATUS_Bits */
N
N/** @} */ /* End of group Periph_TIMER_Defines */
N
N/** @defgroup Periph_TIMER_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_TIMER_TIMER_IE_Bits TIMER_IE
N  * @{
N  */
N
N#define TIMER_IE_CNT_ZERO_EVENT_IE_Pos          0
N#define TIMER_IE_CNT_ZERO_EVENT_IE              ((uint32_t)0x00000001)
N
N#define TIMER_IE_CNT_ARR_EVENT_IE_Pos           1
N#define TIMER_IE_CNT_ARR_EVENT_IE               ((uint32_t)0x00000002)
N
N#define TIMER_IE_ETR_RE_EVENT_IE_Pos            2
N#define TIMER_IE_ETR_RE_EVENT_IE                ((uint32_t)0x00000004)
N
N#define TIMER_IE_ETR_FE_EVENT_IE_Pos            3
N#define TIMER_IE_ETR_FE_EVENT_IE                ((uint32_t)0x00000008)
N
N#define TIMER_IE_BRK_EVENT_IE_Pos               4
N#define TIMER_IE_BRK_EVENT_IE                   ((uint32_t)0x00000010)
N
N#define TIMER_IE_CCR_CAP_EVENT_IE_Pos           5
N#define TIMER_IE_CCR_CAP_EVENT_IE_Msk           ((uint32_t)0x000001E0)
N
N#define TIMER_IE_CCR_REF_EVENT_IE_Pos           9
N#define TIMER_IE_CCR_REF_EVENT_IE_Msk           ((uint32_t)0x00001E00)
N
N#define TIMER_IE_CCR1_CAP_EVENT_IE_Pos          13
N#define TIMER_IE_CCR1_CAP_EVENT_IE_Msk          ((uint32_t)0x0001E000)
N
N
N/** @} */ /* End of group Periph_TIMER_TIMER_IE_Bits */
N
N/** @} */ /* End of group Periph_TIMER_Defines */
N
N/** @defgroup Periph_TIMER_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_TIMER_TIMER_DMA_RE_Bits TIMER_DMA_RE
N  * @{
N  */
N
N#define TIMER_DMA_RE_CNT_ZERO_EVENT_RE_Pos      0
N#define TIMER_DMA_RE_CNT_ZERO_EVENT_RE          ((uint32_t)0x00000001)
N
N#define TIMER_DMA_RE_CNT_ARR_EVENT_RE_Pos       1
N#define TIMER_DMA_RE_CNT_ARR_EVENT_RE           ((uint32_t)0x00000002)
N
N#define TIMER_DMA_RE_ETR_RE_EVENT_RE_Pos        2
N#define TIMER_DMA_RE_ETR_RE_EVENT_RE            ((uint32_t)0x00000004)
N
N#define TIMER_DMA_RE_ETR_FE_EVENT_RE_Pos        3
N#define TIMER_DMA_RE_ETR_FE_EVENT_RE            ((uint32_t)0x00000008)
N
N#define TIMER_DMA_RE_BRK_EVENT_RE_Pos           4
N#define TIMER_DMA_RE_BRK_EVENT_RE               ((uint32_t)0x00000010)
N
N#define TIMER_DMA_RE_CCR_CAP_EVENT_RE_Pos       5
N#define TIMER_DMA_RE_CCR_CAP_EVENT_RE_Msk       ((uint32_t)0x000001E0)
N
N#define TIMER_DMA_RE_CCR_REF_EVENT_RE_Pos       9
N#define TIMER_DMA_RE_CCR_REF_EVENT_RE_Msk       ((uint32_t)0x00001E00)
N
N#define TIMER_DMA_RE_CCR1_CAP_EVENT_RE_Pos      13
N#define TIMER_DMA_RE_CCR1_CAP_EVENT_RE_Msk      ((uint32_t)0x0001E000)
N
N
N/** @} */ /* End of group Periph_TIMER_TIMER_DMA_RE_Bits */
N
N/** @} */ /* End of group Periph_TIMER_Defines */
N
N/** @defgroup Periph_TIMER_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_TIMER_TIMER_CH_CNTRL2_Bits TIMER_CH_CNTRL2
N  * @{
N  */
N
N#define TIMER_CH_CNTRL2_CHSEL1_Pos              0
N#define TIMER_CH_CNTRL2_CHSEL1_Msk              ((uint32_t)0x00000003)
N
N#define TIMER_CH_CNTRL2_CCR1_EN_Pos             2
N#define TIMER_CH_CNTRL2_CCR1_EN                 ((uint32_t)0x00000004)
N
N#define TIMER_CH_CNTRL2_CCRRLD_Pos              3
N#define TIMER_CH_CNTRL2_CCRRLD                  ((uint32_t)0x00000008)
N
N
N/** @} */ /* End of group Periph_TIMER_TIMER_CH_CNTRL2_Bits */
N
N/** @} */ /* End of group Periph_TIMER_Defines */
N
N/** @} */ /* End of group Periph_TIMER */
N
N/** @} */ /* End of group __1986BE9x_Peripheral_Units */
N
N/** @} */ /* End of group __CMSIS */
N
N#endif /* __1986BE9X_TIMER_DEFS_H */
N
N/******************* (C) COPYRIGHT 2010 Phyton *********************************
N*
N* END OF FILE 1986BE9x_timer_defs.h */
L 95 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x.h" 2
N#include "1986BE9x_adc_defs.h"
L 1 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x_adc_defs.h" 1
N/**
N  ******************************************************************************
N  * @file    1986BE9x_adc_defs.h
N  * @author  Phyton Application Team
N  * @version V1.0.0
N  * @date    24/09/2010
N  * @brief   This file contains all the Special Function Registers definitions
N  *          for the ADC peripheral unit used in the Milandr 1986BE9x
N  *          microcontrollers.
N  ******************************************************************************
N  * <br><br>
N  *
N  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
N  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
N  * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT
N  * OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
N  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
N  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
N  *
N  * <h2><center>&copy; COPYRIGHT 2010 Phyton</center></h2>
N  ******************************************************************************
N  * FILE 1986BE9x_adc_defs.h
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __1986BE9X_ADC_DEFS_H
N#define __1986BE9X_ADC_DEFS_H
N
N/** @addtogroup __CMSIS CMSIS
N  * @{
N  */
N
N/** @addtogroup __1986BE9x_Peripheral_Units 1986BE9x Peripheral Units
N  * @{
N  */
N
N/** @defgroup Periph_ADC ADC
N  * @{
N  */
N
N/** @defgroup Periph_ADC_Data_Structures Data Structures
N  * @{
N  */
N
N/** @defgroup Periph_ADC_TypeDef ADC_TypeDef
N  * @{
N  */
N
Ntypedef struct
N{
N  __IO uint32_t ADC1_CFG;
X  volatile uint32_t ADC1_CFG;
N  __IO uint32_t ADC2_CFG;
X  volatile uint32_t ADC2_CFG;
N  __IO uint32_t ADC1_H_LEVEL;
X  volatile uint32_t ADC1_H_LEVEL;
N  __IO uint32_t ADC2_H_LEVEL;
X  volatile uint32_t ADC2_H_LEVEL;
N  __IO uint32_t ADC1_L_LEVEL;
X  volatile uint32_t ADC1_L_LEVEL;
N  __IO uint32_t ADC2_L_LEVEL;
X  volatile uint32_t ADC2_L_LEVEL;
N  __IO uint32_t ADC1_RESULT;
X  volatile uint32_t ADC1_RESULT;
N  __IO uint32_t ADC2_RESULT;
X  volatile uint32_t ADC2_RESULT;
N  __IO uint32_t ADC1_STATUS;
X  volatile uint32_t ADC1_STATUS;
N  __IO uint32_t ADC2_STATUS;
X  volatile uint32_t ADC2_STATUS;
N  __IO uint32_t ADC1_CHSEL;
X  volatile uint32_t ADC1_CHSEL;
N  __IO uint32_t ADC2_CHSEL;
X  volatile uint32_t ADC2_CHSEL;
N}ADC_TypeDef;
N
N/** @} */ /* End of group Periph_ADC_TypeDef */
N
N/** @} */ /* End of group Periph_ADC_Data_Structures */
N
N/** @defgroup Periph_ADC_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_ADC_ADC1_CFG_Bits ADC1_CFG
N  * @{
N  */
N
N#define ADC1_CFG_Cfg_REG_ADON_Pos               0
N#define ADC1_CFG_Cfg_REG_ADON                   ((uint32_t)0x00000001)
N
N#define ADC1_CFG_Cfg_REG_GO_Pos                 1
N#define ADC1_CFG_Cfg_REG_GO                     ((uint32_t)0x00000002)
N
N#define ADC1_CFG_Cfg_REG_CLKS_Pos               2
N#define ADC1_CFG_Cfg_REG_CLKS                   ((uint32_t)0x00000004)
N
N#define ADC1_CFG_Cfg_REG_SAMPLE_Pos             3
N#define ADC1_CFG_Cfg_REG_SAMPLE                 ((uint32_t)0x00000008)
N
N#define ADC1_CFG_Cfg_REG_CHS_Pos                4
N#define ADC1_CFG_Cfg_REG_CHS_Msk                ((uint32_t)0x000001F0)
N
N#define ADC1_CFG_Cfg_REG_CHCH_Pos               9
N#define ADC1_CFG_Cfg_REG_CHCH                   ((uint32_t)0x00000200)
N
N#define ADC1_CFG_Cfg_REG_RNGC_Pos               10
N#define ADC1_CFG_Cfg_REG_RNGC                   ((uint32_t)0x00000400)
N
N#define ADC1_CFG_Cfg_M_REF_Pos                  11
N#define ADC1_CFG_Cfg_M_REF                      ((uint32_t)0x00000800)
N
N#define ADC1_CFG_Cfg_REG_DIVCLK_Pos             12
N#define ADC1_CFG_Cfg_REG_DIVCLK_Msk             ((uint32_t)0x0000F000)
N
N#define ADC1_CFG_Cfg_Sync_Conver_Pos            16
N#define ADC1_CFG_Cfg_Sync_Conver                ((uint32_t)0x00010000)
N
N#define ADC1_CFG_TS_EN_Pos                      17
N#define ADC1_CFG_TS_EN                          ((uint32_t)0x00020000)
N
N#define ADC1_CFG_TS_BUF_EN_Pos                  18
N#define ADC1_CFG_TS_BUF_EN                      ((uint32_t)0x00040000)
N
N#define ADC1_CFG_SEL_TS_Pos                     19
N#define ADC1_CFG_SEL_TS                         ((uint32_t)0x00080000)
N
N#define ADC1_CFG_SEL_VREF_Pos                   20
N#define ADC1_CFG_SEL_VREF                       ((uint32_t)0x00100000)
N
N#define ADC1_CFG_TR_Pos                         21
N#define ADC1_CFG_TR_Msk                         ((uint32_t)0x01E00000)
N
N#define ADC1_CFG_Delay_Go_Pos                   25
N#define ADC1_CFG_Delay_Go_Msk                   ((uint32_t)0x0E000000)
N
N#define ADC1_CFG_Delay_ADC_Pos                  28
N#define ADC1_CFG_Delay_ADC_Msk                  ((uint32_t)0xF0000000)
N
N
N/** @} */ /* End of group Periph_ADC_ADC1_CFG_Bits */
N
N/** @} */ /* End of group Periph_ADC_Defines */
N
N/** @defgroup Periph_ADC_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_ADC_ADC2_CFG_Bits ADC2_CFG
N  * @{
N  */
N
N#define ADC2_CFG_Cfg_REG_ADON_Pos               0
N#define ADC2_CFG_Cfg_REG_ADON                   ((uint32_t)0x00000001)
N
N#define ADC2_CFG_Cfg_REG_GO_Pos                 1
N#define ADC2_CFG_Cfg_REG_GO                     ((uint32_t)0x00000002)
N
N#define ADC2_CFG_Cfg_REG_CLKS_Pos               2
N#define ADC2_CFG_Cfg_REG_CLKS                   ((uint32_t)0x00000004)
N
N#define ADC2_CFG_Cfg_REG_SAMPLE_Pos             3
N#define ADC2_CFG_Cfg_REG_SAMPLE                 ((uint32_t)0x00000008)
N
N#define ADC2_CFG_Cfg_REG_CHS_Pos                4
N#define ADC2_CFG_Cfg_REG_CHS_Msk                ((uint32_t)0x000001F0)
N
N#define ADC2_CFG_Cfg_REG_CHCH_Pos               9
N#define ADC2_CFG_Cfg_REG_CHCH                   ((uint32_t)0x00000200)
N
N#define ADC2_CFG_Cfg_REG_RNGC_Pos               10
N#define ADC2_CFG_Cfg_REG_RNGC                   ((uint32_t)0x00000400)
N
N#define ADC2_CFG_Cfg_M_REF_Pos                  11
N#define ADC2_CFG_Cfg_M_REF                      ((uint32_t)0x00000800)
N
N#define ADC2_CFG_Cfg_REG_DIVCLK_Pos             12
N#define ADC2_CFG_Cfg_REG_DIVCLK_Msk             ((uint32_t)0x0000F000)
N
N#define ADC2_CFG_ADC1_OP_Pos                    17
N#define ADC2_CFG_ADC1_OP                        ((uint32_t)0x00020000)
N
N#define ADC2_CFG_ADC2_OP_Pos                    18
N#define ADC2_CFG_ADC2_OP                        ((uint32_t)0x00040000)
N
N#define ADC2_CFG_Delay_Go_Pos                   25
N#define ADC2_CFG_Delay_Go_Msk                   ((uint32_t)0x0E000000)
N
N
N/** @} */ /* End of group Periph_ADC_ADC2_CFG_Bits */
N
N/** @} */ /* End of group Periph_ADC_Defines */
N
N/** @defgroup Periph_ADC_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_ADC_ADC1_RESULT_Bits ADC1_RESULT
N  * @{
N  */
N
N#define ADC1_RESULT_Pos                         0
N#define ADC1_RESULT_Msk                         ((uint32_t)0x00000FFF)
N
N#define ADC1_RESULT_CHANNEL_Pos                 16
N#define ADC1_RESULT_CHANNEL_Msk                 ((uint32_t)0x0FFF0000)
N
N
N/** @} */ /* End of group Periph_ADC_ADC1_RESULT_Bits */
N
N/** @} */ /* End of group Periph_ADC_Defines */
N
N/** @defgroup Periph_ADC_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_ADC_ADC2_RESULT_Bits ADC2_RESULT
N  * @{
N  */
N
N#define ADC2_RESULT_Pos                         0
N#define ADC2_RESULT_Msk                         ((uint32_t)0x00000FFF)
N
N#define ADC2_RESULT_CHANNEL_Pos                 16
N#define ADC2_RESULT_CHANNEL_Msk                 ((uint32_t)0x0FFF0000)
N
N
N/** @} */ /* End of group Periph_ADC_ADC2_RESULT_Bits */
N
N/** @} */ /* End of group Periph_ADC_Defines */
N
N/** @defgroup Periph_ADC_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_ADC_ADC1_STATUS_Bits ADC1_STATUS
N  * @{
N  */
N
N#define ADC1_STATUS_Flg_REG_OVERWRITE_Pos       0
N#define ADC1_STATUS_Flg_REG_OVERWRITE           ((uint32_t)0x00000001)
N
N#define ADC1_STATUS_Flg_REG_AWOIFEN_Pos         1
N#define ADC1_STATUS_Flg_REG_AWOIFEN             ((uint32_t)0x00000002)
N
N#define ADC1_STATUS_Flg_REG_EOCIF_Pos           2
N#define ADC1_STATUS_Flg_REG_EOCIF               ((uint32_t)0x00000004)
N
N#define ADC1_STATUS_AWOIF_IE_Pos                3
N#define ADC1_STATUS_AWOIF_IE                    ((uint32_t)0x00000008)
N
N#define ADC1_STATUS_ECOIF_IE_Pos                4
N#define ADC1_STATUS_ECOIF_IE                    ((uint32_t)0x00000010)
N
N
N/** @} */ /* End of group Periph_ADC_ADC1_STATUS_Bits */
N
N/** @} */ /* End of group Periph_ADC_Defines */
N
N/** @defgroup Periph_ADC_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_ADC_ADC2_STATUS_Bits ADC2_STATUS
N  * @{
N  */
N
N#define ADC2_STATUS_Flg_REG_OVERWRITE_Pos       0
N#define ADC2_STATUS_Flg_REG_OVERWRITE           ((uint32_t)0x00000001)
N
N#define ADC2_STATUS_Flg_REG_AWOIFEN_Pos         1
N#define ADC2_STATUS_Flg_REG_AWOIFEN             ((uint32_t)0x00000002)
N
N#define ADC2_STATUS_Flg_REG_EOCIF_Pos           2
N#define ADC2_STATUS_Flg_REG_EOCIF               ((uint32_t)0x00000004)
N
N#define ADC2_STATUS_AWOIF_IE_Pos                3
N#define ADC2_STATUS_AWOIF_IE                    ((uint32_t)0x00000008)
N
N#define ADC2_STATUS_ECOIF_IE_Pos                4
N#define ADC2_STATUS_ECOIF_IE                    ((uint32_t)0x00000010)
N
N
N/** @} */ /* End of group Periph_ADC_ADC2_STATUS_Bits */
N
N/** @} */ /* End of group Periph_ADC_Defines */
N
N/** @} */ /* End of group Periph_ADC */
N
N/** @} */ /* End of group __1986BE9x_Peripheral_Units */
N
N/** @} */ /* End of group __CMSIS */
N
N#endif /* __1986BE9X_ADC_DEFS_H */
N
N/******************* (C) COPYRIGHT 2010 Phyton *********************************
N*
N* END OF FILE 1986BE9x_adc_defs.h */
L 96 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x.h" 2
N#include "1986BE9x_dac_defs.h"
L 1 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x_dac_defs.h" 1
N/**
N  ******************************************************************************
N  * @file    1986BE9x_dac_defs.h
N  * @author  Phyton Application Team
N  * @version V1.0.0
N  * @date    24/09/2010
N  * @brief   This file contains all the Special Function Registers definitions
N  *          for the DAC peripheral unit used in the Milandr 1986BE9x
N  *          microcontrollers.
N  ******************************************************************************
N  * <br><br>
N  *
N  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
N  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
N  * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT
N  * OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
N  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
N  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
N  *
N  * <h2><center>&copy; COPYRIGHT 2010 Phyton</center></h2>
N  ******************************************************************************
N  * FILE 1986BE9x_dac_defs.h
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __1986BE9X_DAC_DEFS_H
N#define __1986BE9X_DAC_DEFS_H
N
N/** @addtogroup __CMSIS CMSIS
N  * @{
N  */
N
N/** @addtogroup __1986BE9x_Peripheral_Units 1986BE9x Peripheral Units
N  * @{
N  */
N
N/** @defgroup Periph_DAC DAC
N  * @{
N  */
N
N/** @defgroup Periph_DAC_Data_Structures Data Structures
N  * @{
N  */
N
N/** @defgroup Periph_DAC_TypeDef DAC_TypeDef
N  * @{
N  */
N
Ntypedef struct
N{
N  __IO uint32_t CFG;
X  volatile uint32_t CFG;
N  __IO uint32_t DAC1_DATA;
X  volatile uint32_t DAC1_DATA;
N  __IO uint32_t DAC2_DATA;
X  volatile uint32_t DAC2_DATA;
N}DAC_TypeDef;
N
N/** @} */ /* End of group Periph_DAC_TypeDef */
N
N/** @} */ /* End of group Periph_DAC_Data_Structures */
N
N/** @defgroup Periph_DAC_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_DAC_DAC_CFG_Bits DAC_CFG
N  * @{
N  */
N
N#define DAC_CFG_Cfg_M_REF0_Pos                  0
N#define DAC_CFG_Cfg_M_REF0                      ((uint32_t)0x00000001)
N
N#define DAC_CFG_Cfg_M_REF1_Pos                  1
N#define DAC_CFG_Cfg_M_REF1                      ((uint32_t)0x00000002)
N
N#define DAC_CFG_Cfg_ON_DAC0_Pos                 2
N#define DAC_CFG_Cfg_ON_DAC0                     ((uint32_t)0x00000004)
N
N#define DAC_CFG_Cfg_ON_DAC1_Pos                 3
N#define DAC_CFG_Cfg_ON_DAC1                     ((uint32_t)0x00000008)
N
N#define DAC_CFG_Cfg_SYNC_A_Pos                  4
N#define DAC_CFG_Cfg_SYNC_A                      ((uint32_t)0x00000010)
N
N
N/** @} */ /* End of group Periph_DAC_DAC_CFG_Bits */
N
N/** @} */ /* End of group Periph_DAC_Defines */
N
N/** @defgroup Periph_DAC_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_DAC_DAC1_DATA_Bits DAC1_DATA
N  * @{
N  */
N
N#define DAC1_DATA_DAC0DATA_Pos                  0
N#define DAC1_DATA_DAC0DATA_Msk                  ((uint32_t)0x00000FFF)
N
N#define DAC1_DATA_DAC1DATA_Pos                  16
N#define DAC1_DATA_DAC1DATA_Msk                  ((uint32_t)0x0FFF0000)
N
N
N/** @} */ /* End of group Periph_DAC_DAC1_DATA_Bits */
N
N/** @} */ /* End of group Periph_DAC_Defines */
N
N/** @defgroup Periph_DAC_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_DAC_DAC2_DATA_Bits DAC2_DATA
N  * @{
N  */
N
N#define DAC2_DATA_DAC1DATA_Pos                  0
N#define DAC2_DATA_DAC1DATA_Msk                  ((uint32_t)0x00000FFF)
N
N#define DAC2_DATA_DAC0DATA_Pos                  16
N#define DAC2_DATA_DAC0DATA_Msk                  ((uint32_t)0x0FFF0000)
N
N
N/** @} */ /* End of group Periph_DAC_DAC2_DATA_Bits */
N
N/** @} */ /* End of group Periph_DAC_Defines */
N
N/** @} */ /* End of group Periph_DAC */
N
N/** @} */ /* End of group __1986BE9x_Peripheral_Units */
N
N/** @} */ /* End of group __CMSIS */
N
N#endif /* __1986BE9X_DAC_DEFS_H */
N
N/******************* (C) COPYRIGHT 2010 Phyton *********************************
N*
N* END OF FILE 1986BE9x_dac_defs.h */
L 97 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x.h" 2
N#include "1986BE9x_comp_defs.h"
L 1 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x_comp_defs.h" 1
N/**
N  ******************************************************************************
N  * @file    1986BE9x_comp_defs.h
N  * @author  Phyton Application Team
N  * @version V1.0.0
N  * @date    24/09/2010
N  * @brief   This file contains all the Special Function Registers definitions
N  *          for the COMP peripheral unit used in the Milandr 1986BE9x
N  *          microcontrollers.
N  ******************************************************************************
N  * <br><br>
N  *
N  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
N  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
N  * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT
N  * OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
N  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
N  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
N  *
N  * <h2><center>&copy; COPYRIGHT 2010 Phyton</center></h2>
N  ******************************************************************************
N  * FILE 1986BE9x_comp_defs.h
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __1986BE9X_COMP_DEFS_H
N#define __1986BE9X_COMP_DEFS_H
N
N/** @addtogroup __CMSIS CMSIS
N  * @{
N  */
N
N/** @addtogroup __1986BE9x_Peripheral_Units 1986BE9x Peripheral Units
N  * @{
N  */
N
N/** @defgroup Periph_COMP COMP
N  * @{
N  */
N
N/** @defgroup Periph_COMP_Data_Structures Data Structures
N  * @{
N  */
N
N/** @defgroup Periph_COMP_TypeDef COMP_TypeDef
N  * @{
N  */
N
Ntypedef struct
N{
N  __IO uint32_t CFG;
X  volatile uint32_t CFG;
N  __IO uint32_t RESULT;
X  volatile uint32_t RESULT;
N  __IO uint32_t RESULT_LATCH;
X  volatile uint32_t RESULT_LATCH;
N}COMP_TypeDef;
N
N/** @} */ /* End of group Periph_COMP_TypeDef */
N
N/** @} */ /* End of group Periph_COMP_Data_Structures */
N
N/** @defgroup Periph_COMP_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_COMP_COMP_CFG_Bits COMP_CFG
N  * @{
N  */
N
N#define COMP_CFG_ON_Pos                         0
N#define COMP_CFG_ON                             ((uint32_t)0x00000001)
N
N#define COMP_CFG_CVRR_Pos                       1
N#define COMP_CFG_CVRR                           ((uint32_t)0x00000002)
N
N#define COMP_CFG_CVRSS_Pos                      2
N#define COMP_CFG_CVRSS                          ((uint32_t)0x00000004)
N
N#define COMP_CFG_CVREN_Pos                      3
N#define COMP_CFG_CVREN                          ((uint32_t)0x00000008)
N
N#define COMP_CFG_CVR_Pos                        4
N#define COMP_CFG_CVR_Msk                        ((uint32_t)0x000000F0)
N
N#define COMP_CFG_CREF_Pos                       8
N#define COMP_CFG_CREF                           ((uint32_t)0x00000100)
N
N#define COMP_CFG_CCH_Pos                        9
N#define COMP_CFG_CCH_Msk                        ((uint32_t)0x00000600)
N
N#define COMP_CFG_INV_Pos                        11
N#define COMP_CFG_INV                            ((uint32_t)0x00000800)
N
N#define COMP_CFG_Ready_Pos                      12
N#define COMP_CFG_Ready                          ((uint32_t)0x00001000)
N
N#define COMP_CFG_CMPIE_Pos                      13
N#define COMP_CFG_CMPIE                          ((uint32_t)0x00002000)
N
N
N/** @} */ /* End of group Periph_COMP_COMP_CFG_Bits */
N
N/** @} */ /* End of group Periph_COMP_Defines */
N
N/** @defgroup Periph_COMP_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_COMP_COMP_RESULT_Bits COMP_RESULT
N  * @{
N  */
N
N#define COMP_RESULT_Rslt_Sy_Pos                 0
N#define COMP_RESULT_Rslt_Sy                     ((uint32_t)0x00000001)
N
N#define COMP_RESULT_Rslt_As_Pos                 1
N#define COMP_RESULT_Rslt_As                     ((uint32_t)0x00000002)
N
N#define COMP_RESULT_Rst_lch_Pos                 2
N#define COMP_RESULT_Rst_lch                     ((uint32_t)0x00000004)
N
N
N/** @} */ /* End of group Periph_COMP_COMP_RESULT_Bits */
N
N/** @} */ /* End of group Periph_COMP_Defines */
N
N/** @} */ /* End of group Periph_COMP */
N
N/** @} */ /* End of group __1986BE9x_Peripheral_Units */
N
N/** @} */ /* End of group __CMSIS */
N
N#endif /* __1986BE9X_COMP_DEFS_H */
N
N/******************* (C) COPYRIGHT 2010 Phyton *********************************
N*
N* END OF FILE 1986BE9x_comp_defs.h */
L 98 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x.h" 2
N#include "1986BE9x_port_defs.h"
L 1 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x_port_defs.h" 1
N/**
N  ******************************************************************************
N  * @file    1986BE9x_port_defs.h
N  * @author  Phyton Application Team
N  * @version V1.0.0
N  * @date    24/09/2010
N  * @brief   This file contains all the Special Function Registers definitions
N  *          for the PORT peripheral unit used in the Milandr 1986BE9x
N  *          microcontrollers.
N  ******************************************************************************
N  * <br><br>
N  *
N  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
N  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
N  * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT
N  * OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
N  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
N  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
N  *
N  * <h2><center>&copy; COPYRIGHT 2010 Phyton</center></h2>
N  ******************************************************************************
N  * FILE 1986BE9x_port_defs.h
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __1986BE9X_PORT_DEFS_H
N#define __1986BE9X_PORT_DEFS_H
N
N/** @addtogroup __CMSIS CMSIS
N  * @{
N  */
N
N/** @addtogroup __1986BE9x_Peripheral_Units 1986BE9x Peripheral Units
N  * @{
N  */
N
N/** @defgroup Periph_PORT PORT
N  * @{
N  */
N
N/** @defgroup Periph_PORT_Data_Structures Data Structures
N  * @{
N  */
N
N/** @defgroup Periph_PORT_TypeDef PORT_TypeDef
N  * @{
N  */
N
Ntypedef struct
N{
N  __IO uint32_t RXTX;
X  volatile uint32_t RXTX;
N  __IO uint32_t OE;
X  volatile uint32_t OE;
N  __IO uint32_t FUNC;
X  volatile uint32_t FUNC;
N  __IO uint32_t ANALOG;
X  volatile uint32_t ANALOG;
N  __IO uint32_t PULL;
X  volatile uint32_t PULL;
N  __IO uint32_t PD;
X  volatile uint32_t PD;
N  __IO uint32_t PWR;
X  volatile uint32_t PWR;
N  __IO uint32_t GFEN;
X  volatile uint32_t GFEN;
N}PORT_TypeDef;
N
N/** @} */ /* End of group Periph_PORT_TypeDef */
N
N/** @} */ /* End of group Periph_PORT_Data_Structures */
N
N/** @defgroup Periph_PORT_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_PORT_PORT_FUNC_Bits PORT_FUNC
N  * @{
N  */
N
N#define PORT_FUNC_MODE0_Pos                     0
N#define PORT_FUNC_MODE0_Msk                     ((uint32_t)0x00000003)
N
N#define PORT_FUNC_MODE1_Pos                     2
N#define PORT_FUNC_MODE1_Msk                     ((uint32_t)0x0000000C)
N
N#define PORT_FUNC_MODE2_Pos                     4
N#define PORT_FUNC_MODE2_Msk                     ((uint32_t)0x00000030)
N
N#define PORT_FUNC_MODE3_Pos                     6
N#define PORT_FUNC_MODE3_Msk                     ((uint32_t)0x000000C0)
N
N#define PORT_FUNC_MODE4_Pos                     8
N#define PORT_FUNC_MODE4_Msk                     ((uint32_t)0x00000300)
N
N#define PORT_FUNC_MODE5_Pos                     10
N#define PORT_FUNC_MODE5_Msk                     ((uint32_t)0x00000C00)
N
N#define PORT_FUNC_MODE6_Pos                     12
N#define PORT_FUNC_MODE6_Msk                     ((uint32_t)0x00003000)
N
N#define PORT_FUNC_MODE7_Pos                     14
N#define PORT_FUNC_MODE7_Msk                     ((uint32_t)0x0000C000)
N
N#define PORT_FUNC_MODE8_Pos                     16
N#define PORT_FUNC_MODE8_Msk                     ((uint32_t)0x00030000)
N
N#define PORT_FUNC_MODE9_Pos                     18
N#define PORT_FUNC_MODE9_Msk                     ((uint32_t)0x000C0000)
N
N#define PORT_FUNC_MODE10_Pos                    20
N#define PORT_FUNC_MODE10_Msk                    ((uint32_t)0x00300000)
N
N#define PORT_FUNC_MODE11_Pos                    22
N#define PORT_FUNC_MODE11_Msk                    ((uint32_t)0x00C00000)
N
N#define PORT_FUNC_MODE12_Pos                    24
N#define PORT_FUNC_MODE12_Msk                    ((uint32_t)0x03000000)
N
N#define PORT_FUNC_MODE13_Pos                    26
N#define PORT_FUNC_MODE13_Msk                    ((uint32_t)0x0C000000)
N
N#define PORT_FUNC_MODE14_Pos                    28
N#define PORT_FUNC_MODE14_Msk                    ((uint32_t)0x30000000)
N
N#define PORT_FUNC_MODE15_Pos                    30
N#define PORT_FUNC_MODE15_Msk                    ((uint32_t)0xC0000000)
N
N
N/** @} */ /* End of group Periph_PORT_PORT_FUNC_Bits */
N
N/** @} */ /* End of group Periph_PORT_Defines */
N
N/** @defgroup Periph_PORT_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_PORT_PORT_PWR_Bits PORT_PWR
N  * @{
N  */
N
N#define PORT_PWR_PWR0_Pos                       0
N#define PORT_PWR_PWR0_Msk                       ((uint32_t)0x00000003)
N
N#define PORT_PWR_PWR1_Pos                       2
N#define PORT_PWR_PWR1_Msk                       ((uint32_t)0x0000000C)
N
N#define PORT_PWR_PWR2_Pos                       4
N#define PORT_PWR_PWR2_Msk                       ((uint32_t)0x00000030)
N
N#define PORT_PWR_PWR3_Pos                       6
N#define PORT_PWR_PWR3_Msk                       ((uint32_t)0x000000C0)
N
N#define PORT_PWR_PWR4_Pos                       8
N#define PORT_PWR_PWR4_Msk                       ((uint32_t)0x00000300)
N
N#define PORT_PWR_PWR5_Pos                       10
N#define PORT_PWR_PWR5_Msk                       ((uint32_t)0x00000C00)
N
N#define PORT_PWR_PWR6_Pos                       12
N#define PORT_PWR_PWR6_Msk                       ((uint32_t)0x00003000)
N
N#define PORT_PWR_PWR7_Pos                       14
N#define PORT_PWR_PWR7_Msk                       ((uint32_t)0x0000C000)
N
N#define PORT_PWR_PWR8_Pos                       16
N#define PORT_PWR_PWR8_Msk                       ((uint32_t)0x00030000)
N
N#define PORT_PWR_PWR9_Pos                       18
N#define PORT_PWR_PWR9_Msk                       ((uint32_t)0x000C0000)
N
N#define PORT_PWR_PWR10_Pos                      20
N#define PORT_PWR_PWR10_Msk                      ((uint32_t)0x00300000)
N
N#define PORT_PWR_PWR11_Pos                      22
N#define PORT_PWR_PWR11_Msk                      ((uint32_t)0x00C00000)
N
N#define PORT_PWR_PWR12_Pos                      24
N#define PORT_PWR_PWR12_Msk                      ((uint32_t)0x03000000)
N
N#define PORT_PWR_PWR13_Pos                      26
N#define PORT_PWR_PWR13_Msk                      ((uint32_t)0x0C000000)
N
N#define PORT_PWR_PWR14_Pos                      28
N#define PORT_PWR_PWR14_Msk                      ((uint32_t)0x30000000)
N
N#define PORT_PWR_PWR15_Pos                      30
N#define PORT_PWR_PWR15_Msk                      ((uint32_t)0xC0000000)
N
N
N/** @} */ /* End of group Periph_PORT_PORT_PWR_Bits */
N
N/** @} */ /* End of group Periph_PORT_Defines */
N
N/** @} */ /* End of group Periph_PORT */
N
N/** @} */ /* End of group __1986BE9x_Peripheral_Units */
N
N/** @} */ /* End of group __CMSIS */
N
N#endif /* __1986BE9X_PORT_DEFS_H */
N
N/******************* (C) COPYRIGHT 2010 Phyton *********************************
N*
N* END OF FILE 1986BE9x_port_defs.h */
L 99 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x.h" 2
N#include "1986BE9x_bkp_defs.h"
L 1 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x_bkp_defs.h" 1
N/**
N  ******************************************************************************
N  * @file    1986BE9x_bkp_defs.h
N  * @author  Phyton Application Team
N  * @version V1.0.0
N  * @date    24/09/2010
N  * @brief   This file contains all the Special Function Registers definitions
N  *          for the BKP peripheral unit used in the Milandr 1986BE9x
N  *          microcontrollers.
N  ******************************************************************************
N  * <br><br>
N  *
N  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
N  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
N  * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT
N  * OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
N  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
N  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
N  *
N  * <h2><center>&copy; COPYRIGHT 2010 Phyton</center></h2>
N  ******************************************************************************
N  * FILE 1986BE9x_bkp_defs.h
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __1986BE9X_BKP_DEFS_H
N#define __1986BE9X_BKP_DEFS_H
N
N/** @addtogroup __CMSIS CMSIS
N  * @{
N  */
N
N/** @addtogroup __1986BE9x_Peripheral_Units 1986BE9x Peripheral Units
N  * @{
N  */
N
N/** @defgroup Periph_BKP BKP
N  * @{
N  */
N
N/** @defgroup Periph_BKP_Data_Structures Data Structures
N  * @{
N  */
N
N/** @defgroup Periph_BKP_TypeDef BKP_TypeDef
N  * @{
N  */
N
Ntypedef struct
N{
N  __IO uint32_t REG_00;
X  volatile uint32_t REG_00;
N  __IO uint32_t REG_01;
X  volatile uint32_t REG_01;
N  __IO uint32_t REG_02;
X  volatile uint32_t REG_02;
N  __IO uint32_t REG_03;
X  volatile uint32_t REG_03;
N  __IO uint32_t REG_04;
X  volatile uint32_t REG_04;
N  __IO uint32_t REG_05;
X  volatile uint32_t REG_05;
N  __IO uint32_t REG_06;
X  volatile uint32_t REG_06;
N  __IO uint32_t REG_07;
X  volatile uint32_t REG_07;
N  __IO uint32_t REG_08;
X  volatile uint32_t REG_08;
N  __IO uint32_t REG_09;
X  volatile uint32_t REG_09;
N  __IO uint32_t REG_0A;
X  volatile uint32_t REG_0A;
N  __IO uint32_t REG_0B;
X  volatile uint32_t REG_0B;
N  __IO uint32_t REG_0C;
X  volatile uint32_t REG_0C;
N  __IO uint32_t REG_0D;
X  volatile uint32_t REG_0D;
N  __IO uint32_t REG_0E;
X  volatile uint32_t REG_0E;
N  __IO uint32_t REG_0F;
X  volatile uint32_t REG_0F;
N  __IO uint32_t RTC_CNT;
X  volatile uint32_t RTC_CNT;
N  __IO uint32_t RTC_DIV;
X  volatile uint32_t RTC_DIV;
N  __IO uint32_t RTC_PRL;
X  volatile uint32_t RTC_PRL;
N  __IO uint32_t RTC_ALRM;
X  volatile uint32_t RTC_ALRM;
N  __IO uint32_t RTC_CS;
X  volatile uint32_t RTC_CS;
N}BKP_TypeDef;
N
N/** @} */ /* End of group Periph_BKP_TypeDef */
N
N/** @} */ /* End of group Periph_BKP_Data_Structures */
N
N/** @defgroup Periph_BKP_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_BKP_BKP_REG_0E_Bits BKP_REG_0E
N  * @{
N  */
N
N#define BKP_REG_0E_LOW_Pos                      0
N#define BKP_REG_0E_LOW_Msk                      ((uint32_t)0x00000007)
N
N#define BKP_REG_0E_SelectRI_Pos                 3
N#define BKP_REG_0E_SelectRI_Msk                 ((uint32_t)0x00000038)
N
N#define BKP_REG_0E_JTAGA_Pos                    6
N#define BKP_REG_0E_JTAGA                        ((uint32_t)0x00000040)
N
N#define BKP_REG_0E_JTAGB_Pos                    7
N#define BKP_REG_0E_JTAGB                        ((uint32_t)0x00000080)
N
N#define BKP_REG_0E_Trim_Pos                     8
N#define BKP_REG_0E_Trim_Msk                     ((uint32_t)0x00000700)
N
N#define BKP_REG_0E_FPOR_Pos                     11
N#define BKP_REG_0E_FPOR                         ((uint32_t)0x00000800)
N
N#define BKP_REG_0E_BKP_REG_Pos                  12
N#define BKP_REG_0E_BKP_REG_Msk                  ((uint32_t)0xFFFFF000)
N
N
N/** @} */ /* End of group Periph_BKP_BKP_REG_0E_Bits */
N
N/** @} */ /* End of group Periph_BKP_Defines */
N
N/** @defgroup Periph_BKP_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_BKP_BKP_REG_0F_Bits BKP_REG_0F
N  * @{
N  */
N
N#define BKP_REG_0F_LSE_ON_Pos                   0
N#define BKP_REG_0F_LSE_ON                       ((uint32_t)0x00000001)
N
N#define BKP_REG_0F_LSE_BYP_Pos                  1
N#define BKP_REG_0F_LSE_BYP                      ((uint32_t)0x00000002)
N
N#define BKP_REG_0F_RTC_SEL_Pos                  2
N#define BKP_REG_0F_RTC_SEL_Msk                  ((uint32_t)0x0000000C)
N
N#define BKP_REG_0F_RTC_EN_Pos                   4
N#define BKP_REG_0F_RTC_EN                       ((uint32_t)0x00000010)
N
N#define BKP_REG_0F_CAL_Pos                      5
N#define BKP_REG_0F_CAL_Msk                      ((uint32_t)0x00001FE0)
N
N#define BKP_REG_0F_LSE_RDY_Pos                  13
N#define BKP_REG_0F_LSE_RDY                      ((uint32_t)0x00002000)
N
N#define BKP_REG_0F_BKP_REG_Pos                  14
N#define BKP_REG_0F_BKP_REG                      ((uint32_t)0x00004000)
N
N#define BKP_REG_0F_LSI_ON_Pos                   15
N#define BKP_REG_0F_LSI_ON                       ((uint32_t)0x00008000)
N
N#define BKP_REG_0F_LSI_TRIM_Pos                 16
N#define BKP_REG_0F_LSI_TRIM_Msk                 ((uint32_t)0x001F0000)
N
N#define BKP_REG_0F_LSI_RDY_Pos                  21
N#define BKP_REG_0F_LSI_RDY                      ((uint32_t)0x00200000)
N
N#define BKP_REG_0F_HSI_ON_Pos                   22
N#define BKP_REG_0F_HSI_ON                       ((uint32_t)0x00400000)
N
N#define BKP_REG_0F_HSI_RDY_Pos                  23
N#define BKP_REG_0F_HSI_RDY                      ((uint32_t)0x00800000)
N
N#define BKP_REG_0F_HSI_TRIM_Pos                 24
N#define BKP_REG_0F_HSI_TRIM_Msk                 ((uint32_t)0x3F000000)
N
N#define BKP_REG_0F_STANDBY_Pos                  30
N#define BKP_REG_0F_STANDBY                      ((uint32_t)0x40000000)
N
N#define BKP_REG_0F_RTC_RESET_Pos                31
N#define BKP_REG_0F_RTC_RESET                    ((uint32_t)0x80000000)
N
N
N/** @} */ /* End of group Periph_BKP_BKP_REG_0F_Bits */
N
N/** @} */ /* End of group Periph_BKP_Defines */
N
N/** @defgroup Periph_BKP_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_BKP_BKP_RTC_CS_Bits BKP_RTC_CS
N  * @{
N  */
N
N#define BKP_RTC_CS_OWF_Pos                      0
N#define BKP_RTC_CS_OWF                          ((uint32_t)0x00000001)
N
N#define BKP_RTC_CS_SECF_Pos                     1
N#define BKP_RTC_CS_SECF                         ((uint32_t)0x00000002)
N
N#define BKP_RTC_CS_ALRF_Pos                     2
N#define BKP_RTC_CS_ALRF                         ((uint32_t)0x00000004)
N
N#define BKP_RTC_CS_OWF_IE_Pos                   3
N#define BKP_RTC_CS_OWF_IE                       ((uint32_t)0x00000008)
N
N#define BKP_RTC_CS_SECF_IE_Pos                  4
N#define BKP_RTC_CS_SECF_IE                      ((uint32_t)0x00000010)
N
N#define BKP_RTC_CS_ALRF_IE_Pos                  5
N#define BKP_RTC_CS_ALRF_IE                      ((uint32_t)0x00000020)
N
N#define BKP_RTC_CS_WEC_Pos                      6
N#define BKP_RTC_CS_WEC                          ((uint32_t)0x00000040)
N
N
N/** @} */ /* End of group Periph_BKP_BKP_RTC_CS_Bits */
N
N/** @} */ /* End of group Periph_BKP_Defines */
N
N/** @} */ /* End of group Periph_BKP */
N
N/** @} */ /* End of group __1986BE9x_Peripheral_Units */
N
N/** @} */ /* End of group __CMSIS */
N
N#endif /* __1986BE9X_BKP_DEFS_H */
N
N/******************* (C) COPYRIGHT 2010 Phyton *********************************
N*
N* END OF FILE 1986BE9x_bkp_defs.h */
L 100 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x.h" 2
N#include "1986BE9x_ext_bus_defs.h"
L 1 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x_ext_bus_defs.h" 1
N/**
N  ******************************************************************************
N  * @file    1986BE9x_ext_bus_defs.h
N  * @author  Phyton Application Team
N  * @version V1.0.0
N  * @date    03/02/2011
N  * @brief   This file contains all the Special Function Registers definitions
N  *          for the EXT_BUS peripheral unit used in the Milandr 1986BE9x
N  *          microcontrollers.
N  ******************************************************************************
N  * <br><br>
N  *
N  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
N  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
N  * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT
N  * OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
N  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
N  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
N  *
N  * <h2><center>&copy; COPYRIGHT 2010 Phyton</center></h2>
N  ******************************************************************************
N  * FILE 1986BE9x_ext_bus_defs.h
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __1986BE9X_EXT_BUS_DEFS_H
N#define __1986BE9X_EXT_BUS_DEFS_H
N
N/** @addtogroup __CMSIS CMSIS
N  * @{
N  */
N
N/** @addtogroup __1986BE9x_Peripheral_Units 1986BE9x Peripheral Units
N  * @{
N  */
N
N/** @defgroup Periph_EXT_BUS EXT_BUS
N  * @{
N  */
N
N/** @defgroup Periph_EXT_BUS_Data_Structures Data Structures
N  * @{
N  */
N
N/** @defgroup Periph_EXT_BUS_TypeDef EXT_BUS_TypeDef
N  * @{
N  */
N
Ntypedef struct
N{
N       uint32_t RESERVED0[20];
N  __IO uint32_t NAND_CYCLES;
X  volatile uint32_t NAND_CYCLES;
N  __IO uint32_t CONTROL;
X  volatile uint32_t CONTROL;
N}EXT_BUS_TypeDef;
N
N/** @} */ /* End of group Periph_EXT_BUS_TypeDef */
N
N/** @} */ /* End of group Periph_EXT_BUS_Data_Structures */
N
N/** @defgroup Periph_EXT_BUS_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_EXT_BUS_EXT_BUS_NAND_CYCLES_Bits EXT_BUS_NAND_CYCLES
N  * @{
N  */
N
N#define EXT_BUS_NAND_CYCLES_TRC_Pos             0
N#define EXT_BUS_NAND_CYCLES_TRC_Msk             ((uint32_t)0x0000000F)
N
N#define EXT_BUS_NAND_CYCLES_TWC_Pos             4
N#define EXT_BUS_NAND_CYCLES_TWC_Msk             ((uint32_t)0x000000F0)
N
N#define EXT_BUS_NAND_CYCLES_TREA_Pos            8
N#define EXT_BUS_NAND_CYCLES_TREA_Msk            ((uint32_t)0x00000F00)
N
N#define EXT_BUS_NAND_CYCLES_TWP_Pos             12
N#define EXT_BUS_NAND_CYCLES_TWP_Msk             ((uint32_t)0x0000F000)
N
N#define EXT_BUS_NAND_CYCLES_TWHR_Pos            16
N#define EXT_BUS_NAND_CYCLES_TWHR_Msk            ((uint32_t)0x000F0000)
N
N#define EXT_BUS_NAND_CYCLES_TALEA_Pos           20
N#define EXT_BUS_NAND_CYCLES_TALEA_Msk           ((uint32_t)0x00F00000)
N
N#define EXT_BUS_NAND_CYCLES_TRR_Pos             24
N#define EXT_BUS_NAND_CYCLES_TRR_Msk             ((uint32_t)0x0F000000)
N
N
N/** @} */ /* End of group Periph_EXT_BUS_EXT_BUS_NAND_CYCLES_Bits */
N
N/** @} */ /* End of group Periph_EXT_BUS_Defines */
N
N/** @defgroup Periph_EXT_BUS_Defines Defines
N  * @{
N  */
N
N/** @defgroup Periph_EXT_BUS_EXT_BUS_CONTROL_Bits EXT_BUS_CONTROL
N  * @{
N  */
N
N#define EXT_BUS_CONTROL_ROM_Pos                 0
N#define EXT_BUS_CONTROL_ROM                     ((uint32_t)0x00000001)
N
N#define EXT_BUS_CONTROL_RAM_Pos                 1
N#define EXT_BUS_CONTROL_RAM                     ((uint32_t)0x00000002)
N
N#define EXT_BUS_CONTROL_NAND_Pos                2
N#define EXT_BUS_CONTROL_NAND                    ((uint32_t)0x00000004)
N
N#define EXT_BUS_CONTROL_CPOL_Pos                3
N#define EXT_BUS_CONTROL_CPOL                    ((uint32_t)0x00000008)
N
N#define EXT_BUS_CONTROL_BUSY_Pos                7
N#define EXT_BUS_CONTROL_BUSY                    ((uint32_t)0x00000080)
N
N#define EXT_BUS_CONTROL_WAIT_STATE_Pos          12
N#define EXT_BUS_CONTROL_WAIT_STATE_Msk          ((uint32_t)0x0000F000)
N
N
N/** @} */ /* End of group Periph_EXT_BUS_EXT_BUS_CONTROL_Bits */
N
N/** @} */ /* End of group Periph_EXT_BUS_Defines */
N
N/** @} */ /* End of group Periph_EXT_BUS */
N
N/** @} */ /* End of group __1986BE9x_Peripheral_Units */
N
N/** @} */ /* End of group __CMSIS */
N
N#endif /* __1986BE9X_EXT_BUS_DEFS_H */
N
N/******************* (C) COPYRIGHT 2010 Phyton *********************************
N*
N* END OF FILE 1986BE9x_ext_bus_defs.h */
L 101 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\inc\1986BE9x.h" 2
N
Ntypedef enum {RESET = 0, SET = !RESET} FlagStatus, ITStatus;
N
Ntypedef enum {DISABLE = 0, ENABLE = !DISABLE} FunctionalState;
N#define IS_FUNCTIONAL_STATE(STATE) (((STATE) == DISABLE) || ((STATE) == ENABLE))
N
Ntypedef enum {ERROR = 0, SUCCESS = !ERROR} ErrorStatus;
N
N/** @} */ /* End of group __Exported_types */
N
N
N/** @defgroup __Peripheral_Memory_Map Peripheral Memory Map
N  * @{
N  */
N
N#define CAN1_BASE           0x40000000
N#define CAN2_BASE           0x40008000
N#define USB_BASE            0x40010000
N#define EEPROM_BASE         0x40018000
N#define RST_CLK_BASE        0x40020000
N#define DMA_BASE            0x40028000
N#define UART1_BASE          0x40030000
N#define UART2_BASE          0x40038000
N#define SSP1_BASE           0x40040000
N#define I2C_BASE            0x40050000
N#define POWER_BASE          0x40058000
N#define WWDG_BASE           0x40060000
N#define IWDG_BASE           0x40068000
N#define TIMER1_BASE         0x40070000
N#define TIMER2_BASE         0x40078000
N#define TIMER3_BASE         0x40080000
N#define ADC_BASE            0x40088000
N#define DAC_BASE            0x40090000
N#define COMP_BASE           0x40098000
N#define SSP2_BASE           0x400A0000
N#define PORTA_BASE          0x400A8000
N#define PORTB_BASE          0x400B0000
N#define PORTC_BASE          0x400B8000
N#define PORTD_BASE          0x400C0000
N#define PORTE_BASE          0x400C8000
N#define BKP_BASE            0x400D8000
N#define PORTF_BASE          0x400E8000
N#define EXT_BUS_BASE        0x400F0000
N
N/** @} */ /* End of group __Peripheral_Memory_Map */
N
N/** @defgroup __Peripheral_declaration Peripheral declaration
N  * @{
N  */
N
N#define CAN1                ((CAN_TypeDef*)     CAN1_BASE)
N#define CAN2                ((CAN_TypeDef*)     CAN2_BASE)
N#define USB                 ((USB_TypeDef*)     USB_BASE)
N#define EEPROM              ((EEPROM_TypeDef*)  EEPROM_BASE)
N#define RST_CLK             ((RST_CLK_TypeDef*) RST_CLK_BASE)
N#define DMA                 ((DMA_TypeDef*)     DMA_BASE)
N#define UART1               ((UART_TypeDef*)    UART1_BASE)
N#define UART2               ((UART_TypeDef*)    UART2_BASE)
N#define SSP1                ((SSP_TypeDef*)     SSP1_BASE)
N#define I2C                 ((I2C_TypeDef*)     I2C_BASE)
N#define POWER               ((POWER_TypeDef*)   POWER_BASE)
N#define WWDG                ((WWDG_TypeDef*)    WWDG_BASE)
N#define IWDG                ((IWDG_TypeDef*)    IWDG_BASE)
N#define TIMER1              ((TIMER_TypeDef*)   TIMER1_BASE)
N#define TIMER2              ((TIMER_TypeDef*)   TIMER2_BASE)
N#define TIMER3              ((TIMER_TypeDef*)   TIMER3_BASE)
N#define ADC                 ((ADC_TypeDef*)     ADC_BASE)
N#define DAC                 ((DAC_TypeDef*)     DAC_BASE)
N#define COMP                ((COMP_TypeDef*)    COMP_BASE)
N#define SSP2                ((SSP_TypeDef*)     SSP2_BASE)
N#define PORTA               ((PORT_TypeDef*)    PORTA_BASE)
N#define PORTB               ((PORT_TypeDef*)    PORTB_BASE)
N#define PORTC               ((PORT_TypeDef*)    PORTC_BASE)
N#define PORTD               ((PORT_TypeDef*)    PORTD_BASE)
N#define PORTE               ((PORT_TypeDef*)    PORTE_BASE)
N#define BKP                 ((BKP_TypeDef*)     BKP_BASE)
N#define PORTF               ((PORT_TypeDef*)    PORTF_BASE)
N#define EXT_BUS             ((EXT_BUS_TypeDef*) EXT_BUS_BASE)
N
N/** @} */ /* End of group __Peripheral_declaration */
N
N/** @} */ /* End of group __1986BE9X */
N
N/** @} */ /* End of group __CMSIS */
N
N#endif /* __1986BE9X_H */
N
N/******************* (C) COPYRIGHT 2010 Phyton *********************************
N*
N* END OF FILE 1986BE9x.h */
L 37 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\startup\arm\system_1986BE9x.c" 2
N#include "1986BE9x_config.h"
L 1 "..\1986BE9x_config.h" 1
N/**
N  ******************************************************************************
N  * @file    1986BE9x_Demo\Project\Demo\1986be9x_config.h
N  * @author  Milandr Application Team
N  * @version V1.0.0
N  * @date    10/07/2010
N  * @brief   Library configuration file.
N  ******************************************************************************
N  * <br><br>
N  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
N  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
N  * TIME. AS A RESULT, MILANDR SHALL NOT BE HELD LIABLE FOR ANY
N  * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
N  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
N  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
N  *
N  * <h2><center>&copy; COPYRIGHT 2011 Milandr</center></h2>
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __1986BE9x_CONFIG_H
N#define __1986BE9x_CONFIG_H
N
N#include "1986BE9x_lib.h"
L 1 "..\..\..\Library\Libraries\1986BE9x_StdPeriph_Driver\inc\1986BE9x_lib.h" 1
N/**
N  ******************************************************************************
N  * @file    1986BE9x_lib.h
N  * @author  Phyton Application Team
N  * @version V1.0.1
N  * @date    23/03/2011
N  * @brief   This file contains all file IDs of the Milandr 1986BE9x
N  *          firmware library source files.
N  ******************************************************************************
N  * <br><br>
N  *
N  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
N  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
N  * TIME. AS A RESULT, PHYTON SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT
N  * OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
N  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
N  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
N  *
N  * <h2><center>&copy; COPYRIGHT 2010 Phyton</center></h2>
N  ******************************************************************************
N  * FILE 1986BE9x_lib.h
N  */
N
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef __1986BE9X_LIB_H
N#define __1986BE9X_LIB_H
N
N#define  FILEID__1986BE9X_CAN_C               1
N#define  FILEID__1986BE9X_USB_C               2
N#define  FILEID__1986BE9X_EEPROM_C            3
N#define  FILEID__1986BE9X_RST_CLK_C           4
N#define  FILEID__1986BE9X_DMA_C               5
N#define  FILEID__1986BE9X_UART_C              6
N#define  FILEID__1986BE9X_SSP_C               7
N#define  FILEID__1986BE9X_I2C_C               8
N#define  FILEID__1986BE9X_POWER_C             9
N#define  FILEID__1986BE9X_WWDG_C             10
N#define  FILEID__1986BE9X_IWDG_C             11
N#define  FILEID__1986BE9X_TIMER_C            12
N#define  FILEID__1986BE9X_ADC_C              13
N#define  FILEID__1986BE9X_DAC_C              14
N#define  FILEID__1986BE9X_COMP_C             15
N#define  FILEID__1986BE9X_PORT_C             16
N#define  FILEID__1986BE9X_BKP_C              17
N#define  FILEID__1986BE9X_EXT_BUS_C          18
N#define  FILEID__1986BE9X_USB_DEVICE_C       19
N#define  FILEID__1986BE9X_USB_CDC_C          20
N
N#define  FILEID__USER_LO                    100
N
N/* Supported USB Device Classes */
N#define USB_DEVICE_CLASS_CDC 2
N
N#endif /* __1986BE9X_LIB_H */
N
N/******************* (C) COPYRIGHT 2010 Phyton *********************************
N*
N* END OF FILE 1986BE9x_lib.h */
N
L 25 "..\1986BE9x_config.h" 2
N#include "stdint.h"
L 1 "..\..\..\Library\Libraries\CMSIS\CM3\CoreSupport\stdint.h" 1
N/*********************************************************************/
N/*                                                                   */
N/*             stdint.h standard header                              */
N/*                                                                   */
N/*                (c) 2010, Phyton                                   */
N/*********************************************************************/
N
N#ifndef __STDINT_H
N#define __STDINT_H
N
N
N   typedef   signed          char int8_t;
N   typedef   signed short     int int16_t;
N   typedef   signed           int int32_t;
N
N   typedef unsigned          char uint8_t;
N   typedef unsigned short     int uint16_t;
N   typedef unsigned           int uint32_t;
N
N   typedef   signed          char int_least8_t;
N   typedef   signed short     int int_least16_t;
N   typedef   signed           int int_least32_t;
N
N   typedef unsigned          char uint_least8_t;
N   typedef unsigned short     int uint_least16_t;
N   typedef unsigned           int uint_least32_t;
N
N   typedef   signed           int int_fast8_t;
N   typedef   signed           int int_fast16_t;
N   typedef   signed           int int_fast32_t;
N
N   typedef unsigned           int uint_fast8_t;
N   typedef unsigned           int uint_fast16_t;
N   typedef unsigned           int uint_fast32_t;
N
N   typedef   signed           int intptr_t;
N   typedef unsigned           int uintptr_t;
N
N   #define INT8_MIN           (-127-1)
N   #define INT16_MIN          (-32767-1)
N   #define INT32_MIN          (-2147483647-1)
N
N   #define INT8_MAX           +127
N   #define INT16_MAX          +32767
N   #define INT32_MAX          +2147483647
N
N   #define UINT8_MAX          255
N   #define UINT16_MAX         65535U
N   #define UINT32_MAX         4294967295U
N
N   #define INT_LEAST8_MIN     (-127-1)           
N   #define INT_LEAST16_MIN    (-32767-1)         
N   #define INT_LEAST32_MIN    (-2147483647-1)    
N   
N   #define INT_LEAST8_MAX     +127                 
N   #define INT_LEAST16_MAX    +32767               
N   #define INT_LEAST32_MAX    +2147483647          
N   
N   #define UINT_LEAST8_MAX    255          
N   #define UINT_LEAST16_MAX   65535U       
N   #define UINT_LEAST32_MAX   4294967295U
N
N
N   #define INT_FAST8_MIN      INT32_MIN
N   #define INT_FAST16_MIN     INT32_MIN
N   #define INT_FAST32_MIN     INT32_MIN
N   
N   #define INT_FAST8_MAX      INT32_MAX       
N   #define INT_FAST16_MAX     INT32_MAX       
N   #define INT_FAST32_MAX     INT32_MAX       
N   
N   #define UINT_FAST8_MAX     UINT32_MAX       
N   #define UINT_FAST16_MAX    UINT32_MAX       
N   #define UINT_FAST32_MAX    UINT32_MAX       
N   
N   #define INTPTR_MIN         INT32_MIN
N   #define INTPTR_MAX         INT32_MAX
N   #define UINTPTR_MAX        UINT32_MAX
N
N   #define PTRDIFF_MIN        INT32_MIN
N   #define PTRDIFF_MAX        INT32_MAX
N   
N   #define SIG_ATOMIC_MIN     INT32_MIN
N   #define SIG_ATOMIC_MAX     INT32_MAX
N
N   #define SIZE_MAX           UINT32_MAX
N
N   #define WCHAR_MIN          0
N   #define WCHAR_MAX          UINT16_MAX
N
N   #define WINT_MIN           INT32_MIN
N   #define WINT_MAX           INT32_MAX
N
N   #define INT8_C(x)          (x)
N   #define INT16_C(x)         (x)
N   #define INT32_C(x)         (x)
N
N   #define UINT8_C(x)         (x ## u)
N   #define UINT16_C(x)        (x ## u)
N   #define UINT32_C(x)        (x ## u)
N   
N#endif /* __STDINT_H */
N   
N/* end of stdint.h */
N   
N
L 26 "..\1986BE9x_config.h" 2
N
N/* Uncomment the line(s) below to define used JTAG port(s). Leave all commented
N * if there is no JTAG ports */
N#define USE_JTAG_A
N/* #define USE_JTAG_B */
N
N/* Target system parameters */
N/* RST_CLK generators frequencies in HZ */
N#define HSI_Value       ((uint32_t)8000000)
N#define HSE_Value       ((uint32_t)8000000)
N#define LSI_Value       ((uint32_t)40000)
N#define LSE_Value       ((uint32_t)32768)
N
N/* RST_CLK frequencies startup timeouts settings */
N#define HSEonTimeOut    ((uint16_t)0x0600)
N#define LSEonTimeOut    ((uint16_t)0x0600)
N#define HSIonTimeOut    ((uint16_t)0x0600)
N#define LSIonTimeOut    ((uint16_t)0x0600)
N#define PLLCPUonTimeOut ((uint16_t)0x0600)
N#define PLLUSBonTimeOut ((uint16_t)0x0600)
N
N#define FLASH_PROG_FREQ_MHZ                     (8.0)
N
N/* DMA configuration parameters */
N/* Number of DMA channels to use */
N#define DMA_Channels_Number   32          /* This parameter is in range 1..32 */
N
N/* Alternate Control Data Structure Usage */
N/* This parameter can be a value of:
N    0 = DMA_ALternateDataDisabled;
N    1 = DMA_ALternateDataEnabled; */
N/*#define DMA_AlternateData   0 */          /* DMA_AlternateDataDisabled */
N#define DMA_AlternateData   1             /* DMA_AlternateDataEnabled */
N
N/* USB configuration parameters ----------------------------------------------*/
N/* Uncomment one of the lines below to select the Device Class. Leave all commented
N * if the desired device class is not currently supported by USB library */
N#define USB_DEVICE_CLASS  USB_DEVICE_CLASS_CDC
N
N/* USB Device management */
N/* Uncomment the line below to enable appropriate functionality. */
N/* #define USB_REMOTE_WAKEUP_SUPPORTED */
N/* #define USB_SELF_POWERED_SUPPORTED */
N
N/* Uncomment the line below to let the library provide USB interrupt handler.
N * Leave this line commented if you are willing to implement the handler yourself. */
N#define USB_INT_HANDLE_REQUIRED
N
N/* USB CDC management */
N/* Uncomment the lines below to enable appropriate functionality. */
N#define USB_CDC_STATE_REPORTING_SUPPORTED
N/* #define USB_CDC_ENCAPSULATION_SUPPORTED */
N/* #define USB_CDC_COMM_FEATURE_SUPPORTED */
N#define USB_CDC_LINE_CODING_SUPPORTED
N/* #define USB_CDC_CONTROL_LINE_STATE_SUPPORTED */
N/* #define USB_CDC_LINE_BREAK_SUPPORTED */
N
N/* Known errors workaround control -------------------------------------------*/
N/* 1986BE9x Series Errata Notice, Error 0002 */
N#define WORKAROUND_1986BE9X_ERROR_0002
N
N/* Parameter run-time check support ------------------------------------------*/
N
N/* Select one of the following values of USE_ASSERT_INFO macro to control
N   parameter checking in the Standard Peripheral Library drivers:
N     0 - no parameter checks ("assert_param" macro is disabled);
N     1 - check enabled, source file ID and line number are available;
N     2 - check enabled, source file ID, line number and checking expression
N         (as string) are available (increased code size).
N*/
N#define USE_ASSERT_INFO    0
N/* #define USE_ASSERT_INFO    1 */
N/* #define USE_ASSERT_INFO    2 */
N
N/**
N  * @brief  The assert_param macro is used for function's parameters check.
N  * @param  expr: If expr is false, it calls assert_failed user's function
N  *   which gets the source file ID (see 1986be9x_lib.h), line number and
N  *   expression text (if USE_ASSERT_INFO == 2) of the call that failed. That
N  *   function should not return. If expr is true, nothing is done.
N  * @retval None
N  */
N#if (USE_ASSERT_INFO == 0)
X#if (0 == 0)
N  #define assert_param(expr) ((void)0)
N#elif (USE_ASSERT_INFO == 1)
S  #define assert_param(expr) ((expr) ? (void)0 : assert_failed(ASSERT_INFO_FILE_ID, __LINE__))
S  void assert_failed(uint32_t file_id, uint32_t line);
S#elif (USE_ASSERT_INFO == 2)
S  #define assert_param(expr) ((expr) ? (void)0 : assert_failed(ASSERT_INFO_FILE_ID, __LINE__, #expr))
S  void assert_failed(uint32_t file_id, uint32_t line, const uint8_t* expr);
S#else
S  #error "Unsupported USE_ASSERT_INFO level"
N#endif /* USE_ASSERT_INFO */
N
N#endif /* __1986BE9x_CONFIG_H */
N
N/******************* (C) COPYRIGHT 2011 Milandr *********************************
N*
N* END OF FILE 1986BE9x_config.h */
N
L 38 "..\..\..\Library\Libraries\CMSIS\CM3\DeviceSupport\1986BE9x\startup\arm\system_1986BE9x.c" 2
N
N/** @} */ /* End of group System_Private_Includes */
N
N/** @addtogroup __1986BE9X_System_Private_Variables 1986BE9X System Private Variables
N  * @{
N  */
N
N/*******************************************************************************
N*  Clock Definitions
N*******************************************************************************/
N  uint32_t SystemCoreClock = (uint32_t)8000000;         /*!< System Clock Frequency (Core Clock)
N                                                         *   default value */
N
N/** @} */ /* End of group __1986BE9X_System_Private_Variables */
N
N/** @addtogroup __1986BE9X_System_Private_Functions 1986BE9X System Private Functions
N  * @{
N  */
N
N/**
N  * @brief  Update SystemCoreClock according to Clock Register Values
N  * @note   None
N  * @param  None
N  * @retval None
N  */
Nvoid SystemCoreClockUpdate (void)
N{
N  uint32_t cpu_c1_freq, cpu_c2_freq, cpu_c3_freq;
N  uint32_t pll_mul;
N
N  /* Compute CPU_CLK frequency */
N
N  /* Determine CPU_C1 frequency */
N  if ((RST_CLK->CPU_CLOCK & (uint32_t)0x00000002) == (uint32_t)0x00000002)
X  if ((((RST_CLK_TypeDef*) 0x40020000)->CPU_CLOCK & (uint32_t)0x00000002) == (uint32_t)0x00000002)
N  {
N    cpu_c1_freq = HSE_Value;
X    cpu_c1_freq = ((uint32_t)8000000);
N  }
N  else
N  {
N    cpu_c1_freq = HSI_Value;
X    cpu_c1_freq = ((uint32_t)8000000);
N  }
N
N  if ((RST_CLK->CPU_CLOCK & (uint32_t)0x00000001) == (uint32_t)0x00000001)
X  if ((((RST_CLK_TypeDef*) 0x40020000)->CPU_CLOCK & (uint32_t)0x00000001) == (uint32_t)0x00000001)
N  {
N    cpu_c1_freq /= 2;
N  }
N
N  /* Determine CPU_C2 frequency */
N  cpu_c2_freq = cpu_c1_freq;
N
N  if ((RST_CLK->CPU_CLOCK & (uint32_t)0x00000004) == (uint32_t)0x00000004)
X  if ((((RST_CLK_TypeDef*) 0x40020000)->CPU_CLOCK & (uint32_t)0x00000004) == (uint32_t)0x00000004)
N  {
N    /* Determine CPU PLL output frequency */
N    pll_mul = ((RST_CLK->PLL_CONTROL >> 4) & (uint32_t)0x0F) + 1;
X    pll_mul = ((((RST_CLK_TypeDef*) 0x40020000)->PLL_CONTROL >> 4) & (uint32_t)0x0F) + 1;
N    cpu_c2_freq *= pll_mul;
N  }
N
N  /*Select CPU_CLK from HSI, CPU_C3, LSE, LSI cases */
N  switch ((RST_CLK->PLL_CONTROL >> 8) & (uint32_t)0x03)
X  switch ((((RST_CLK_TypeDef*) 0x40020000)->PLL_CONTROL >> 8) & (uint32_t)0x03)
N  {
N    case 0 :
N      /* HSI */
N      SystemCoreClock = HSI_Value;
X      SystemCoreClock = ((uint32_t)8000000);
N      break;
N    case 1 :
N      /* CPU_C3 */
N      /* Determine CPU_C3 frequency */
N      cpu_c3_freq = cpu_c2_freq / ((RST_CLK->CPU_CLOCK >> 4 & (uint32_t)0x0F) + 1);
X      cpu_c3_freq = cpu_c2_freq / ((((RST_CLK_TypeDef*) 0x40020000)->CPU_CLOCK >> 4 & (uint32_t)0x0F) + 1);
N      SystemCoreClock = cpu_c3_freq;
N      break;
N    case 2 :
N      /* LSE */
N      SystemCoreClock = LSE_Value;
X      SystemCoreClock = ((uint32_t)32768);
N      break;
N    default : /* case 3 */
N      /* LSI */
N      SystemCoreClock = LSI_Value;
X      SystemCoreClock = ((uint32_t)40000);
N      break;
N  }
N}
N
N/**
N  * @brief  Setup the microcontroller system
N  *         RST clock configuration to the default reset state
N  *         Setup SystemCoreClock variable.
N  * @note   This function should be used only after reset.
N  * @param  None
N  * @retval None
N  */
Nvoid SystemInit (void)
N{
N	/* Reset the RST clock configuration to the default reset state */
N
N  /* Reset all clock but RST_CLK & BKP_CLC bits */
N  RST_CLK->PER_CLOCK   = (uint32_t)0x8000010;
X  ((RST_CLK_TypeDef*) 0x40020000)->PER_CLOCK   = (uint32_t)0x8000010;
N
N  /* Reset REG_0F bits to zero but HSION & LSION bits */
N  BKP->REG_0F |= (uint32_t)((1<<22)|(1<<15)); /* HSION & LSION */
X  ((BKP_TypeDef*) 0x400D8000)->REG_0F |= (uint32_t)((1<<22)|(1<<15));  
N  BKP->REG_0F &= (uint32_t)((1<<22)|(1<<15));
X  ((BKP_TypeDef*) 0x400D8000)->REG_0F &= (uint32_t)((1<<22)|(1<<15));
N
N  /* Reset CPU_CLOCK bits */
N  RST_CLK->CPU_CLOCK   &= (uint32_t)0x00000000;
X  ((RST_CLK_TypeDef*) 0x40020000)->CPU_CLOCK   &= (uint32_t)0x00000000;
N
N  /* Reset PLL_CONTROL bits */
N  RST_CLK->PLL_CONTROL &= (uint32_t)0x00000000;
X  ((RST_CLK_TypeDef*) 0x40020000)->PLL_CONTROL &= (uint32_t)0x00000000;
N
N  /* Reset HSEON and HSEBYP bits */
N  RST_CLK->HS_CONTROL  &= (uint32_t)0x00000000;
X  ((RST_CLK_TypeDef*) 0x40020000)->HS_CONTROL  &= (uint32_t)0x00000000;
N
N  /* Reset USB_CLOCK bits */
N  RST_CLK->USB_CLOCK   &= (uint32_t)0x00000000;
X  ((RST_CLK_TypeDef*) 0x40020000)->USB_CLOCK   &= (uint32_t)0x00000000;
N
N  /* Reset ADC_MCO_CLOCK bits */
N  RST_CLK->ADC_MCO_CLOCK   &= (uint32_t)0x00000000;
X  ((RST_CLK_TypeDef*) 0x40020000)->ADC_MCO_CLOCK   &= (uint32_t)0x00000000;
N
N  /* Reset RTC_CLOCK bits */
N  RST_CLK->RTC_CLOCK   &= (uint32_t)0x00000000;
X  ((RST_CLK_TypeDef*) 0x40020000)->RTC_CLOCK   &= (uint32_t)0x00000000;
N
N  SystemCoreClockUpdate();
N}
N
N/** @} */ /* End of group __1986BE9X_System_Private_Functions */
N
N/** @} */ /* End of group __1986BE9X */
N
N/** @} */ /* End of group __CMSIS */
N
N/******************* (C) COPYRIGHT 2010 Phyton *********************************
N*
N* END OF FILE system_1986BE9x.c */
