###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     02/Apr/2013  16:59:53 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\sidorov.a\workspace\mdr1986x-std-per-lib\iar_ar #
#                    m\arm\src\MDR32F1x\FlashMDR32F1x.c                       #
#    Command line =  C:\Users\sidorov.a\workspace\mdr1986x-std-per-lib\iar_ar #
#                    m\arm\src\MDR32F1x\FlashMDR32F1x.c -lCN                  #
#                    C:\Users\sidorov.a\workspace\mdr1986x-std-per-lib\iar_ar #
#                    m\arm\src\MDR32F1x\FlashMDR32F1xRAM4K\List\ -o           #
#                    C:\Users\sidorov.a\workspace\mdr1986x-std-per-lib\iar_ar #
#                    m\arm\src\MDR32F1x\FlashMDR32F1xRAM4K\Obj\ --no_cse      #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I "C:\Program       #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.4\arm\src\flashloader\framework2\" -I                  #
#                    C:\Users\sidorov.a\workspace\mdr1986x-std-per-lib\iar_ar #
#                    m\arm\src\MDR32F1x\ -On --ropi --use_c++_inline          #
#    List file    =  C:\Users\sidorov.a\workspace\mdr1986x-std-per-lib\iar_ar #
#                    m\arm\src\MDR32F1x\FlashMDR32F1xRAM4K\List\FlashMDR32F1x #
#                    .lst                                                     #
#    Object file  =  C:\Users\sidorov.a\workspace\mdr1986x-std-per-lib\iar_ar #
#                    m\arm\src\MDR32F1x\FlashMDR32F1xRAM4K\Obj\FlashMDR32F1x. #
#                    o                                                        #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\sidorov.a\workspace\mdr1986x-std-per-lib\iar_arm\arm\src\MDR32F1x\FlashMDR32F1x.c
      1          /**************************************************
      2           * Copyright 2004-2010 IAR Systems. All rights reserved.
      3           *
      4           * $Revision: 34539 $
      5           **************************************************/
      6          
      7          #include <stdio.h>
      8          #include <stdlib.h>
      9          #include <string.h>
     10          #include <Milandr\1986be9x.h>
     11          
     12          #include "flash_loader.h"
     13          
     14          #define STANDBY 0x30L
     15          #define READ    0x00L
     16          #define PROGRAM 0x21L
     17          #define PGERASE 0x22L
     18          #define READCDI 0x0BL
     19          #define READDID 0x0CL
     20          
     21          #define flash_unit uint32_t
     22          
     23          #define FLASH1               ((uint32_t *)0x08001ff0)
     24          #define FLASH2               ((uint32_t *)0x08001ff4)
     25          #define FLASH3               ((uint32_t *)0x08001ff8)
     26          
     27          
     28          /*************************************************************************
     29           * FMC module initialization
     30           *************************************************************************/
     31          #if USE_ARGC_ARGV
     32          uint32_t FlashInit(void *base_of_flash, uint32_t image_size,
     33                             uint32_t link_address, uint32_t flags,
     34                             int argc, char const *argv[])
     35          #else

   \                                 In section .text, align 2, keep-with-next
     36          uint32_t FlashInit(void *base_of_flash, uint32_t image_size,
     37                             uint32_t link_address, uint32_t flags)
     38          #endif
     39          {
   \                     FlashInit:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
   \   00000008   0x001F             MOVS     R7,R3
     40            /*Enable ISP Clock*/
     41            /*Enable ISP function*/
     42            /*Enable ISP function*/
     43            RST_CLK->PER_CLOCK = 0xFFFFFFFF;
   \   0000000A   0x....             LDR.N    R0,??DataTable2  ;; 0x4002001c
   \   0000000C   0xF05F 0x31FF      MOVS     R1,#-1
   \   00000010   0x6001             STR      R1,[R0, #+0]
     44          
     45            if(RESULT_ERROR == FlashErase(base_of_flash,512)) return RESULT_ERROR;
   \   00000012   0xF44F 0x7100      MOV      R1,#+512
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0x.... 0x....      BL       FlashErase
   \   0000001C   0x2801             CMP      R0,#+1
   \   0000001E   0xD101             BNE.N    ??FlashInit_0
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0xE000             B.N      ??FlashInit_1
     46            
     47            return RESULT_OK;
   \                     ??FlashInit_0:
   \   00000024   0x2000             MOVS     R0,#+0
   \                     ??FlashInit_1:
   \   00000026   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
     48          }
     49          
     50          
     51          /*************************************************************************
     52           * FMC write data
     53           *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     54          uint32_t FlashWrite(void *block_start,
     55                              uint32_t offset_into_block,
     56                              uint32_t count,
     57                              char const *buffer)
     58          {
   \                     FlashWrite:
   \   00000000   0xB478             PUSH     {R3-R6}
   \   00000002   0x0004             MOVS     R4,R0
     59          uint32_t size = 0;
   \   00000004   0x2500             MOVS     R5,#+0
     60          volatile uint32_t y = 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9000             STR      R0,[SP, #+0]
     61                  RST_CLK->PER_CLOCK = 0xFFFFFFFF;
   \   0000000A   0x....             LDR.N    R0,??DataTable2  ;; 0x4002001c
   \   0000000C   0xF05F 0x36FF      MOVS     R6,#-1
   \   00000010   0x6006             STR      R6,[R0, #+0]
     62            	EEPROM->KEY = 0x8AAA5551;
   \   00000012   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40018010
   \   00000014   0x....             LDR.N    R6,??DataTable2_2  ;; 0x8aaa5551
   \   00000016   0x6006             STR      R6,[R0, #+0]
     63            	EEPROM->CMD = 0x0001 ;
   \   00000018   0x....             LDR.N    R0,??DataTable2_3  ;; 0x40018000
   \   0000001A   0x2601             MOVS     R6,#+1
   \   0000001C   0x6006             STR      R6,[R0, #+0]
     64             	EEPROM->ADR = (uint32_t) block_start + offset_into_block + size;
   \   0000001E   0x1908             ADDS     R0,R1,R4
   \   00000020   0x1828             ADDS     R0,R5,R0
   \   00000022   0x....             LDR.N    R6,??DataTable2_4  ;; 0x40018004
   \   00000024   0x6030             STR      R0,[R6, #+0]
     65            	EEPROM->DI  = *((flash_unit *)buffer);
   \   00000026   0x....             LDR.N    R0,??DataTable2_5  ;; 0x40018008
   \   00000028   0x681E             LDR      R6,[R3, #+0]
   \   0000002A   0x6006             STR      R6,[R0, #+0]
     66          
     67                  while( size < count )
   \                     ??FlashWrite_0:
   \   0000002C   0x4295             CMP      R5,R2
   \   0000002E   0xD262             BCS.N    ??FlashWrite_1
     68                  {
     69             	        EEPROM->ADR = (uint32_t) block_start + offset_into_block + size;
   \   00000030   0x1908             ADDS     R0,R1,R4
   \   00000032   0x1828             ADDS     R0,R5,R0
   \   00000034   0x....             LDR.N    R6,??DataTable2_4  ;; 0x40018004
   \   00000036   0x6030             STR      R0,[R6, #+0]
     70          	  	for (y=0;y<80;y++)
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x9000             STR      R0,[SP, #+0]
   \                     ??FlashWrite_2:
   \   0000003C   0x9800             LDR      R0,[SP, #+0]
   \   0000003E   0x2850             CMP      R0,#+80
   \   00000040   0xD203             BCS.N    ??FlashWrite_3
   \   00000042   0x9800             LDR      R0,[SP, #+0]
   \   00000044   0x1C40             ADDS     R0,R0,#+1
   \   00000046   0x9000             STR      R0,[SP, #+0]
   \   00000048   0xE7F8             B.N      ??FlashWrite_2
     71          	  	{	
     72          	  	}
     73          		EEPROM->CMD = 0x1041;	// Set PROG XE EN
   \                     ??FlashWrite_3:
   \   0000004A   0x....             LDR.N    R0,??DataTable2_3  ;; 0x40018000
   \   0000004C   0xF241 0x0641      MOVW     R6,#+4161
   \   00000050   0x6006             STR      R6,[R0, #+0]
     74          	  	for (y=0;y<40;y++)
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x9000             STR      R0,[SP, #+0]
   \                     ??FlashWrite_4:
   \   00000056   0x9800             LDR      R0,[SP, #+0]
   \   00000058   0x2828             CMP      R0,#+40
   \   0000005A   0xD203             BCS.N    ??FlashWrite_5
   \   0000005C   0x9800             LDR      R0,[SP, #+0]
   \   0000005E   0x1C40             ADDS     R0,R0,#+1
   \   00000060   0x9000             STR      R0,[SP, #+0]
   \   00000062   0xE7F8             B.N      ??FlashWrite_4
     75          	  	{	
     76          	  	}
     77          		EEPROM->CMD = 0x3041; // SET NVSTR
   \                     ??FlashWrite_5:
   \   00000064   0x....             LDR.N    R0,??DataTable2_3  ;; 0x40018000
   \   00000066   0xF243 0x0641      MOVW     R6,#+12353
   \   0000006A   0x6006             STR      R6,[R0, #+0]
     78          	  	EEPROM->DI  = *((flash_unit *)buffer);
   \   0000006C   0x....             LDR.N    R0,??DataTable2_5  ;; 0x40018008
   \   0000006E   0x681E             LDR      R6,[R3, #+0]
   \   00000070   0x6006             STR      R6,[R0, #+0]
     79          		EEPROM->CMD = 0x3043; // SET NVSTR
   \   00000072   0x....             LDR.N    R0,??DataTable2_3  ;; 0x40018000
   \   00000074   0xF243 0x0643      MOVW     R6,#+12355
   \   00000078   0x6006             STR      R6,[R0, #+0]
     80          		EEPROM->CMD = 0x3041; // SET NVSTR
   \   0000007A   0x....             LDR.N    R0,??DataTable2_3  ;; 0x40018000
   \   0000007C   0xF243 0x0641      MOVW     R6,#+12353
   \   00000080   0x6006             STR      R6,[R0, #+0]
     81          	  	for (y=0;y<100;y++)
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0x9000             STR      R0,[SP, #+0]
   \                     ??FlashWrite_6:
   \   00000086   0x9800             LDR      R0,[SP, #+0]
   \   00000088   0x2864             CMP      R0,#+100
   \   0000008A   0xD203             BCS.N    ??FlashWrite_7
   \   0000008C   0x9800             LDR      R0,[SP, #+0]
   \   0000008E   0x1C40             ADDS     R0,R0,#+1
   \   00000090   0x9000             STR      R0,[SP, #+0]
   \   00000092   0xE7F8             B.N      ??FlashWrite_6
     82          	  	{	
     83          	  	}
     84          		EEPROM->CMD = 0x30C1; // SET YE
   \                     ??FlashWrite_7:
   \   00000094   0x....             LDR.N    R0,??DataTable2_3  ;; 0x40018000
   \   00000096   0xF243 0x06C1      MOVW     R6,#+12481
   \   0000009A   0x6006             STR      R6,[R0, #+0]
     85          
     86          	  	for (y=0;y<400;y++)
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0x9000             STR      R0,[SP, #+0]
   \                     ??FlashWrite_8:
   \   000000A0   0x9800             LDR      R0,[SP, #+0]
   \   000000A2   0xF5B0 0x7FC8      CMP      R0,#+400
   \   000000A6   0xD203             BCS.N    ??FlashWrite_9
   \   000000A8   0x9800             LDR      R0,[SP, #+0]
   \   000000AA   0x1C40             ADDS     R0,R0,#+1
   \   000000AC   0x9000             STR      R0,[SP, #+0]
   \   000000AE   0xE7F7             B.N      ??FlashWrite_8
     87          	  	{	
     88          	  	}
     89          		EEPROM->CMD = 0x3041; // CLEAR YE
   \                     ??FlashWrite_9:
   \   000000B0   0x....             LDR.N    R0,??DataTable2_3  ;; 0x40018000
   \   000000B2   0xF243 0x0641      MOVW     R6,#+12353
   \   000000B6   0x6006             STR      R6,[R0, #+0]
     90          		EEPROM->CMD = 0x2041;	// CLER PROG 
   \   000000B8   0x....             LDR.N    R0,??DataTable2_3  ;; 0x40018000
   \   000000BA   0xF242 0x0641      MOVW     R6,#+8257
   \   000000BE   0x6006             STR      R6,[R0, #+0]
     91            		for (y=0;y<40;y++)
   \   000000C0   0x2000             MOVS     R0,#+0
   \   000000C2   0x9000             STR      R0,[SP, #+0]
   \                     ??FlashWrite_10:
   \   000000C4   0x9800             LDR      R0,[SP, #+0]
   \   000000C6   0x2828             CMP      R0,#+40
   \   000000C8   0xD203             BCS.N    ??FlashWrite_11
   \   000000CA   0x9800             LDR      R0,[SP, #+0]
   \   000000CC   0x1C40             ADDS     R0,R0,#+1
   \   000000CE   0x9000             STR      R0,[SP, #+0]
   \   000000D0   0xE7F8             B.N      ??FlashWrite_10
     92            		{	
     93            		}
     94          		EEPROM->CMD = 0x0001; // CLEAR NVSTR XE
   \                     ??FlashWrite_11:
   \   000000D2   0x....             LDR.N    R0,??DataTable2_3  ;; 0x40018000
   \   000000D4   0x2601             MOVS     R6,#+1
   \   000000D6   0x6006             STR      R6,[R0, #+0]
     95            		for (y=0;y<40;y++)
   \   000000D8   0x2000             MOVS     R0,#+0
   \   000000DA   0x9000             STR      R0,[SP, #+0]
   \                     ??FlashWrite_12:
   \   000000DC   0x9800             LDR      R0,[SP, #+0]
   \   000000DE   0x2828             CMP      R0,#+40
   \   000000E0   0xD203             BCS.N    ??FlashWrite_13
   \   000000E2   0x9800             LDR      R0,[SP, #+0]
   \   000000E4   0x1C40             ADDS     R0,R0,#+1
   \   000000E6   0x9000             STR      R0,[SP, #+0]
   \   000000E8   0xE7F8             B.N      ??FlashWrite_12
     96            		{	
     97            		}
     98          		EEPROM->CMD = 0x0000; // CLEAR NVSTR XE
   \                     ??FlashWrite_13:
   \   000000EA   0x....             LDR.N    R0,??DataTable2_3  ;; 0x40018000
   \   000000EC   0x2600             MOVS     R6,#+0
   \   000000EE   0x6006             STR      R6,[R0, #+0]
     99                /*increment buffer ptr*/
    100                buffer += sizeof(flash_unit);
   \   000000F0   0x1D1B             ADDS     R3,R3,#+4
    101                /*increment data cntr*/
    102                size += sizeof(flash_unit);
   \   000000F2   0x1D2D             ADDS     R5,R5,#+4
   \   000000F4   0xE79A             B.N      ??FlashWrite_0
    103                          
    104                  }
    105                  
    106                  
    107                          
    108              EEPROM->CMD = 0x0;
   \                     ??FlashWrite_1:
   \   000000F6   0x....             LDR.N    R0,??DataTable2_3  ;; 0x40018000
   \   000000F8   0x2600             MOVS     R6,#+0
   \   000000FA   0x6006             STR      R6,[R0, #+0]
    109              y= *FLASH1;
   \   000000FC   0x....             LDR.N    R0,??DataTable2_6  ;; 0x8001ff0
   \   000000FE   0x6800             LDR      R0,[R0, #+0]
   \   00000100   0x9000             STR      R0,[SP, #+0]
    110              y= *FLASH2;
   \   00000102   0x....             LDR.N    R0,??DataTable2_7  ;; 0x8001ff4
   \   00000104   0x6800             LDR      R0,[R0, #+0]
   \   00000106   0x9000             STR      R0,[SP, #+0]
    111              y= *FLASH3;
   \   00000108   0x....             LDR.N    R0,??DataTable2_8  ;; 0x8001ff8
   \   0000010A   0x6800             LDR      R0,[R0, #+0]
   \   0000010C   0x9000             STR      R0,[SP, #+0]
    112              return(RESULT_OK);
   \   0000010E   0x2000             MOVS     R0,#+0
   \   00000110   0xBC72             POP      {R1,R4-R6}
   \   00000112   0x4770             BX       LR               ;; return
    113          }
    114          
    115          /*************************************************************************
    116           * FMC Block erase
    117           *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    118          uint32_t FlashErase(void *block_start,
    119                              uint32_t block_size)
    120          {
   \                     FlashErase:
   \   00000000   0xB430             PUSH     {R4,R5}
   \   00000002   0x0002             MOVS     R2,R0
    121            
    122              int i,y;
    123            RST_CLK->PER_CLOCK = 0xFFFFFFFF;    
   \   00000004   0x....             LDR.N    R0,??DataTable2  ;; 0x4002001c
   \   00000006   0xF05F 0x35FF      MOVS     R5,#-1
   \   0000000A   0x6005             STR      R5,[R0, #+0]
    124            EEPROM->CMD = 0x1;
   \   0000000C   0x....             LDR.N    R0,??DataTable2_3  ;; 0x40018000
   \   0000000E   0x2501             MOVS     R5,#+1
   \   00000010   0x6005             STR      R5,[R0, #+0]
    125            EEPROM->KEY = 0x8AAA5551;
   \   00000012   0x....             LDR.N    R0,??DataTable2_1  ;; 0x40018010
   \   00000014   0x....             LDR.N    R5,??DataTable2_2  ;; 0x8aaa5551
   \   00000016   0x6005             STR      R5,[R0, #+0]
    126          
    127            for (y = 0; y<4;y++)
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x0004             MOVS     R4,R0
   \                     ??FlashErase_0:
   \   0000001C   0x2C04             CMP      R4,#+4
   \   0000001E   0xDA35             BGE.N    ??FlashErase_1
    128            {
    129             	EEPROM->ADR = y*4;
   \   00000020   0x00A0             LSLS     R0,R4,#+2
   \   00000022   0x....             LDR.N    R5,??DataTable2_4  ;; 0x40018004
   \   00000024   0x6028             STR      R0,[R5, #+0]
    130            	EEPROM->DI  = 0;
   \   00000026   0x....             LDR.N    R0,??DataTable2_5  ;; 0x40018008
   \   00000028   0x2500             MOVS     R5,#+0
   \   0000002A   0x6005             STR      R5,[R0, #+0]
    131          	EEPROM->CMD = 0x0041;
   \   0000002C   0x....             LDR.N    R0,??DataTable2_3  ;; 0x40018000
   \   0000002E   0x2541             MOVS     R5,#+65
   \   00000030   0x6005             STR      R5,[R0, #+0]
    132            	for (i=0;i<1000;i++)
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x0003             MOVS     R3,R0
   \                     ??FlashErase_2:
   \   00000036   0xF5B3 0x7F7A      CMP      R3,#+1000
   \   0000003A   0xDA01             BGE.N    ??FlashErase_3
   \   0000003C   0x1C5B             ADDS     R3,R3,#+1
   \   0000003E   0xE7FA             B.N      ??FlashErase_2
    133            	{	
    134            	}
    135          	EEPROM->CMD = 0x0c41 ;
   \                     ??FlashErase_3:
   \   00000040   0x....             LDR.N    R0,??DataTable2_3  ;; 0x40018000
   \   00000042   0xF640 0x4541      MOVW     R5,#+3137
   \   00000046   0x6005             STR      R5,[R0, #+0]
    136            	for (i=0;i<4000;i++)
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x0003             MOVS     R3,R0
   \                     ??FlashErase_4:
   \   0000004C   0xF5B3 0x6F7A      CMP      R3,#+4000
   \   00000050   0xDA01             BGE.N    ??FlashErase_5
   \   00000052   0x1C5B             ADDS     R3,R3,#+1
   \   00000054   0xE7FA             B.N      ??FlashErase_4
    137            	{	
    138            	}
    139          	EEPROM->CMD = 0x2c41 ;
   \                     ??FlashErase_5:
   \   00000056   0x....             LDR.N    R0,??DataTable2_3  ;; 0x40018000
   \   00000058   0xF642 0x4541      MOVW     R5,#+11329
   \   0000005C   0x6005             STR      R5,[R0, #+0]
    140            	for (i=0;i<160000;i++)
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x0003             MOVS     R3,R0
   \                     ??FlashErase_6:
   \   00000062   0x....             LDR.N    R0,??DataTable2_9  ;; 0x27100
   \   00000064   0x4283             CMP      R3,R0
   \   00000066   0xDA01             BGE.N    ??FlashErase_7
   \   00000068   0x1C5B             ADDS     R3,R3,#+1
   \   0000006A   0xE7FA             B.N      ??FlashErase_6
    141            	{	
    142            	}
    143          	EEPROM->CMD = 0x2841 ;
   \                     ??FlashErase_7:
   \   0000006C   0x....             LDR.N    R0,??DataTable2_3  ;; 0x40018000
   \   0000006E   0xF642 0x0541      MOVW     R5,#+10305
   \   00000072   0x6005             STR      R5,[R0, #+0]
    144            	for (i=0;i<8000;i++)
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x0003             MOVS     R3,R0
   \                     ??FlashErase_8:
   \   00000078   0xF5B3 0x5FFA      CMP      R3,#+8000
   \   0000007C   0xDA01             BGE.N    ??FlashErase_9
   \   0000007E   0x1C5B             ADDS     R3,R3,#+1
   \   00000080   0xE7FA             B.N      ??FlashErase_8
    145            	{	
    146            	}
    147          	EEPROM->CMD = 0x0001 ;
   \                     ??FlashErase_9:
   \   00000082   0x....             LDR.N    R0,??DataTable2_3  ;; 0x40018000
   \   00000084   0x2501             MOVS     R5,#+1
   \   00000086   0x6005             STR      R5,[R0, #+0]
    148             }
   \   00000088   0x1C64             ADDS     R4,R4,#+1
   \   0000008A   0xE7C7             B.N      ??FlashErase_0
    149            EEPROM->CMD = 0x0;
   \                     ??FlashErase_1:
   \   0000008C   0x....             LDR.N    R0,??DataTable2_3  ;; 0x40018000
   \   0000008E   0x2500             MOVS     R5,#+0
   \   00000090   0x6005             STR      R5,[R0, #+0]
    150            
    151              return(RESULT_OK);
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0xBC30             POP      {R4,R5}
   \   00000096   0x4770             BX       LR               ;; return
    152          }
    153          
    154          /*************************************************************************
    155           * FMC deinit
    156           *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    157          uint32_t FlashSignoff()
    158          {
    159            /*Enable ISP function*/
    160            /*Enable ISP function*/
    161          
    162            
    163            return RESULT_OK;
   \                     FlashSignoff:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    164          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x4002001C         DC32     0x4002001c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x40018010         DC32     0x40018010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x8AAA5551         DC32     0x8aaa5551

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x40018000         DC32     0x40018000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x40018004         DC32     0x40018004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x40018008         DC32     0x40018008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x08001FF0         DC32     0x8001ff0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x08001FF4         DC32     0x8001ff4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x08001FF8         DC32     0x8001ff8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x00027100         DC32     0x27100

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  FlashErase
       24  FlashInit
             24 -> FlashErase
        0  FlashSignoff
       16  FlashWrite


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
     152  FlashErase
      40  FlashInit
       4  FlashSignoff
     276  FlashWrite

 
 512 bytes in section .text
 
 512 bytes of CODE memory

Errors: none
Warnings: none
