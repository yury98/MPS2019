###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     02/Apr/2013  17:10:46 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\sidorov.a\workspace\mdr1986x-std-per-lib\iar_ar #
#                    m\arm\src\flashloader 1986VE9x\Milandr\MDR32F1x\FlashMDR #
#                    32F1x.c                                                  #
#    Command line =  "C:\Users\sidorov.a\workspace\mdr1986x-std-per-lib\iar_a #
#                    rm\arm\src\flashloader 1986VE9x\Milandr\MDR32F1x\FlashMD #
#                    R32F1x.c" -lCN "C:\Users\sidorov.a\workspace\mdr1986x-st #
#                    d-per-lib\iar_arm\arm\src\flashloader                    #
#                    1986VE9x\Milandr\MDR32F1x\FlashMDR32F1xRAM4K\List\" -o   #
#                    "C:\Users\sidorov.a\workspace\mdr1986x-std-per-lib\iar_a #
#                    rm\arm\src\flashloader 1986VE9x\Milandr\MDR32F1x\FlashMD #
#                    R32F1xRAM4K\Obj\" --no_cse --no_unroll --no_inline       #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.4\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I "C:\Program Files (x86)\IAR Systems\Embedded   #
#                    Workbench 6.4\arm\src\flashloader\framework2\" -I        #
#                    "C:\Users\sidorov.a\workspace\mdr1986x-std-per-lib\iar_a #
#                    rm\arm\src\flashloader 1986VE9x\Milandr\MDR32F1x\" -On   #
#                    --ropi --use_c++_inline                                  #
#    List file    =  C:\Users\sidorov.a\workspace\mdr1986x-std-per-lib\iar_ar #
#                    m\arm\src\flashloader 1986VE9x\Milandr\MDR32F1x\FlashMDR #
#                    32F1xRAM4K\List\FlashMDR32F1x.lst                        #
#    Object file  =  C:\Users\sidorov.a\workspace\mdr1986x-std-per-lib\iar_ar #
#                    m\arm\src\flashloader 1986VE9x\Milandr\MDR32F1x\FlashMDR #
#                    32F1xRAM4K\Obj\FlashMDR32F1x.o                           #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\sidorov.a\workspace\mdr1986x-std-per-lib\iar_arm\arm\src\flashloader 1986VE9x\Milandr\MDR32F1x\FlashMDR32F1x.c
      1          /**************************************************
      2           * Copyright 2004-2010 IAR Systems. All rights reserved.
      3           *
      4           * $Revision: 29 $
      5           **************************************************/
      6          
      7          #include <stdio.h>
      8          #include <stdlib.h>
      9          #include <string.h>
     10          #include <Milandr\1986be9x.h>
     11          
     12          #include "flash_loader.h"
     13          
     14          #define STANDBY 0x30L
     15          #define READ    0x00L
     16          #define PROGRAM 0x21L
     17          #define PGERASE 0x22L
     18          #define READCDI 0x0BL
     19          #define READDID 0x0CL
     20          
     21          #define flash_unit uint32_t
     22          
     23          #define FLASH1               ((uint32_t *)0x00001ff0)
     24          #define FLASH2               ((uint32_t *)0x00001ff4)
     25          #define FLASH3               ((uint32_t *)0x00001ff8)
     26          
     27          
     28          /*************************************************************************
     29           * FMC module initialization
     30           *************************************************************************/
     31          

   \                                 In section .text, align 2, keep-with-next
     32          void ProgramDelay(uint32_t Loops)
     33          {
   \                     ProgramDelay:
   \   00000000   0xB081             SUB      SP,SP,#+4
     34            volatile uint32_t i = Loops;
   \   00000002   0x9000             STR      R0,[SP, #+0]
     35            for (; i > 0; i--);
   \                     ??ProgramDelay_0:
   \   00000004   0x9900             LDR      R1,[SP, #+0]
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD003             BEQ.N    ??ProgramDelay_1
   \   0000000A   0x9900             LDR      R1,[SP, #+0]
   \   0000000C   0x1E49             SUBS     R1,R1,#+1
   \   0000000E   0x9100             STR      R1,[SP, #+0]
   \   00000010   0xE7F8             B.N      ??ProgramDelay_0
     36          }
   \                     ??ProgramDelay_1:
   \   00000012   0xB001             ADD      SP,SP,#+4
   \   00000014   0x4770             BX       LR               ;; return
     37          #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     38          

   \                                 In section .text, align 2, keep-with-next
     39          PUTCHAR_PROTOTYPE{
     40                  UART2->DR = ch;
   \                     fputc:
   \   00000000   0x....             LDR.N    R2,??DataTable3  ;; 0x40038000
   \   00000002   0x6010             STR      R0,[R2, #+0]
     41                  // Loop until the end of transmission
     42                  while(0 == (UART2->FR & (1UL << 7)));
   \                     ??fputc_0:
   \   00000004   0x....             LDR.N    R2,??DataTable3_1  ;; 0x40038018
   \   00000006   0x6812             LDR      R2,[R2, #+0]
   \   00000008   0x0612             LSLS     R2,R2,#+24
   \   0000000A   0xD5FB             BPL.N    ??fputc_0
     43            return (ch);
   \   0000000C   0x4770             BX       LR               ;; return
     44          }
     45          #if USE_ARGC_ARGV
     46          uint32_t FlashInit(void *base_of_flash, uint32_t image_size,
     47                             uint32_t link_address, uint32_t flags,
     48                             int argc, char const *argv[])
     49          #else

   \                                 In section .text, align 2, keep-with-next
     50          uint32_t FlashInit(void *base_of_flash, uint32_t image_size,
     51                             uint32_t link_address, uint32_t flags)
     52          #endif
     53          {
   \                     FlashInit:
   \   00000000   0xB430             PUSH     {R4,R5}
   \   00000002   0x0004             MOVS     R4,R0
     54            /*Enable ISP Clock*/
     55            /*Enable ISP function*/
     56            /*Enable ISP function*/
     57            RST_CLK->PER_CLOCK = 0xFFFFFFFF;
   \   00000004   0x....             LDR.N    R0,??DataTable3_2  ;; 0x4002001c
   \   00000006   0xF05F 0x35FF      MOVS     R5,#-1
   \   0000000A   0x6005             STR      R5,[R0, #+0]
     58            
     59            //uint32_t * per2_clock = (uint32_t *)(0x4002000 + 0x38);
     60            //uint32_t * uart_ssp = (uint32_t *)(0x4002000 + 0x3C);
     61          
     62          /*  
     63            // включаем HSE
     64            RST_CLK->HS_CONTROL = 1<<0;
     65            
     66            while((RST_CLK->CLOCK_STATUS & (1<<2)) == 0);
     67            
     68            RST_CLK->CPU_CLOCK = (1<<1) | (1<<8);
     69            
     70              // Отладка
     71            PORTF->FUNC = (3<<0*2) | (3<<1*2);
     72            PORTF->ANALOG = 0xFFFFFFFF;
     73            PORTF->PWR = 0xFFFFFFFF;
     74            
     75            
     76            RST_CLK->UART_CLOCK = 1 << 25;
     77            
     78            // Настройка UART
     79            
     80            UART2->FBRD = 6;
     81            UART2->IBRD = 52;
     82            
     83            UART2->CR = (1<<7) | (1<<8) | (1<<0);
     84            
     85            UART2->LCR_H = 3 << 5;
     86            
     87            printf("test");
     88          
     89            //UART2->DR = 0x30;
     90            //while(0 == (UART2->FR & (1UL << 7)));
     91            
     92          	if(RESULT_ERROR == FlashErase(base_of_flash,512)) 
     93          	  return RESULT_ERROR;
     94          */  
     95            
     96            return RESULT_OK;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xBC30             POP      {R4,R5}
   \   00000010   0x4770             BX       LR               ;; return
     97          }
     98          
     99          

   \                                 In section .text, align 2, keep-with-next
    100          uint32_t FlashWrite(void *block_start,
    101                              uint32_t offset_into_block,
    102                              uint32_t count,
    103                              char const *buffer)
    104          {
   \                     FlashWrite:
   \   00000000   0xB4F8             PUSH     {R3-R7}
   \   00000002   0x0004             MOVS     R4,R0
    105              //printf("\t\tFlashWrite block_start 0x%x, offset_into_block 0x%x, count 0x%X, buffer 0x%x\n\r",(uint32_t)block_start,offset_into_block,count,(uint32_t)buffer);
    106          	
    107          	uint32_t * ptr_buffer = (uint32_t *)buffer;
   \   00000004   0x001D             MOVS     R5,R3
    108          	
    109          	//for(uint32_t i = 0; i < 16; i++)
    110          	//  printf("data = 0x%x\r\n",ptr_buffer[i]);
    111          	
    112          	//uint32_t * ptr = (uint32_t *)(((uint32_t)block_start) + offset_into_block);
    113            
    114          	uint32_t size = 0;
   \   00000006   0x2600             MOVS     R6,#+0
    115          	volatile uint32_t y = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x9000             STR      R0,[SP, #+0]
    116          
    117          
    118          	
    119              RST_CLK->PER_CLOCK = 0xFFFFFFFF;
   \   0000000C   0x....             LDR.N    R0,??DataTable3_2  ;; 0x4002001c
   \   0000000E   0xF05F 0x37FF      MOVS     R7,#-1
   \   00000012   0x6007             STR      R7,[R0, #+0]
    120          	while( size < count/4 ){
   \                     ??FlashWrite_0:
   \   00000014   0xEBB6 0x0F92      CMP      R6,R2, LSR #+2
   \   00000018   0xD25B             BCS.N    ??FlashWrite_1
    121          	  
    122          		EEPROM->KEY = 0x8AAA5551;
   \   0000001A   0x....             LDR.N    R0,??DataTable3_3  ;; 0x40018010
   \   0000001C   0x....             LDR.N    R7,??DataTable3_4  ;; 0x8aaa5551
   \   0000001E   0x6007             STR      R7,[R0, #+0]
    123          		
    124          		EEPROM->CMD = 0x0001 ;
   \   00000020   0x....             LDR.N    R0,??DataTable3_5  ;; 0x40018000
   \   00000022   0x2701             MOVS     R7,#+1
   \   00000024   0x6007             STR      R7,[R0, #+0]
    125          		EEPROM->ADR = (uint32_t) ((uint32_t)block_start + offset_into_block + size*4);
   \   00000026   0x1908             ADDS     R0,R1,R4
   \   00000028   0xEB10 0x0086      ADDS     R0,R0,R6, LSL #+2
   \   0000002C   0x....             LDR.N    R7,??DataTable3_6  ;; 0x40018004
   \   0000002E   0x6038             STR      R0,[R7, #+0]
    126          		EEPROM->DI  = ptr_buffer[size];
   \   00000030   0xF855 0x0026      LDR      R0,[R5, R6, LSL #+2]
   \   00000034   0x....             LDR.N    R7,??DataTable3_7  ;; 0x40018008
   \   00000036   0x6038             STR      R0,[R7, #+0]
    127          		
    128          		EEPROM->CMD = 0x1041;	// Set PROG XE EN
   \   00000038   0x....             LDR.N    R0,??DataTable3_5  ;; 0x40018000
   \   0000003A   0xF241 0x0741      MOVW     R7,#+4161
   \   0000003E   0x6007             STR      R7,[R0, #+0]
    129          		for (y=0;y<40;y++); // 5 мкс
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x9000             STR      R0,[SP, #+0]
   \                     ??FlashWrite_2:
   \   00000044   0x9800             LDR      R0,[SP, #+0]
   \   00000046   0x2828             CMP      R0,#+40
   \   00000048   0xD203             BCS.N    ??FlashWrite_3
   \   0000004A   0x9800             LDR      R0,[SP, #+0]
   \   0000004C   0x1C40             ADDS     R0,R0,#+1
   \   0000004E   0x9000             STR      R0,[SP, #+0]
   \   00000050   0xE7F8             B.N      ??FlashWrite_2
    130          		
    131          		EEPROM->CMD = 0x3041; // SET NVSTR
   \                     ??FlashWrite_3:
   \   00000052   0x....             LDR.N    R0,??DataTable3_5  ;; 0x40018000
   \   00000054   0xF243 0x0741      MOVW     R7,#+12353
   \   00000058   0x6007             STR      R7,[R0, #+0]
    132          		for (y=0;y<80;y++);	//10 мкс
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0x9000             STR      R0,[SP, #+0]
   \                     ??FlashWrite_4:
   \   0000005E   0x9800             LDR      R0,[SP, #+0]
   \   00000060   0x2850             CMP      R0,#+80
   \   00000062   0xD203             BCS.N    ??FlashWrite_5
   \   00000064   0x9800             LDR      R0,[SP, #+0]
   \   00000066   0x1C40             ADDS     R0,R0,#+1
   \   00000068   0x9000             STR      R0,[SP, #+0]
   \   0000006A   0xE7F8             B.N      ??FlashWrite_4
    133          		
    134          		EEPROM->CMD = 0x30C1; // SET YE
   \                     ??FlashWrite_5:
   \   0000006C   0x....             LDR.N    R0,??DataTable3_5  ;; 0x40018000
   \   0000006E   0xF243 0x07C1      MOVW     R7,#+12481
   \   00000072   0x6007             STR      R7,[R0, #+0]
    135          		for (y=0;y<400;y++); 	//40 мкс
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x9000             STR      R0,[SP, #+0]
   \                     ??FlashWrite_6:
   \   00000078   0x9800             LDR      R0,[SP, #+0]
   \   0000007A   0xF5B0 0x7FC8      CMP      R0,#+400
   \   0000007E   0xD203             BCS.N    ??FlashWrite_7
   \   00000080   0x9800             LDR      R0,[SP, #+0]
   \   00000082   0x1C40             ADDS     R0,R0,#+1
   \   00000084   0x9000             STR      R0,[SP, #+0]
   \   00000086   0xE7F7             B.N      ??FlashWrite_6
    136          		
    137          		EEPROM->CMD = 0x3041; // CLEAR YE
   \                     ??FlashWrite_7:
   \   00000088   0x....             LDR.N    R0,??DataTable3_5  ;; 0x40018000
   \   0000008A   0xF243 0x0741      MOVW     R7,#+12353
   \   0000008E   0x6007             STR      R7,[R0, #+0]
    138          		EEPROM->CMD = 0x2041;	// CLER PROG 
   \   00000090   0x....             LDR.N    R0,??DataTable3_5  ;; 0x40018000
   \   00000092   0xF242 0x0741      MOVW     R7,#+8257
   \   00000096   0x6007             STR      R7,[R0, #+0]
    139          		for (y=0;y<40;y++);		// 5 мкс
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0x9000             STR      R0,[SP, #+0]
   \                     ??FlashWrite_8:
   \   0000009C   0x9800             LDR      R0,[SP, #+0]
   \   0000009E   0x2828             CMP      R0,#+40
   \   000000A0   0xD203             BCS.N    ??FlashWrite_9
   \   000000A2   0x9800             LDR      R0,[SP, #+0]
   \   000000A4   0x1C40             ADDS     R0,R0,#+1
   \   000000A6   0x9000             STR      R0,[SP, #+0]
   \   000000A8   0xE7F8             B.N      ??FlashWrite_8
    140          		
    141          		EEPROM->CMD = 0x0001; // CLEAR NVSTR XE
   \                     ??FlashWrite_9:
   \   000000AA   0x....             LDR.N    R0,??DataTable3_5  ;; 0x40018000
   \   000000AC   0x2701             MOVS     R7,#+1
   \   000000AE   0x6007             STR      R7,[R0, #+0]
    142          		for (y=0;y<10;y++);
   \   000000B0   0x2000             MOVS     R0,#+0
   \   000000B2   0x9000             STR      R0,[SP, #+0]
   \                     ??FlashWrite_10:
   \   000000B4   0x9800             LDR      R0,[SP, #+0]
   \   000000B6   0x280A             CMP      R0,#+10
   \   000000B8   0xD203             BCS.N    ??FlashWrite_11
   \   000000BA   0x9800             LDR      R0,[SP, #+0]
   \   000000BC   0x1C40             ADDS     R0,R0,#+1
   \   000000BE   0x9000             STR      R0,[SP, #+0]
   \   000000C0   0xE7F8             B.N      ??FlashWrite_10
    143          		
    144          		EEPROM->CMD = 0x0000; // CLEAR NVSTR XE
   \                     ??FlashWrite_11:
   \   000000C2   0x....             LDR.N    R0,??DataTable3_5  ;; 0x40018000
   \   000000C4   0x2700             MOVS     R7,#+0
   \   000000C6   0x6007             STR      R7,[R0, #+0]
    145          		EEPROM->KEY = 0;
   \   000000C8   0x....             LDR.N    R0,??DataTable3_3  ;; 0x40018010
   \   000000CA   0x2700             MOVS     R7,#+0
   \   000000CC   0x6007             STR      R7,[R0, #+0]
    146          		    
    147          		size++;
   \   000000CE   0x1C76             ADDS     R6,R6,#+1
   \   000000D0   0xE7A0             B.N      ??FlashWrite_0
    148          	}                
    149          
    150          	//for(int i = 0; i < 16; i++)
    151          	//  printf("\tflash_data = 0x%x\r\n", ptr[i]);
    152          
    153              return(RESULT_OK);
   \                     ??FlashWrite_1:
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0xBCF2             POP      {R1,R4-R7}
   \   000000D6   0x4770             BX       LR               ;; return
    154          }
    155          
    156          /*************************************************************************
    157           * FMC Block erase
    158           *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    159          uint32_t FlashErase(void *block_start,
    160                              uint32_t block_size)
    161          {
   \                     FlashErase:
   \   00000000   0xB41C             PUSH     {R2-R4}
   \   00000002   0x0002             MOVS     R2,R0
    162          	//printf("FlasErase block_start 0x%x, block_size 0x%x\n\r",(uint32_t)block_start,block_size);
    163          	
    164          	if ( (((uint32_t)block_start - 0x08000000)%0x1000) == 0){ 
   \   00000004   0xF1B2 0x6000      SUBS     R0,R2,#+134217728
   \   00000008   0xF44F 0x5380      MOV      R3,#+4096
   \   0000000C   0xFBB0 0xF4F3      UDIV     R4,R0,R3
   \   00000010   0xFB04 0x0413      MLS      R4,R4,R3,R0
   \   00000014   0x2C00             CMP      R4,#+0
   \   00000016   0xD154             BNE.N    ??FlashErase_0
    165          		//printf("Erasing...\r\n");
    166          		volatile int i,y;
    167          		for(i = 0; i < 4; i++){
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x9001             STR      R0,[SP, #+4]
   \                     ??FlashErase_1:
   \   0000001C   0x9801             LDR      R0,[SP, #+4]
   \   0000001E   0x2804             CMP      R0,#+4
   \   00000020   0xDA4F             BGE.N    ??FlashErase_0
    168          			
    169          			RST_CLK->PER_CLOCK = 0xFFFFFFFF;    
   \   00000022   0x....             LDR.N    R0,??DataTable3_2  ;; 0x4002001c
   \   00000024   0xF05F 0x33FF      MOVS     R3,#-1
   \   00000028   0x6003             STR      R3,[R0, #+0]
    170          			EEPROM->KEY = 0x8AAA5551;
   \   0000002A   0x....             LDR.N    R0,??DataTable3_3  ;; 0x40018010
   \   0000002C   0x....             LDR.N    R3,??DataTable3_4  ;; 0x8aaa5551
   \   0000002E   0x6003             STR      R3,[R0, #+0]
    171          			
    172          			EEPROM->CMD = 0x1;
   \   00000030   0x....             LDR.N    R0,??DataTable3_5  ;; 0x40018000
   \   00000032   0x2301             MOVS     R3,#+1
   \   00000034   0x6003             STR      R3,[R0, #+0]
    173          			EEPROM->ADR = ((uint32_t)block_start) + i*4;
   \   00000036   0x9801             LDR      R0,[SP, #+4]
   \   00000038   0xEB12 0x0080      ADDS     R0,R2,R0, LSL #+2
   \   0000003C   0x....             LDR.N    R3,??DataTable3_6  ;; 0x40018004
   \   0000003E   0x6018             STR      R0,[R3, #+0]
    174          			EEPROM->DI = 0x00;
   \   00000040   0x....             LDR.N    R0,??DataTable3_7  ;; 0x40018008
   \   00000042   0x2300             MOVS     R3,#+0
   \   00000044   0x6003             STR      R3,[R0, #+0]
    175          			//printf("ERASE ADDR = 0x%d\r\n", EEPROM->ADR);
    176          			
    177          			EEPROM->CMD = 0x0441;
   \   00000046   0x....             LDR.N    R0,??DataTable3_5  ;; 0x40018000
   \   00000048   0xF240 0x4341      MOVW     R3,#+1089
   \   0000004C   0x6003             STR      R3,[R0, #+0]
    178          			for (y=0;y<40;y++);		// 5 мкс
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x9000             STR      R0,[SP, #+0]
   \                     ??FlashErase_2:
   \   00000052   0x9800             LDR      R0,[SP, #+0]
   \   00000054   0x2828             CMP      R0,#+40
   \   00000056   0xDA03             BGE.N    ??FlashErase_3
   \   00000058   0x9800             LDR      R0,[SP, #+0]
   \   0000005A   0x1C40             ADDS     R0,R0,#+1
   \   0000005C   0x9000             STR      R0,[SP, #+0]
   \   0000005E   0xE7F8             B.N      ??FlashErase_2
    179          			
    180          			EEPROM->CMD = 0x2441;
   \                     ??FlashErase_3:
   \   00000060   0x....             LDR.N    R0,??DataTable3_5  ;; 0x40018000
   \   00000062   0xF242 0x4341      MOVW     R3,#+9281
   \   00000066   0x6003             STR      R3,[R0, #+0]
    181          			for (y=0;y<320000/2;y++);
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x9000             STR      R0,[SP, #+0]
   \                     ??FlashErase_4:
   \   0000006C   0x9800             LDR      R0,[SP, #+0]
   \   0000006E   0x....             LDR.N    R3,??DataTable3_8  ;; 0x27100
   \   00000070   0x4298             CMP      R0,R3
   \   00000072   0xDA03             BGE.N    ??FlashErase_5
   \   00000074   0x9800             LDR      R0,[SP, #+0]
   \   00000076   0x1C40             ADDS     R0,R0,#+1
   \   00000078   0x9000             STR      R0,[SP, #+0]
   \   0000007A   0xE7F7             B.N      ??FlashErase_4
    182          			
    183          			EEPROM->CMD = 0x2041;
   \                     ??FlashErase_5:
   \   0000007C   0x....             LDR.N    R0,??DataTable3_5  ;; 0x40018000
   \   0000007E   0xF242 0x0341      MOVW     R3,#+8257
   \   00000082   0x6003             STR      R3,[R0, #+0]
    184          			for (y=0;y<40;y++);		// 5 мкс
   \   00000084   0x2000             MOVS     R0,#+0
   \   00000086   0x9000             STR      R0,[SP, #+0]
   \                     ??FlashErase_6:
   \   00000088   0x9800             LDR      R0,[SP, #+0]
   \   0000008A   0x2828             CMP      R0,#+40
   \   0000008C   0xDA03             BGE.N    ??FlashErase_7
   \   0000008E   0x9800             LDR      R0,[SP, #+0]
   \   00000090   0x1C40             ADDS     R0,R0,#+1
   \   00000092   0x9000             STR      R0,[SP, #+0]
   \   00000094   0xE7F8             B.N      ??FlashErase_6
    185          			
    186          			EEPROM->CMD = 0x0001;
   \                     ??FlashErase_7:
   \   00000096   0x....             LDR.N    R0,??DataTable3_5  ;; 0x40018000
   \   00000098   0x2301             MOVS     R3,#+1
   \   0000009A   0x6003             STR      R3,[R0, #+0]
    187          			for (y=0;y<8;y++);		// 1 мкс
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0x9000             STR      R0,[SP, #+0]
   \                     ??FlashErase_8:
   \   000000A0   0x9800             LDR      R0,[SP, #+0]
   \   000000A2   0x2808             CMP      R0,#+8
   \   000000A4   0xDA03             BGE.N    ??FlashErase_9
   \   000000A6   0x9800             LDR      R0,[SP, #+0]
   \   000000A8   0x1C40             ADDS     R0,R0,#+1
   \   000000AA   0x9000             STR      R0,[SP, #+0]
   \   000000AC   0xE7F8             B.N      ??FlashErase_8
    188          			EEPROM->CMD = 0x0;
   \                     ??FlashErase_9:
   \   000000AE   0x....             LDR.N    R0,??DataTable3_5  ;; 0x40018000
   \   000000B0   0x2300             MOVS     R3,#+0
   \   000000B2   0x6003             STR      R3,[R0, #+0]
    189          			EEPROM->KEY = 0;
   \   000000B4   0x....             LDR.N    R0,??DataTable3_3  ;; 0x40018010
   \   000000B6   0x2300             MOVS     R3,#+0
   \   000000B8   0x6003             STR      R3,[R0, #+0]
    190          		}
   \   000000BA   0x9801             LDR      R0,[SP, #+4]
   \   000000BC   0x1C40             ADDS     R0,R0,#+1
   \   000000BE   0x9001             STR      R0,[SP, #+4]
   \   000000C0   0xE7AC             B.N      ??FlashErase_1
    191          	}
    192          
    193          	return(RESULT_OK);
   \                     ??FlashErase_0:
   \   000000C2   0x2000             MOVS     R0,#+0
   \   000000C4   0xBC16             POP      {R1,R2,R4}
   \   000000C6   0x4770             BX       LR               ;; return
    194          }
    195          
    196          
    197          
    198          /*************************************************************************
    199           * FMC deinit
    200           *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    201          uint32_t FlashSignoff()
    202          {
    203            /*Enable ISP function*/
    204            /*Enable ISP function*/
    205          
    206            
    207            return RESULT_OK;
   \                     FlashSignoff:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    208          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x40038000         DC32     0x40038000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x40038018         DC32     0x40038018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x4002001C         DC32     0x4002001c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x40018010         DC32     0x40018010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x8AAA5551         DC32     0x8aaa5551

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x40018000         DC32     0x40018000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x40018004         DC32     0x40018004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x40018008         DC32     0x40018008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x00027100         DC32     0x27100

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       12  FlashErase
        8  FlashInit
        0  FlashSignoff
       20  FlashWrite
        4  ProgramDelay
        0  fputc


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
     200  FlashErase
      18  FlashInit
       4  FlashSignoff
     216  FlashWrite
      22  ProgramDelay
      14  fputc

 
 510 bytes in section .text
 
 510 bytes of CODE memory

Errors: none
Warnings: none
