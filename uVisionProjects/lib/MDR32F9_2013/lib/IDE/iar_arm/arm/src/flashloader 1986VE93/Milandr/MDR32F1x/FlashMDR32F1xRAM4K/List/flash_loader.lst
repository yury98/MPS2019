###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     11/Jun/2013  17:24:32 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Program Files (x86)\IAR Systems\Embedded Workbench    #
#                    6.4\arm\src\flashloader\framework2\flash_loader.c        #
#    Command line =  "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.4\arm\src\flashloader\framework2\flash_loader.c" -lCN  #
#                    "C:\Users\sidorov.a\workspace\iar_arm\arm\src\flashloade #
#                    r 1986VE93\Milandr\MDR32F1x\FlashMDR32F1xRAM4K\List\"    #
#                    -o "C:\Users\sidorov.a\workspace\iar_arm\arm\src\flashlo #
#                    ader 1986VE93\Milandr\MDR32F1x\FlashMDR32F1xRAM4K\Obj\"  #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M1 -e --fpu=None -I         #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.4\arm\src\flashloader\framework2\" -I                  #
#                    "C:\Users\sidorov.a\workspace\iar_arm\arm\src\flashloade #
#                    r 1986VE93\Milandr\MDR32F1x\" -On --ropi                 #
#                    --use_c++_inline                                         #
#    List file    =  C:\Users\sidorov.a\workspace\iar_arm\arm\src\flashloader #
#                     1986VE93\Milandr\MDR32F1x\FlashMDR32F1xRAM4K\List\flash #
#                    _loader.lst                                              #
#    Object file  =  C:\Users\sidorov.a\workspace\iar_arm\arm\src\flashloader #
#                     1986VE93\Milandr\MDR32F1x\FlashMDR32F1xRAM4K\Obj\flash_ #
#                    loader.o                                                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\Program Files (x86)\IAR Systems\Embedded Workbench 6.4\arm\src\flashloader\framework2\flash_loader.c
      1          // Wrapper for target-specific flash loader code
      2          
      3          #include "flash_loader.h"
      4          #include "flash_loader_extra.h"
      5          
      6          #ifndef MAX_ARGS
      7          #define MAX_ARGS 7
      8          #endif
      9          
     10          // Maximum combined size of arguments, including a trailing null for each argument.
     11          #ifndef MAX_ARG_SIZE
     12          #define MAX_ARG_SIZE 64
     13          #endif
     14          
     15          // Functions in this file, called from the assembly wrapper
     16          void Fl2FlashInitEntry(void);
     17          void Fl2FlashWriteEntry(void);
     18          void Fl2FlashEraseWriteEntry(void);
     19          void Fl2FlashChecksumEntry(void);
     20          void Fl2FlashSignoffEntry(void);
     21          void FlashBreak(void);
     22          
     23          #if CODE_ADDR_AS_VOID_PTR
     24          extern uint32_t FlashChecksum(void const *begin, uint32_t count);
     25          #else
     26          extern uint32_t FlashChecksum(uint32_t begin, uint32_t count);
     27          #endif
     28          extern uint32_t FlashSignoff();
     29          
     30          uint16_t Crc16_helper(uint8_t const *p, uint32_t len, uint16_t sum);
     31          

   \                                 In section .noinit, align 4, root
     32          __root __no_init FlashParamsHolder theFlashParams;
   \                     theFlashParams:
   \   00000000                      DS8 20
     33          

   \                                 In section .noinit, align 4
     34          __no_init int __argc;
   \                     __argc:
   \   00000000                      DS8 4

   \                                 In section .noinit, align 4
     35          __no_init char __argvbuf[MAX_ARG_SIZE];
   \                     __argvbuf:
   \   00000000                      DS8 64
     36          #pragma required=__argvbuf

   \                                 In section .noinit, align 4
     37          __no_init const char* __argv[MAX_ARGS];
   \                     __argv:
   \   00000000                      DS8 28
   \   0000001C                      REQUIRE __argvbuf
     38          
     39          #if CODE_ADDR_AS_VOID_PTR
     40          #define CODE_REF void *
     41          #else
     42          #define CODE_REF uint32_t
     43          #endif
     44          

   \                                 In section .text, align 2, keep-with-next
     45          void Fl2FlashInitEntry()
     46          {
   \                     Fl2FlashInitEntry:
   \   00000000   0xB580             PUSH     {R7,LR}
     47          #if USE_ARGC_ARGV
     48            theFlashParams.count = FlashInit((CODE_REF)theFlashParams.base_ptr,
     49                                             theFlashParams.block_size,       // Image size
     50                                             theFlashParams.offset_into_block,// link adr
     51                                             theFlashParams.count,            // flags
     52                                             __argc,
     53                                             __argv);
     54          #else
     55            theFlashParams.count = FlashInit((CODE_REF)theFlashParams.base_ptr,
     56                                             theFlashParams.block_size,       // Image size
     57                                             theFlashParams.offset_into_block,// link adr
     58                                             theFlashParams.count);           // flags
   \   00000002   0x....             LDR      R0,??DataTable5
   \   00000004   0x6843             LDR      R3,[R0, #+4]
   \   00000006   0x....             LDR      R0,??DataTable5
   \   00000008   0x6882             LDR      R2,[R0, #+8]
   \   0000000A   0x....             LDR      R0,??DataTable5
   \   0000000C   0x6901             LDR      R1,[R0, #+16]
   \   0000000E   0x....             LDR      R0,??DataTable5
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x.... 0x....      BL       FlashInit
   \   00000016   0x....             LDR      R1,??DataTable5
   \   00000018   0x6048             STR      R0,[R1, #+4]
     59          #endif
     60          }
   \   0000001A   0xBD01             POP      {R0,PC}          ;; return
     61          
     62          // The normal flash write function ----------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     63          void Fl2FlashWriteEntry()
     64          {
   \                     Fl2FlashWriteEntry:
   \   00000000   0xB580             PUSH     {R7,LR}
     65            theFlashParams.count = FlashWrite((CODE_REF)theFlashParams.base_ptr,
     66                                              theFlashParams.offset_into_block,
     67                                              theFlashParams.count,
     68                                              theFlashParams.buffer);
   \   00000002   0x....             LDR      R0,??DataTable5
   \   00000004   0x68C3             LDR      R3,[R0, #+12]
   \   00000006   0x....             LDR      R0,??DataTable5
   \   00000008   0x6842             LDR      R2,[R0, #+4]
   \   0000000A   0x....             LDR      R0,??DataTable5
   \   0000000C   0x6881             LDR      R1,[R0, #+8]
   \   0000000E   0x....             LDR      R0,??DataTable5
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x.... 0x....      BL       FlashWrite
   \   00000016   0x....             LDR      R1,??DataTable5
   \   00000018   0x6048             STR      R0,[R1, #+4]
     69          }
   \   0000001A   0xBD01             POP      {R0,PC}          ;; return
     70          
     71          // The erase-first flash write function -----------------------------------------

   \                                 In section .text, align 2, keep-with-next
     72          void Fl2FlashEraseWriteEntry()
     73          {
   \                     Fl2FlashEraseWriteEntry:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
     74            uint32_t tmp = theFlashParams.block_size;
   \   00000002   0x....             LDR      R0,??DataTable5
   \   00000004   0x6906             LDR      R6,[R0, #+16]
     75            if (tmp == 0)
   \   00000006   0x2E00             CMP      R6,#+0
   \   00000008   0xD110             BNE      ??Fl2FlashEraseWriteEntry_0
     76            {
     77              FlashEraseData *p = (FlashEraseData*)theFlashParams.buffer;
   \   0000000A   0x....             LDR      R0,??DataTable5
   \   0000000C   0x68C4             LDR      R4,[R0, #+12]
     78              for (uint32_t i = 0; i < theFlashParams.count; ++i)
   \   0000000E   0x2500             MOVS     R5,#+0
   \                     ??Fl2FlashEraseWriteEntry_1:
   \   00000010   0x....             LDR      R0,??DataTable5
   \   00000012   0x6840             LDR      R0,[R0, #+4]
   \   00000014   0x4285             CMP      R5,R0
   \   00000016   0xD21D             BCS      ??Fl2FlashEraseWriteEntry_2
     79              {
     80                tmp = FlashErase((CODE_REF)p->start, p->length);
   \   00000018   0x6861             LDR      R1,[R4, #+4]
   \   0000001A   0x6820             LDR      R0,[R4, #+0]
   \   0000001C   0x.... 0x....      BL       FlashErase
   \   00000020   0x0006             MOVS     R6,R0
     81                if (tmp != 0) break;
   \   00000022   0x2E00             CMP      R6,#+0
   \   00000024   0xD116             BNE      ??Fl2FlashEraseWriteEntry_2
     82                ++p;
   \                     ??Fl2FlashEraseWriteEntry_3:
   \   00000026   0x3408             ADDS     R4,R4,#+8
     83              }
   \   00000028   0x1C6D             ADDS     R5,R5,#+1
   \   0000002A   0xE7F1             B        ??Fl2FlashEraseWriteEntry_1
     84            }
     85            else
     86            {
     87              tmp = FlashErase((CODE_REF)theFlashParams.base_ptr,
     88                               theFlashParams.block_size);
   \                     ??Fl2FlashEraseWriteEntry_0:
   \   0000002C   0x....             LDR      R0,??DataTable5
   \   0000002E   0x6901             LDR      R1,[R0, #+16]
   \   00000030   0x....             LDR      R0,??DataTable5
   \   00000032   0x6800             LDR      R0,[R0, #+0]
   \   00000034   0x.... 0x....      BL       FlashErase
   \   00000038   0x0006             MOVS     R6,R0
     89              if (tmp == 0)
   \   0000003A   0x2E00             CMP      R6,#+0
   \   0000003C   0xD10A             BNE      ??Fl2FlashEraseWriteEntry_2
     90              {
     91                tmp = FlashWrite((CODE_REF)theFlashParams.base_ptr,
     92                                 theFlashParams.offset_into_block,
     93                                 theFlashParams.count,
     94                                 theFlashParams.buffer);
   \   0000003E   0x....             LDR      R0,??DataTable5
   \   00000040   0x68C3             LDR      R3,[R0, #+12]
   \   00000042   0x....             LDR      R0,??DataTable5
   \   00000044   0x6842             LDR      R2,[R0, #+4]
   \   00000046   0x....             LDR      R0,??DataTable5
   \   00000048   0x6881             LDR      R1,[R0, #+8]
   \   0000004A   0x....             LDR      R0,??DataTable5
   \   0000004C   0x6800             LDR      R0,[R0, #+0]
   \   0000004E   0x.... 0x....      BL       FlashWrite
   \   00000052   0x0006             MOVS     R6,R0
     95              }
     96            }
     97            theFlashParams.count = tmp;
   \                     ??Fl2FlashEraseWriteEntry_2:
   \   00000054   0x....             LDR      R0,??DataTable5
   \   00000056   0x6046             STR      R6,[R0, #+4]
     98          }
   \   00000058   0xBD70             POP      {R4-R6,PC}       ;; return
     99          
    100          

   \                                 In section .text, align 2, keep-with-next
    101          void Fl2FlashChecksumEntry()
    102          {
   \                     Fl2FlashChecksumEntry:
   \   00000000   0xB580             PUSH     {R7,LR}
    103            theFlashParams.count = FlashChecksum((CODE_REF)theFlashParams.base_ptr,
    104                                                 theFlashParams.count);
   \   00000002   0x....             LDR      R0,??DataTable5
   \   00000004   0x6841             LDR      R1,[R0, #+4]
   \   00000006   0x....             LDR      R0,??DataTable5
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x.... 0x....      BL       FlashChecksum
   \   0000000E   0x....             LDR      R1,??DataTable5
   \   00000010   0x6048             STR      R0,[R1, #+4]
    105          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
    106          

   \                                 In section .text, align 2, keep-with-next
    107          void Fl2FlashSignoffEntry()
    108          {
   \                     Fl2FlashSignoffEntry:
   \   00000000   0xB580             PUSH     {R7,LR}
    109            theFlashParams.count = FlashSignoff();
   \   00000002   0x.... 0x....      BL       FlashSignoff
   \   00000006   0x....             LDR      R1,??DataTable5
   \   00000008   0x6048             STR      R0,[R1, #+4]
    110          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
    111          
    112          

   \                                 In section .text, align 2, keep-with-next
    113          uint16_t Crc16(uint8_t const *p, uint32_t len)
    114          {
   \                     Crc16:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0006             MOVS     R6,R0
   \   00000006   0x000C             MOVS     R4,R1
    115            uint8_t zero[2] = { 0, 0 };
   \   00000008   0x4668             MOV      R0,SP
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x8001             STRH     R1,[R0, #0]
    116            uint16_t sum = Crc16_helper(p, len, 0);
   \   0000000E   0x2200             MOVS     R2,#+0
   \   00000010   0x0021             MOVS     R1,R4
   \   00000012   0x0030             MOVS     R0,R6
   \   00000014   0x.... 0x....      BL       Crc16_helper
   \   00000018   0x0005             MOVS     R5,R0
    117            return Crc16_helper(zero, 2, sum);
   \   0000001A   0x002A             MOVS     R2,R5
   \   0000001C   0xB292             UXTH     R2,R2
   \   0000001E   0x2102             MOVS     R1,#+2
   \   00000020   0x4668             MOV      R0,SP
   \   00000022   0x.... 0x....      BL       Crc16_helper
   \   00000026   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    118          }
    119          

   \                                 In section .text, align 2, keep-with-next
    120          uint16_t Crc16_helper(uint8_t const *p, uint32_t len, uint16_t sum)
    121          {
   \                     Crc16_helper:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0003             MOVS     R3,R0
   \   00000004   0x0010             MOVS     R0,R2
    122            while (len--)
   \                     ??Crc16_helper_0:
   \   00000006   0x000A             MOVS     R2,R1
   \   00000008   0x1E51             SUBS     R1,R2,#+1
   \   0000000A   0x2A00             CMP      R2,#+0
   \   0000000C   0xD015             BEQ      ??Crc16_helper_1
    123            {
    124              int i;
    125              uint8_t byte = *p++;
   \   0000000E   0x781C             LDRB     R4,[R3, #+0]
   \   00000010   0x1C5B             ADDS     R3,R3,#+1
    126          
    127              for (i = 0; i < 8; ++i)
   \   00000012   0x2500             MOVS     R5,#+0
   \   00000014   0x002A             MOVS     R2,R5
   \                     ??Crc16_helper_2:
   \   00000016   0x2A08             CMP      R2,#+8
   \   00000018   0xDAF5             BGE      ??Crc16_helper_0
    128              {
    129                uint32_t osum = sum;
   \   0000001A   0xB280             UXTH     R0,R0
   \   0000001C   0x0005             MOVS     R5,R0
    130                sum <<= 1;
   \   0000001E   0x0040             LSLS     R0,R0,#+1
    131                if (byte & 0x80)
   \   00000020   0x0626             LSLS     R6,R4,#+24
   \   00000022   0xD502             BPL      ??Crc16_helper_3
    132                  sum |= 1 ;
   \   00000024   0x0006             MOVS     R6,R0
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0x4330             ORRS     R0,R0,R6
    133                if (osum & 0x8000)
   \                     ??Crc16_helper_3:
   \   0000002A   0x042E             LSLS     R6,R5,#+16
   \   0000002C   0xD502             BPL      ??Crc16_helper_4
    134                  sum ^= 0x1021;
   \   0000002E   0x0006             MOVS     R6,R0
   \   00000030   0x....             LDR      R0,??DataTable5_1  ;; 0x1021
   \   00000032   0x4070             EORS     R0,R0,R6
    135                byte <<= 1;
   \                     ??Crc16_helper_4:
   \   00000034   0x0064             LSLS     R4,R4,#+1
    136              }
   \   00000036   0x1C52             ADDS     R2,R2,#+1
   \   00000038   0xE7ED             B        ??Crc16_helper_2
    137            }
    138            return sum;
   \                     ??Crc16_helper_1:
   \   0000003A   0xB280             UXTH     R0,R0
   \   0000003C   0xBD70             POP      {R4-R6,PC}       ;; return
    139          }
    140          
    141          #pragma optimize=no_inline

   \                                 In section .text, align 2, keep-with-next, root
    142          __root void FlashBreak()
    143          {
    144            while(1);
   \                     FlashBreak:
   \                     ??FlashBreak_0:
   \   00000000   0xE7FE             B        ??FlashBreak_0
    145          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     theFlashParams

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x00001021         DC32     0x1021

   \                                 In section .rodata, align 2
   \   00000000   0x00 0x00          DC8 0, 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       24  Crc16
             24 -> Crc16_helper
       16  Crc16_helper
        8  Fl2FlashChecksumEntry
              8 -> FlashChecksum
       16  Fl2FlashEraseWriteEntry
             16 -> FlashErase
             16 -> FlashWrite
        8  Fl2FlashInitEntry
              8 -> FlashInit
        8  Fl2FlashSignoffEntry
              8 -> FlashSignoff
        8  Fl2FlashWriteEntry
              8 -> FlashWrite
        0  FlashBreak


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant {0, 0}>
       4  ??DataTable5
       4  ??DataTable5_1
      40  Crc16
      62  Crc16_helper
      20  Fl2FlashChecksumEntry
      90  Fl2FlashEraseWriteEntry
      28  Fl2FlashInitEntry
      12  Fl2FlashSignoffEntry
      28  Fl2FlashWriteEntry
       2  FlashBreak
       4  __argc
      28  __argv
      64  __argvbuf
      20  theFlashParams

 
 116 bytes in section .noinit
   2 bytes in section .rodata
 290 bytes in section .text
 
 290 bytes of CODE  memory
   2 bytes of CONST memory
 116 bytes of DATA  memory

Errors: none
Warnings: none
