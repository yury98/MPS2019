###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.2.53884/W32 for ARM     25/Jun/2013  10:30:59 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\sidorov.a\workspace\iar_arm\arm\src\flashloader #
#                     1986VE93\Milandr\MDR32F1x\FlashMDR32F1x.c               #
#    Command line =  "C:\Users\sidorov.a\workspace\iar_arm\arm\src\flashloade #
#                    r 1986VE93\Milandr\MDR32F1x\FlashMDR32F1x.c" -lCN        #
#                    "C:\Users\sidorov.a\workspace\iar_arm\arm\src\flashloade #
#                    r 1986VE93\Milandr\MDR32F1x\FlashMDR32F1xRAM4K\List\"    #
#                    -o "C:\Users\sidorov.a\workspace\iar_arm\arm\src\flashlo #
#                    ader 1986VE93\Milandr\MDR32F1x\FlashMDR32F1xRAM4K\Obj\"  #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M1 -e --fpu=None -I         #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.4\arm\src\flashloader\framework2\" -I                  #
#                    "C:\Users\sidorov.a\workspace\iar_arm\arm\src\flashloade #
#                    r 1986VE93\Milandr\MDR32F1x\" -On --ropi                 #
#                    --use_c++_inline                                         #
#    List file    =  C:\Users\sidorov.a\workspace\iar_arm\arm\src\flashloader #
#                     1986VE93\Milandr\MDR32F1x\FlashMDR32F1xRAM4K\List\Flash #
#                    MDR32F1x.lst                                             #
#    Object file  =  C:\Users\sidorov.a\workspace\iar_arm\arm\src\flashloader #
#                     1986VE93\Milandr\MDR32F1x\FlashMDR32F1xRAM4K\Obj\FlashM #
#                    DR32F1x.o                                                #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\sidorov.a\workspace\iar_arm\arm\src\flashloader 1986VE93\Milandr\MDR32F1x\FlashMDR32F1x.c
      1          /**************************************************
      2           * Copyright 2004-2010 IAR Systems. All rights reserved.
      3           *
      4           * $Revision: 29 $
      5           **************************************************/
      6          
      7          #include <stdio.h>
      8          #include <stdlib.h>
      9          #include <string.h>
     10          #include <Milandr\1986be9x.h>
     11          
     12          #include "flash_loader.h"
     13          
     14          #define STANDBY 0x30L
     15          #define READ    0x00L
     16          #define PROGRAM 0x21L
     17          #define PGERASE 0x22L
     18          #define READCDI 0x0BL
     19          #define READDID 0x0CL
     20          
     21          #define flash_unit uint32_t
     22          
     23          #define FLASH1               ((uint32_t *)0x00001ff0)
     24          #define FLASH2               ((uint32_t *)0x00001ff4)
     25          #define FLASH3               ((uint32_t *)0x00001ff8)
     26          
     27          
     28          /*************************************************************************
     29           * FMC module initialization
     30           *************************************************************************/
     31          

   \                                 In section .text, align 2, keep-with-next
     32          void ProgramDelay(uint32_t Loops)
     33          {
   \                     ProgramDelay:
   \   00000000   0xB580             PUSH     {R7,LR}
     34            volatile uint32_t i = Loops;
   \   00000002   0x9000             STR      R0,[SP, #+0]
     35            for (; i > 0; i--);
   \                     ??ProgramDelay_0:
   \   00000004   0x9900             LDR      R1,[SP, #+0]
   \   00000006   0x2900             CMP      R1,#+0
   \   00000008   0xD003             BEQ      ??ProgramDelay_1
   \   0000000A   0x9900             LDR      R1,[SP, #+0]
   \   0000000C   0x1E49             SUBS     R1,R1,#+1
   \   0000000E   0x9100             STR      R1,[SP, #+0]
   \   00000010   0xE7F8             B        ??ProgramDelay_0
     36          }
   \                     ??ProgramDelay_1:
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
     37          #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     38          

   \                                 In section .text, align 2, keep-with-next
     39          PUTCHAR_PROTOTYPE{
   \                     fputc:
   \   00000000   0xB500             PUSH     {LR}
     40                  UART2->DR = ch;
   \   00000002   0x....             LDR      R2,??DataTable3  ;; 0x40038000
   \   00000004   0x6010             STR      R0,[R2, #+0]
     41                  // Loop until the end of transmission
     42                  while(0 == (UART2->FR & (1UL << 7)));
   \                     ??fputc_0:
   \   00000006   0x....             LDR      R2,??DataTable3_1  ;; 0x40038018
   \   00000008   0x6812             LDR      R2,[R2, #+0]
   \   0000000A   0x0612             LSLS     R2,R2,#+24
   \   0000000C   0xD5FB             BPL      ??fputc_0
     43            return (ch);
   \   0000000E   0xBD00             POP      {PC}             ;; return
     44          }
     45          #if USE_ARGC_ARGV
     46          uint32_t FlashInit(void *base_of_flash, uint32_t image_size,
     47                             uint32_t link_address, uint32_t flags,
     48                             int argc, char const *argv[])
     49          #else

   \                                 In section .text, align 2, keep-with-next
     50          uint32_t FlashInit(void *base_of_flash, uint32_t image_size,
     51                             uint32_t link_address, uint32_t flags)
     52          #endif
     53          {
   \                     FlashInit:
   \   00000000   0xB430             PUSH     {R4,R5}
   \   00000002   0x0004             MOVS     R4,R0
     54            /*Enable ISP Clock*/
     55            /*Enable ISP function*/
     56            /*Enable ISP function*/
     57            RST_CLK->PER_CLOCK = 0xFFFFFFFF;
   \   00000004   0x....             LDR      R0,??DataTable3_2  ;; 0x4002001c
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0x43ED             MVNS     R5,R5            ;; #-1
   \   0000000A   0x6005             STR      R5,[R0, #+0]
     58              
     59            //uint32_t * per2_clock = (uint32_t *)(0x4002000 + 0x38);
     60            //uint32_t * uart_ssp = (uint32_t *)(0x4002000 + 0x3C);
     61          
     62          /*  
     63            // включаем HSE
     64            RST_CLK->HS_CONTROL = 1<<0;
     65            
     66            while((RST_CLK->CLOCK_STATUS & (1<<2)) == 0);
     67            
     68            RST_CLK->CPU_CLOCK = (1<<1) | (1<<8);
     69            
     70              // Отладка
     71            PORTD->FUNC = (1<<13*2) | (1<<14*2);
     72            PORTD->ANALOG = 0xFFFFFFFF;
     73            PORTD->PWR = 0xFFFFFFFF;
     74            
     75            
     76            RST_CLK->UART_CLOCK = 1 << 25;
     77            
     78            // Настройка UART
     79            
     80            UART2->FBRD = 6;
     81            UART2->IBRD = 52;
     82            
     83            UART2->CR = (1<<7) | (1<<8) | (1<<0);
     84            
     85            UART2->LCR_H = 3 << 5;
     86            
     87            //printf("test");
     88          
     89            //UART2->DR = 0x30;
     90            //while(0 == (UART2->FR & (1UL << 7)));
     91            
     92          //  if(RESULT_ERROR == FlashErase(0,0)) 
     93          	//return RESULT_ERROR;
     94          */  
     95            
     96            return RESULT_OK;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xBC30             POP      {R4,R5}
   \   00000010   0x4770             BX       LR               ;; return
     97          }
     98          
     99          

   \                                 In section .text, align 2, keep-with-next
    100          uint32_t FlashWrite(void *block_start,
    101                              uint32_t offset_into_block,
    102                              uint32_t count,
    103                              char const *buffer)
    104          {
   \                     FlashWrite:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
    105              //printf("\t\tFlashWrite block_start 0x%x, offset_into_block 0x%x, count 0x%X, buffer 0x%x\n\r",(uint32_t)block_start,offset_into_block,count,(uint32_t)buffer);
    106          	
    107          	uint32_t * ptr_buffer = (uint32_t *)buffer;
   \   00000004   0x001D             MOVS     R5,R3
    108          	
    109          	//for(uint32_t i = 0; i < 16; i++)
    110          	//  printf("data = 0x%x\r\n",ptr_buffer[i]);
    111          	
    112          	//uint32_t * ptr = (uint32_t *)(((uint32_t)block_start) + offset_into_block);
    113            
    114          	uint32_t size = 0;
   \   00000006   0x2600             MOVS     R6,#+0
    115          	volatile uint32_t y = 0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x9000             STR      R0,[SP, #+0]
    116          
    117          
    118          	
    119              RST_CLK->PER_CLOCK = 0xFFFFFFFF;
   \   0000000C   0x....             LDR      R0,??DataTable3_2  ;; 0x4002001c
   \   0000000E   0x2700             MOVS     R7,#+0
   \   00000010   0x43FF             MVNS     R7,R7            ;; #-1
   \   00000012   0x6007             STR      R7,[R0, #+0]
    120          	while( size < count/4 ){
   \                     ??FlashWrite_0:
   \   00000014   0x0010             MOVS     R0,R2
   \   00000016   0x0880             LSRS     R0,R0,#+2
   \   00000018   0x4286             CMP      R6,R0
   \   0000001A   0xD259             BCS      ??FlashWrite_1
    121          	  
    122          		EEPROM->KEY = 0x8AAA5551;
   \   0000001C   0x....             LDR      R0,??DataTable3_3  ;; 0x40018010
   \   0000001E   0x....             LDR      R7,??DataTable3_4  ;; 0x8aaa5551
   \   00000020   0x6007             STR      R7,[R0, #+0]
    123          		
    124          		EEPROM->CMD = 0x0001 ;
   \   00000022   0x....             LDR      R0,??DataTable3_5  ;; 0x40018000
   \   00000024   0x2701             MOVS     R7,#+1
   \   00000026   0x6007             STR      R7,[R0, #+0]
    125          		EEPROM->ADR = (uint32_t) ((uint32_t)block_start + offset_into_block + size*4);
   \   00000028   0x1860             ADDS     R0,R4,R1
   \   0000002A   0x2704             MOVS     R7,#+4
   \   0000002C   0x4377             MULS     R7,R6,R7
   \   0000002E   0x19C0             ADDS     R0,R0,R7
   \   00000030   0x....             LDR      R7,??DataTable3_6  ;; 0x40018004
   \   00000032   0x6038             STR      R0,[R7, #+0]
    126          		EEPROM->DI  = ptr_buffer[size];
   \   00000034   0x2004             MOVS     R0,#+4
   \   00000036   0x4370             MULS     R0,R6,R0
   \   00000038   0x5828             LDR      R0,[R5, R0]
   \   0000003A   0x....             LDR      R7,??DataTable3_7  ;; 0x40018008
   \   0000003C   0x6038             STR      R0,[R7, #+0]
    127          		
    128          		EEPROM->CMD = 0x1041;	// Set PROG XE EN
   \   0000003E   0x....             LDR      R0,??DataTable3_5  ;; 0x40018000
   \   00000040   0x....             LDR      R7,??DataTable3_8  ;; 0x1041
   \   00000042   0x6007             STR      R7,[R0, #+0]
    129          		for (y=0;y<40;y++); // 5 мкс
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0x9000             STR      R0,[SP, #+0]
   \                     ??FlashWrite_2:
   \   00000048   0x9800             LDR      R0,[SP, #+0]
   \   0000004A   0x2828             CMP      R0,#+40
   \   0000004C   0xD203             BCS      ??FlashWrite_3
   \   0000004E   0x9800             LDR      R0,[SP, #+0]
   \   00000050   0x1C40             ADDS     R0,R0,#+1
   \   00000052   0x9000             STR      R0,[SP, #+0]
   \   00000054   0xE7F8             B        ??FlashWrite_2
    130          		
    131          		EEPROM->CMD = 0x3041; // SET NVSTR
   \                     ??FlashWrite_3:
   \   00000056   0x....             LDR      R0,??DataTable3_5  ;; 0x40018000
   \   00000058   0x....             LDR      R7,??DataTable3_9  ;; 0x3041
   \   0000005A   0x6007             STR      R7,[R0, #+0]
    132          		for (y=0;y<80;y++);	//10 мкс
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0x9000             STR      R0,[SP, #+0]
   \                     ??FlashWrite_4:
   \   00000060   0x9800             LDR      R0,[SP, #+0]
   \   00000062   0x2850             CMP      R0,#+80
   \   00000064   0xD203             BCS      ??FlashWrite_5
   \   00000066   0x9800             LDR      R0,[SP, #+0]
   \   00000068   0x1C40             ADDS     R0,R0,#+1
   \   0000006A   0x9000             STR      R0,[SP, #+0]
   \   0000006C   0xE7F8             B        ??FlashWrite_4
    133          		
    134          		EEPROM->CMD = 0x30C1; // SET YE
   \                     ??FlashWrite_5:
   \   0000006E   0x....             LDR      R0,??DataTable3_5  ;; 0x40018000
   \   00000070   0x....             LDR      R7,??DataTable3_10  ;; 0x30c1
   \   00000072   0x6007             STR      R7,[R0, #+0]
    135          		for (y=0;y<400;y++); 	//40 мкс
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x9000             STR      R0,[SP, #+0]
   \                     ??FlashWrite_6:
   \   00000078   0x9800             LDR      R0,[SP, #+0]
   \   0000007A   0x27C8             MOVS     R7,#+200
   \   0000007C   0x007F             LSLS     R7,R7,#+1        ;; #+400
   \   0000007E   0x42B8             CMP      R0,R7
   \   00000080   0xD203             BCS      ??FlashWrite_7
   \   00000082   0x9800             LDR      R0,[SP, #+0]
   \   00000084   0x1C40             ADDS     R0,R0,#+1
   \   00000086   0x9000             STR      R0,[SP, #+0]
   \   00000088   0xE7F6             B        ??FlashWrite_6
    136          		
    137          		EEPROM->CMD = 0x3041; // CLEAR YE
   \                     ??FlashWrite_7:
   \   0000008A   0x....             LDR      R0,??DataTable3_5  ;; 0x40018000
   \   0000008C   0x....             LDR      R7,??DataTable3_9  ;; 0x3041
   \   0000008E   0x6007             STR      R7,[R0, #+0]
    138          		EEPROM->CMD = 0x2041;	// CLER PROG 
   \   00000090   0x....             LDR      R0,??DataTable3_5  ;; 0x40018000
   \   00000092   0x....             LDR      R7,??DataTable3_11  ;; 0x2041
   \   00000094   0x6007             STR      R7,[R0, #+0]
    139          		for (y=0;y<40;y++);		// 5 мкс
   \   00000096   0x2000             MOVS     R0,#+0
   \   00000098   0x9000             STR      R0,[SP, #+0]
   \                     ??FlashWrite_8:
   \   0000009A   0x9800             LDR      R0,[SP, #+0]
   \   0000009C   0x2828             CMP      R0,#+40
   \   0000009E   0xD203             BCS      ??FlashWrite_9
   \   000000A0   0x9800             LDR      R0,[SP, #+0]
   \   000000A2   0x1C40             ADDS     R0,R0,#+1
   \   000000A4   0x9000             STR      R0,[SP, #+0]
   \   000000A6   0xE7F8             B        ??FlashWrite_8
    140          		
    141          		EEPROM->CMD = 0x0001; // CLEAR NVSTR XE
   \                     ??FlashWrite_9:
   \   000000A8   0x....             LDR      R0,??DataTable3_5  ;; 0x40018000
   \   000000AA   0x2701             MOVS     R7,#+1
   \   000000AC   0x6007             STR      R7,[R0, #+0]
    142          		for (y=0;y<10;y++);
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x9000             STR      R0,[SP, #+0]
   \                     ??FlashWrite_10:
   \   000000B2   0x9800             LDR      R0,[SP, #+0]
   \   000000B4   0x280A             CMP      R0,#+10
   \   000000B6   0xD203             BCS      ??FlashWrite_11
   \   000000B8   0x9800             LDR      R0,[SP, #+0]
   \   000000BA   0x1C40             ADDS     R0,R0,#+1
   \   000000BC   0x9000             STR      R0,[SP, #+0]
   \   000000BE   0xE7F8             B        ??FlashWrite_10
    143          		
    144          		EEPROM->CMD = 0x0000; // CLEAR NVSTR XE
   \                     ??FlashWrite_11:
   \   000000C0   0x....             LDR      R0,??DataTable3_5  ;; 0x40018000
   \   000000C2   0x2700             MOVS     R7,#+0
   \   000000C4   0x6007             STR      R7,[R0, #+0]
    145          		EEPROM->KEY = 0;
   \   000000C6   0x....             LDR      R0,??DataTable3_3  ;; 0x40018010
   \   000000C8   0x2700             MOVS     R7,#+0
   \   000000CA   0x6007             STR      R7,[R0, #+0]
    146          		    
    147          		size++;
   \   000000CC   0x1C76             ADDS     R6,R6,#+1
   \   000000CE   0xE7A1             B        ??FlashWrite_0
    148          	}                
    149          
    150          	//for(int i = 0; i < 16; i++)
    151          	//  printf("\tflash_data = 0x%x\r\n", ptr[i]);
    152          
    153              return(RESULT_OK);
   \                     ??FlashWrite_1:
   \   000000D0   0x2000             MOVS     R0,#+0
   \   000000D2   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    154          }
    155          
    156          /*************************************************************************
    157           * FMC Block erase
    158           *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    159          uint32_t FlashErase(void *block_start,
    160                              uint32_t block_size)
    161          {
   \                     FlashErase:
   \   00000000   0xB53C             PUSH     {R2-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    162          	//printf("FlasErase block_start 0x%x, block_size 0x%x\n\r",(uint32_t)block_start,block_size);
    163          	
    164          	if ( (((uint32_t)block_start)%0x1000) == 0){ 
   \   00000006   0x0020             MOVS     R0,R4
   \   00000008   0x2180             MOVS     R1,#+128
   \   0000000A   0x0149             LSLS     R1,R1,#+5        ;; #+4096
   \   0000000C   0x.... 0x....      BL       __aeabi_uidivmod
   \   00000010   0x2900             CMP      R1,#+0
   \   00000012   0xD152             BNE      ??FlashErase_0
    165          		//printf("Erasing...\r\n");
    166          		volatile int i,y;
    167          		for(i = 0; i < 4; i++){
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x9001             STR      R0,[SP, #+4]
   \                     ??FlashErase_1:
   \   00000018   0x9801             LDR      R0,[SP, #+4]
   \   0000001A   0x2804             CMP      R0,#+4
   \   0000001C   0xDA4D             BGE      ??FlashErase_0
    168          			
    169          			RST_CLK->PER_CLOCK = 0xFFFFFFFF;    
   \   0000001E   0x....             LDR      R0,??DataTable3_2  ;; 0x4002001c
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x43C9             MVNS     R1,R1            ;; #-1
   \   00000024   0x6001             STR      R1,[R0, #+0]
    170          			EEPROM->KEY = 0x8AAA5551;
   \   00000026   0x....             LDR      R0,??DataTable3_3  ;; 0x40018010
   \   00000028   0x....             LDR      R1,??DataTable3_4  ;; 0x8aaa5551
   \   0000002A   0x6001             STR      R1,[R0, #+0]
    171          			
    172          			EEPROM->CMD = 0x1;
   \   0000002C   0x....             LDR      R0,??DataTable3_5  ;; 0x40018000
   \   0000002E   0x2101             MOVS     R1,#+1
   \   00000030   0x6001             STR      R1,[R0, #+0]
    173          			EEPROM->ADR = ((uint32_t)block_start) + i*4;
   \   00000032   0x9801             LDR      R0,[SP, #+4]
   \   00000034   0x2104             MOVS     R1,#+4
   \   00000036   0x4348             MULS     R0,R1,R0
   \   00000038   0x1820             ADDS     R0,R4,R0
   \   0000003A   0x....             LDR      R1,??DataTable3_6  ;; 0x40018004
   \   0000003C   0x6008             STR      R0,[R1, #+0]
    174          			EEPROM->DI = 0x00;
   \   0000003E   0x....             LDR      R0,??DataTable3_7  ;; 0x40018008
   \   00000040   0x2100             MOVS     R1,#+0
   \   00000042   0x6001             STR      R1,[R0, #+0]
    175          			//printf("ERASE ADDR = 0x%d\r\n", EEPROM->ADR);
    176          			
    177          			EEPROM->CMD = 0x0441;
   \   00000044   0x....             LDR      R0,??DataTable3_5  ;; 0x40018000
   \   00000046   0x....             LDR      R1,??DataTable3_12  ;; 0x441
   \   00000048   0x6001             STR      R1,[R0, #+0]
    178          			for (y=0;y<40;y++);		// 5 мкс
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x9000             STR      R0,[SP, #+0]
   \                     ??FlashErase_2:
   \   0000004E   0x9800             LDR      R0,[SP, #+0]
   \   00000050   0x2828             CMP      R0,#+40
   \   00000052   0xDA03             BGE      ??FlashErase_3
   \   00000054   0x9800             LDR      R0,[SP, #+0]
   \   00000056   0x1C40             ADDS     R0,R0,#+1
   \   00000058   0x9000             STR      R0,[SP, #+0]
   \   0000005A   0xE7F8             B        ??FlashErase_2
    179          			
    180          			EEPROM->CMD = 0x2441;
   \                     ??FlashErase_3:
   \   0000005C   0x....             LDR      R0,??DataTable3_5  ;; 0x40018000
   \   0000005E   0x....             LDR      R1,??DataTable3_13  ;; 0x2441
   \   00000060   0x6001             STR      R1,[R0, #+0]
    181          			for (y=0;y<320000/2;y++);
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x9000             STR      R0,[SP, #+0]
   \                     ??FlashErase_4:
   \   00000066   0x9800             LDR      R0,[SP, #+0]
   \   00000068   0x....             LDR      R1,??DataTable3_14  ;; 0x27100
   \   0000006A   0x4288             CMP      R0,R1
   \   0000006C   0xDA03             BGE      ??FlashErase_5
   \   0000006E   0x9800             LDR      R0,[SP, #+0]
   \   00000070   0x1C40             ADDS     R0,R0,#+1
   \   00000072   0x9000             STR      R0,[SP, #+0]
   \   00000074   0xE7F7             B        ??FlashErase_4
    182          			
    183          			EEPROM->CMD = 0x2041;
   \                     ??FlashErase_5:
   \   00000076   0x....             LDR      R0,??DataTable3_5  ;; 0x40018000
   \   00000078   0x....             LDR      R1,??DataTable3_11  ;; 0x2041
   \   0000007A   0x6001             STR      R1,[R0, #+0]
    184          			for (y=0;y<40;y++);		// 5 мкс
   \   0000007C   0x2000             MOVS     R0,#+0
   \   0000007E   0x9000             STR      R0,[SP, #+0]
   \                     ??FlashErase_6:
   \   00000080   0x9800             LDR      R0,[SP, #+0]
   \   00000082   0x2828             CMP      R0,#+40
   \   00000084   0xDA03             BGE      ??FlashErase_7
   \   00000086   0x9800             LDR      R0,[SP, #+0]
   \   00000088   0x1C40             ADDS     R0,R0,#+1
   \   0000008A   0x9000             STR      R0,[SP, #+0]
   \   0000008C   0xE7F8             B        ??FlashErase_6
    185          			
    186          			EEPROM->CMD = 0x0001;
   \                     ??FlashErase_7:
   \   0000008E   0x....             LDR      R0,??DataTable3_5  ;; 0x40018000
   \   00000090   0x2101             MOVS     R1,#+1
   \   00000092   0x6001             STR      R1,[R0, #+0]
    187          			for (y=0;y<8;y++);		// 1 мкс
   \   00000094   0x2000             MOVS     R0,#+0
   \   00000096   0x9000             STR      R0,[SP, #+0]
   \                     ??FlashErase_8:
   \   00000098   0x9800             LDR      R0,[SP, #+0]
   \   0000009A   0x2808             CMP      R0,#+8
   \   0000009C   0xDA03             BGE      ??FlashErase_9
   \   0000009E   0x9800             LDR      R0,[SP, #+0]
   \   000000A0   0x1C40             ADDS     R0,R0,#+1
   \   000000A2   0x9000             STR      R0,[SP, #+0]
   \   000000A4   0xE7F8             B        ??FlashErase_8
    188          			EEPROM->CMD = 0x0;
   \                     ??FlashErase_9:
   \   000000A6   0x....             LDR      R0,??DataTable3_5  ;; 0x40018000
   \   000000A8   0x2100             MOVS     R1,#+0
   \   000000AA   0x6001             STR      R1,[R0, #+0]
    189          			EEPROM->KEY = 0;
   \   000000AC   0x....             LDR      R0,??DataTable3_3  ;; 0x40018010
   \   000000AE   0x2100             MOVS     R1,#+0
   \   000000B0   0x6001             STR      R1,[R0, #+0]
    190          		}
   \   000000B2   0x9801             LDR      R0,[SP, #+4]
   \   000000B4   0x1C40             ADDS     R0,R0,#+1
   \   000000B6   0x9001             STR      R0,[SP, #+4]
   \   000000B8   0xE7AE             B        ??FlashErase_1
    191          	}
    192          
    193          	return(RESULT_OK);
   \                     ??FlashErase_0:
   \   000000BA   0x2000             MOVS     R0,#+0
   \   000000BC   0xBD36             POP      {R1,R2,R4,R5,PC}  ;; return
    194          }
    195          
    196          
    197          /*************************************************************************
    198           * FMC deinit
    199           *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    200          uint32_t FlashSignoff()
    201          {
    202            /*Enable ISP function*/
    203            /*Enable ISP function*/
    204          
    205            
    206            return RESULT_OK;
   \                     FlashSignoff:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    207          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x40038000         DC32     0x40038000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x40038018         DC32     0x40038018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x4002001C         DC32     0x4002001c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x40018010         DC32     0x40018010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x8AAA5551         DC32     0x8aaa5551

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x40018000         DC32     0x40018000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x40018004         DC32     0x40018004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x40018008         DC32     0x40018008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x00001041         DC32     0x1041

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x00003041         DC32     0x3041

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x000030C1         DC32     0x30c1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   0x00002041         DC32     0x2041

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \   00000000   0x00000441         DC32     0x441

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \   00000000   0x00002441         DC32     0x2441

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \   00000000   0x00027100         DC32     0x27100

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       20  FlashErase
             20 -> __aeabi_uidivmod
        8  FlashInit
        0  FlashSignoff
       24  FlashWrite
        8  ProgramDelay
        4  fputc


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
     190  FlashErase
      18  FlashInit
       4  FlashSignoff
     212  FlashWrite
      20  ProgramDelay
      16  fputc

 
 520 bytes in section .text
 
 520 bytes of CODE memory

Errors: none
Warnings: none
